
NUCLEO-H7A3ZI_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009808  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009ab8  08009ab8  00019ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009ef0  08009ef0  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08009ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000019c  240001e0  0800a0d4  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400037c  0800a0d4  0002037c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b09c  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fa6  00000000  00000000  0003b2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001410  00000000  00000000  0003e250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012c8  00000000  00000000  0003f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003238b  00000000  00000000  00040928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b365  00000000  00000000  00072cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141c95  00000000  00000000  0008e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cfcad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006430  00000000  00000000  001cfd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009aa0 	.word	0x08009aa0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	08009aa0 	.word	0x08009aa0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b80      	ldr	r3, [pc, #512]	; (80008bc <MX_GPIO_Init+0x218>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	4a7e      	ldr	r2, [pc, #504]	; (80008bc <MX_GPIO_Init+0x218>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ca:	4b7c      	ldr	r3, [pc, #496]	; (80008bc <MX_GPIO_Init+0x218>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	623b      	str	r3, [r7, #32]
 80006d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4b78      	ldr	r3, [pc, #480]	; (80008bc <MX_GPIO_Init+0x218>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	4a77      	ldr	r2, [pc, #476]	; (80008bc <MX_GPIO_Init+0x218>)
 80006e0:	f043 0320 	orr.w	r3, r3, #32
 80006e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e8:	4b74      	ldr	r3, [pc, #464]	; (80008bc <MX_GPIO_Init+0x218>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	61fb      	str	r3, [r7, #28]
 80006f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b71      	ldr	r3, [pc, #452]	; (80008bc <MX_GPIO_Init+0x218>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fc:	4a6f      	ldr	r2, [pc, #444]	; (80008bc <MX_GPIO_Init+0x218>)
 80006fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000706:	4b6d      	ldr	r3, [pc, #436]	; (80008bc <MX_GPIO_Init+0x218>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b69      	ldr	r3, [pc, #420]	; (80008bc <MX_GPIO_Init+0x218>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800071a:	4a68      	ldr	r2, [pc, #416]	; (80008bc <MX_GPIO_Init+0x218>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000724:	4b65      	ldr	r3, [pc, #404]	; (80008bc <MX_GPIO_Init+0x218>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b62      	ldr	r3, [pc, #392]	; (80008bc <MX_GPIO_Init+0x218>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000738:	4a60      	ldr	r2, [pc, #384]	; (80008bc <MX_GPIO_Init+0x218>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000742:	4b5e      	ldr	r3, [pc, #376]	; (80008bc <MX_GPIO_Init+0x218>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000750:	4b5a      	ldr	r3, [pc, #360]	; (80008bc <MX_GPIO_Init+0x218>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000756:	4a59      	ldr	r2, [pc, #356]	; (80008bc <MX_GPIO_Init+0x218>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000760:	4b56      	ldr	r3, [pc, #344]	; (80008bc <MX_GPIO_Init+0x218>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b53      	ldr	r3, [pc, #332]	; (80008bc <MX_GPIO_Init+0x218>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000774:	4a51      	ldr	r2, [pc, #324]	; (80008bc <MX_GPIO_Init+0x218>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800077e:	4b4f      	ldr	r3, [pc, #316]	; (80008bc <MX_GPIO_Init+0x218>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078c:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <MX_GPIO_Init+0x218>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000792:	4a4a      	ldr	r2, [pc, #296]	; (80008bc <MX_GPIO_Init+0x218>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800079c:	4b47      	ldr	r3, [pc, #284]	; (80008bc <MX_GPIO_Init+0x218>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b0:	4843      	ldr	r0, [pc, #268]	; (80008c0 <MX_GPIO_Init+0x21c>)
 80007b2:	f001 f8f1 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f244 0101 	movw	r1, #16385	; 0x4001
 80007bc:	4841      	ldr	r0, [pc, #260]	; (80008c4 <MX_GPIO_Init+0x220>)
 80007be:	f001 f8eb 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	4840      	ldr	r0, [pc, #256]	; (80008c8 <MX_GPIO_Init+0x224>)
 80007c8:	f001 f8e6 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	483a      	ldr	r0, [pc, #232]	; (80008cc <MX_GPIO_Init+0x228>)
 80007e2:	f000 ff29 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4830      	ldr	r0, [pc, #192]	; (80008c0 <MX_GPIO_Init+0x21c>)
 8000800:	f000 ff1a 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000804:	f244 0301 	movw	r3, #16385	; 0x4001
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4829      	ldr	r0, [pc, #164]	; (80008c4 <MX_GPIO_Init+0x220>)
 800081e:	f000 ff0b 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	4826      	ldr	r0, [pc, #152]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000838:	f000 fefe 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800083c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	4820      	ldr	r0, [pc, #128]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000852:	f000 fef1 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000868:	230a      	movs	r3, #10
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	4818      	ldr	r0, [pc, #96]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000874:	f000 fee0 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000878:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000892:	f000 fed1 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000896:	2302      	movs	r3, #2
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	4619      	mov	r1, r3
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_GPIO_Init+0x224>)
 80008ae:	f000 fec3 	bl	8001638 <HAL_GPIO_Init>

}
 80008b2:	bf00      	nop
 80008b4:	3738      	adds	r7, #56	; 0x38
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	58024400 	.word	0x58024400
 80008c0:	58021400 	.word	0x58021400
 80008c4:	58020400 	.word	0x58020400
 80008c8:	58021000 	.word	0x58021000
 80008cc:	58020800 	.word	0x58020800
 80008d0:	58021800 	.word	0x58021800
 80008d4:	58020000 	.word	0x58020000

080008d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_I2C1_Init+0x74>)
 80008de:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <MX_I2C1_Init+0x78>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_I2C1_Init+0x74>)
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <MX_I2C1_Init+0x7c>)
 80008e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_I2C1_Init+0x74>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_I2C1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_I2C1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_I2C1_Init+0x74>)
 8000914:	f001 f874 	bl	8001a00 <HAL_I2C_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800091e:	f000 fa0f 	bl	8000d40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <MX_I2C1_Init+0x74>)
 8000926:	f001 fde1 	bl	80024ec <HAL_I2CEx_ConfigAnalogFilter>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000930:	f000 fa06 	bl	8000d40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_I2C1_Init+0x74>)
 8000938:	f001 fe23 	bl	8002582 <HAL_I2CEx_ConfigDigitalFilter>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000942:	f000 f9fd 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	240001fc 	.word	0x240001fc
 8000950:	40005400 	.word	0x40005400
 8000954:	20b0ccff 	.word	0x20b0ccff

08000958 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0ba      	sub	sp, #232	; 0xe8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	22c0      	movs	r2, #192	; 0xc0
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f006 fa37 	bl	8006dec <memset>
  if(i2cHandle->Instance==I2C1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d145      	bne.n	8000a14 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000988:	f04f 0208 	mov.w	r2, #8
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fe54 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009aa:	f000 f9c9 	bl	8000d40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_I2C_MspInit+0xc8>)
 80009b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b4:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <HAL_I2C_MspInit+0xc8>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_I2C_MspInit+0xc8>)
 80009c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009cc:	23c0      	movs	r3, #192	; 0xc0
 80009ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	2312      	movs	r3, #18
 80009d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e4:	2304      	movs	r3, #4
 80009e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <HAL_I2C_MspInit+0xcc>)
 80009f2:	f000 fe21 	bl	8001638 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_I2C_MspInit+0xc8>)
 80009f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80009fc:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_I2C_MspInit+0xc8>)
 80009fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a02:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_I2C_MspInit+0xc8>)
 8000a08:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	37e8      	adds	r7, #232	; 0xe8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020400 	.word	0x58020400

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fc61 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f8fb 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f7ff fe35 	bl	80006a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a3a:	f000 fb73 	bl	8001124 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a3e:	f000 fc27 	bl	8001290 <MX_USB_OTG_HS_USB_Init>
  MX_I2C1_Init();
 8000a42:	f7ff ff49 	bl	80008d8 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000a46:	f000 fb0d 	bl	8001064 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8000a4a:	486d      	ldr	r0, [pc, #436]	; (8000c00 <main+0x1d8>)
 8000a4c:	f004 fc36 	bl	80052bc <HAL_TIM_Base_Start_IT>

	//Init MPU6050
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2301      	movs	r3, #1
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	4b6a      	ldr	r3, [pc, #424]	; (8000c04 <main+0x1dc>)
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2275      	movs	r2, #117	; 0x75
 8000a62:	21d0      	movs	r1, #208	; 0xd0
 8000a64:	4868      	ldr	r0, [pc, #416]	; (8000c08 <main+0x1e0>)
 8000a66:	f001 f96f 	bl	8001d48 <HAL_I2C_Mem_Read>
	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8000a6a:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <main+0x1dc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b68      	cmp	r3, #104	; 0x68
 8000a70:	d13f      	bne.n	8000af2 <main+0xca>
	{
		uint8_t Data;
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	f107 0309 	add.w	r3, r7, #9
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2301      	movs	r3, #1
 8000a88:	226b      	movs	r2, #107	; 0x6b
 8000a8a:	21d0      	movs	r1, #208	; 0xd0
 8000a8c:	485e      	ldr	r0, [pc, #376]	; (8000c08 <main+0x1e0>)
 8000a8e:	f001 f847 	bl	8001b20 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000a92:	2307      	movs	r3, #7
 8000a94:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 0309 	add.w	r3, r7, #9
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2219      	movs	r2, #25
 8000aaa:	21d0      	movs	r1, #208	; 0xd0
 8000aac:	4856      	ldr	r0, [pc, #344]	; (8000c08 <main+0x1e0>)
 8000aae:	f001 f837 	bl	8001b20 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f107 0309 	add.w	r3, r7, #9
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	221c      	movs	r2, #28
 8000aca:	21d0      	movs	r1, #208	; 0xd0
 8000acc:	484e      	ldr	r0, [pc, #312]	; (8000c08 <main+0x1e0>)
 8000ace:	f001 f827 	bl	8001b20 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	9302      	str	r3, [sp, #8]
 8000adc:	2301      	movs	r3, #1
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	f107 0309 	add.w	r3, r7, #9
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	221b      	movs	r2, #27
 8000aea:	21d0      	movs	r1, #208	; 0xd0
 8000aec:	4846      	ldr	r0, [pc, #280]	; (8000c08 <main+0x1e0>)
 8000aee:	f001 f817 	bl	8001b20 <HAL_I2C_Mem_Write>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(timFlagIt){
 8000af2:	4b46      	ldr	r3, [pc, #280]	; (8000c0c <main+0x1e4>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0fb      	beq.n	8000af2 <main+0xca>
			uint8_t Rec_Data[6];
			int16_t Accel_X_RAW = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	81fb      	strh	r3, [r7, #14]
			int16_t Accel_Y_RAW = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	81bb      	strh	r3, [r7, #12]
			int16_t Accel_Z_RAW = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	817b      	strh	r3, [r7, #10]
			HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	9302      	str	r3, [sp, #8]
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	463b      	mov	r3, r7
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2301      	movs	r3, #1
 8000b16:	223b      	movs	r2, #59	; 0x3b
 8000b18:	21d0      	movs	r1, #208	; 0xd0
 8000b1a:	483b      	ldr	r0, [pc, #236]	; (8000c08 <main+0x1e0>)
 8000b1c:	f001 f914 	bl	8001d48 <HAL_I2C_Mem_Read>

			Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000b20:	783b      	ldrb	r3, [r7, #0]
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	787b      	ldrb	r3, [r7, #1]
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	81fb      	strh	r3, [r7, #14]
			Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000b2e:	78bb      	ldrb	r3, [r7, #2]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	81bb      	strh	r3, [r7, #12]
			Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000b3c:	793b      	ldrb	r3, [r7, #4]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	797b      	ldrb	r3, [r7, #5]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	817b      	strh	r3, [r7, #10]

			x = Accel_X_RAW/16384.0;
 8000b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b4e:	ee07 3a90 	vmov	s15, r3
 8000b52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b56:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000bf8 <main+0x1d0>
 8000b5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b62:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <main+0x1e8>)
 8000b64:	edc3 7a00 	vstr	s15, [r3]
			y = Accel_Y_RAW/16384.0;
 8000b68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b74:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000bf8 <main+0x1d0>
 8000b78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <main+0x1ec>)
 8000b82:	edc3 7a00 	vstr	s15, [r3]
			z = Accel_Z_RAW/16384.0;
 8000b86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b92:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000bf8 <main+0x1d0>
 8000b96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <main+0x1f0>)
 8000ba0:	edc3 7a00 	vstr	s15, [r3]


			sizeStr = snprintf(uartTxBuffer, UARTTXSIZE, "X=%1.3f, Y=%1.3f, Z=%1.3f\r\n",x,y,z);
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <main+0x1e8>)
 8000ba6:	edd3 7a00 	vldr	s15, [r3]
 8000baa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <main+0x1ec>)
 8000bb0:	edd3 6a00 	vldr	s13, [r3]
 8000bb4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <main+0x1f0>)
 8000bba:	edd3 5a00 	vldr	s11, [r3]
 8000bbe:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000bc2:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000bc6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000bca:	ed8d 7b00 	vstr	d7, [sp]
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <main+0x1f4>)
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <main+0x1f8>)
 8000bd4:	f006 fd56 	bl	8007684 <sniprintf>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <main+0x1fc>)
 8000bde:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, uartTxBuffer, sizeStr, 100);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <main+0x1fc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	490d      	ldr	r1, [pc, #52]	; (8000c20 <main+0x1f8>)
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <main+0x200>)
 8000bec:	f004 febc 	bl	8005968 <HAL_UART_Transmit>
			timFlagIt = 0;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <main+0x1e4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		if(timFlagIt){
 8000bf6:	e77c      	b.n	8000af2 <main+0xca>
 8000bf8:	00000000 	.word	0x00000000
 8000bfc:	40d00000 	.word	0x40d00000
 8000c00:	24000288 	.word	0x24000288
 8000c04:	24000281 	.word	0x24000281
 8000c08:	240001fc 	.word	0x240001fc
 8000c0c:	24000250 	.word	0x24000250
 8000c10:	24000254 	.word	0x24000254
 8000c14:	24000258 	.word	0x24000258
 8000c18:	2400025c 	.word	0x2400025c
 8000c1c:	08009ab8 	.word	0x08009ab8
 8000c20:	24000260 	.word	0x24000260
 8000c24:	24000280 	.word	0x24000280
 8000c28:	240002d4 	.word	0x240002d4

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	; 0x70
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	224c      	movs	r2, #76	; 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f006 f8d6 	bl	8006dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2220      	movs	r2, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f006 f8d0 	bl	8006dec <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <SystemClock_Config+0xe4>)
 8000c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c56:	2004      	movs	r0, #4
 8000c58:	f001 fce0 	bl	800261c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <SystemClock_Config+0xe8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <SystemClock_Config+0xe8>)
 8000c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemClock_Config+0xe8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c78:	bf00      	nop
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SystemClock_Config+0xe8>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c86:	d1f8      	bne.n	8000c7a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c88:	2321      	movs	r3, #33	; 0x21
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c92:	2301      	movs	r3, #1
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000ca2:	2346      	movs	r3, #70	; 0x46
 8000ca4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fd04 	bl	80026d0 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cce:	f000 f837 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	233f      	movs	r3, #63	; 0x3f
 8000cd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ce2:	2340      	movs	r3, #64	; 0x40
 8000ce4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2107      	movs	r1, #7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f91b 	bl	8002f34 <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000d04:	f000 f81c 	bl	8000d40 <Error_Handler>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3770      	adds	r7, #112	; 0x70
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58024800 	.word	0x58024800

08000d18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d20:	2101      	movs	r1, #1
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d24:	f000 fe51 	bl	80019ca <HAL_GPIO_TogglePin>
	timFlagIt = 1;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	58020400 	.word	0x58020400
 8000d3c:	24000250 	.word	0x24000250

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_MspInit+0x30>)
 8000d54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x30>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x30>)
 8000d64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	58024400 	.word	0x58024400

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 fb04 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM7_IRQHandler+0x10>)
 8000dda:	f004 fae7 	bl	80053ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000288 	.word	0x24000288

08000de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_kill>:

int _kill(int pid, int sig)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e02:	f005 ffc9 	bl	8006d98 <__errno>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2216      	movs	r2, #22
 8000e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_exit>:

void _exit (int status)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffe7 	bl	8000df8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e2a:	e7fe      	b.n	8000e2a <_exit+0x12>

08000e2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00a      	b.n	8000e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4601      	mov	r1, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf0      	blt.n	8000e3e <_read+0x12>
  }

  return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e009      	b.n	8000e8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf1      	blt.n	8000e78 <_write+0x12>
  }
  return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_close>:

int _close(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_isatty>:

int _isatty(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f005 ff2e 	bl	8006d98 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	24100000 	.word	0x24100000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	24000284 	.word	0x24000284
 8000f70:	24000380 	.word	0x24000380

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f78:	4b32      	ldr	r3, [pc, #200]	; (8001044 <SystemInit+0xd0>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a31      	ldr	r2, [pc, #196]	; (8001044 <SystemInit+0xd0>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <SystemInit+0xd4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d807      	bhi.n	8000fa4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <SystemInit+0xd4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	4a2a      	ldr	r2, [pc, #168]	; (8001048 <SystemInit+0xd4>)
 8000f9e:	f043 0303 	orr.w	r3, r3, #3
 8000fa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <SystemInit+0xd8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <SystemInit+0xd8>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <SystemInit+0xd8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <SystemInit+0xd8>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4924      	ldr	r1, [pc, #144]	; (800104c <SystemInit+0xd8>)
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <SystemInit+0xdc>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <SystemInit+0xd4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <SystemInit+0xd4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 030f 	bic.w	r3, r3, #15
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <SystemInit+0xd4>)
 8000fd8:	f043 0303 	orr.w	r3, r3, #3
 8000fdc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <SystemInit+0xd8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <SystemInit+0xd8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <SystemInit+0xd8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <SystemInit+0xd8>)
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <SystemInit+0xe0>)
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <SystemInit+0xd8>)
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <SystemInit+0xe4>)
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <SystemInit+0xd8>)
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <SystemInit+0xe8>)
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <SystemInit+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <SystemInit+0xd8>)
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <SystemInit+0xe8>)
 800100c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <SystemInit+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <SystemInit+0xd8>)
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <SystemInit+0xe8>)
 8001018:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <SystemInit+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <SystemInit+0xd8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a09      	ldr	r2, [pc, #36]	; (800104c <SystemInit+0xd8>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <SystemInit+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <SystemInit+0xec>)
 8001034:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001038:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	52002000 	.word	0x52002000
 800104c:	58024400 	.word	0x58024400
 8001050:	eaf6ed7f 	.word	0xeaf6ed7f
 8001054:	02020200 	.word	0x02020200
 8001058:	01ff0000 	.word	0x01ff0000
 800105c:	01010280 	.word	0x01010280
 8001060:	52004000 	.word	0x52004000

08001064 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_TIM7_Init+0x68>)
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <MX_TIM7_Init+0x6c>)
 8001078:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 28000-1;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_TIM7_Init+0x68>)
 800107c:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001080:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_TIM7_Init+0x68>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_TIM7_Init+0x68>)
 800108a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800108e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_TIM7_Init+0x68>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_TIM7_Init+0x68>)
 8001098:	f004 f8b8 	bl	800520c <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010a2:	f7ff fe4d 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_TIM7_Init+0x68>)
 80010b4:	f004 fb5c 	bl	8005770 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80010be:	f7ff fe3f 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24000288 	.word	0x24000288
 80010d0:	40001400 	.word	0x40001400

080010d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_TIM_Base_MspInit+0x48>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d116      	bne.n	8001114 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_TIM_Base_MspInit+0x4c>)
 80010e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_TIM_Base_MspInit+0x4c>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_TIM_Base_MspInit+0x4c>)
 80010f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2037      	movs	r0, #55	; 0x37
 800110a:	f000 fa60 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800110e:	2037      	movs	r0, #55	; 0x37
 8001110:	f000 fa77 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40001400 	.word	0x40001400
 8001120:	58024400 	.word	0x58024400

08001124 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 800112a:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <MX_USART3_UART_Init+0x94>)
 800112c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 800116e:	f004 fbab 	bl	80058c8 <HAL_UART_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001178:	f7ff fde2 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117c:	2100      	movs	r1, #0
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001180:	f005 fd3f 	bl	8006c02 <HAL_UARTEx_SetTxFifoThreshold>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800118a:	f7ff fdd9 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 8001192:	f005 fd74 	bl	8006c7e <HAL_UARTEx_SetRxFifoThreshold>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800119c:	f7ff fdd0 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_USART3_UART_Init+0x90>)
 80011a2:	f005 fcf5 	bl	8006b90 <HAL_UARTEx_DisableFifoMode>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011ac:	f7ff fdc8 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	240002d4 	.word	0x240002d4
 80011b8:	40004800 	.word	0x40004800

080011bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ba      	sub	sp, #232	; 0xe8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	22c0      	movs	r2, #192	; 0xc0
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f005 fe05 	bl	8006dec <memset>
  if(uartHandle->Instance==USART3)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a27      	ldr	r2, [pc, #156]	; (8001284 <HAL_UART_MspInit+0xc8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d146      	bne.n	800127a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ec:	f04f 0202 	mov.w	r2, #2
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4618      	mov	r0, r3
 8001204:	f002 fa22 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800120e:	f7ff fd97 	bl	8000d40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_UART_MspInit+0xcc>)
 8001214:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_UART_MspInit+0xcc>)
 800121a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_UART_MspInit+0xcc>)
 8001224:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0xcc>)
 8001232:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_UART_MspInit+0xcc>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_UART_MspInit+0xcc>)
 8001242:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800124e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001268:	2307      	movs	r3, #7
 800126a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_UART_MspInit+0xd0>)
 8001276:	f000 f9df 	bl	8001638 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800127a:	bf00      	nop
 800127c:	37e8      	adds	r7, #232	; 0xe8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004800 	.word	0x40004800
 8001288:	58024400 	.word	0x58024400
 800128c:	58020c00 	.word	0x58020c00

08001290 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a4:	f7ff fe66 	bl	8000f74 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f005 fd69 	bl	8006da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff fba9 	bl	8000a28 <main>
  bx  lr
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80012e4:	08009ef4 	.word	0x08009ef4
  ldr r2, =_sbss
 80012e8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80012ec:	2400037c 	.word	0x2400037c

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f95c 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001300:	f001 ffce 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_Init+0x68>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	4913      	ldr	r1, [pc, #76]	; (8001360 <HAL_Init+0x6c>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_Init+0x6c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x70>)
 8001336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_Init+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f814 	bl	800136c <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e002      	b.n	8001354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134e:	f7ff fcfd 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58024400 	.word	0x58024400
 8001360:	08009ad4 	.word	0x08009ad4
 8001364:	24000004 	.word	0x24000004
 8001368:	24000000 	.word	0x24000000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e021      	b.n	80013c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_InitTick+0x64>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f941 	bl	800161e <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b4:	f000 f90b 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x68>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2400000c 	.word	0x2400000c
 80013d0:	24000000 	.word	0x24000000
 80013d4:	24000008 	.word	0x24000008

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2400000c 	.word	0x2400000c
 80013fc:	24000368 	.word	0x24000368

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	24000368 	.word	0x24000368

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	05fa0000 	.word	0x05fa0000

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff40 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff33 	bl	800147c <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa4 	bl	8001574 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_GPIO_Init+0x234>)
 8001648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800164a:	e194      	b.n	8001976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2101      	movs	r1, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8186 	beq.w	8001970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d005      	beq.n	800167c <HAL_GPIO_Init+0x44>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d130      	bne.n	80016de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016b2:	2201      	movs	r2, #1
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	f003 0201 	and.w	r2, r3, #1
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d017      	beq.n	800171a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d123      	bne.n	800176e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	69b9      	ldr	r1, [r7, #24]
 800176a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0203 	and.w	r2, r3, #3
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80e0 	beq.w	8001970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_GPIO_Init+0x23c>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_GPIO_Init+0x240>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d052      	beq.n	80018a0 <HAL_GPIO_Init+0x268>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_GPIO_Init+0x244>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_GPIO_Init+0x22e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_GPIO_Init+0x248>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_Init+0x22a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_GPIO_Init+0x24c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x226>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_GPIO_Init+0x250>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x222>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <HAL_GPIO_Init+0x254>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x21e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x258>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x21a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x25c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x216>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_GPIO_Init+0x260>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x212>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_GPIO_Init+0x264>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x20e>
 8001842:	2309      	movs	r3, #9
 8001844:	e02d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001846:	230a      	movs	r3, #10
 8001848:	e02b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184a:	2308      	movs	r3, #8
 800184c:	e029      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184e:	2307      	movs	r3, #7
 8001850:	e027      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001852:	2306      	movs	r3, #6
 8001854:	e025      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001856:	2305      	movs	r3, #5
 8001858:	e023      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185a:	2304      	movs	r3, #4
 800185c:	e021      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185e:	2303      	movs	r3, #3
 8001860:	e01f      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001862:	2302      	movs	r3, #2
 8001864:	e01d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001866:	2301      	movs	r3, #1
 8001868:	e01b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800186a:	bf00      	nop
 800186c:	58000080 	.word	0x58000080
 8001870:	58024400 	.word	0x58024400
 8001874:	58000400 	.word	0x58000400
 8001878:	58020000 	.word	0x58020000
 800187c:	58020400 	.word	0x58020400
 8001880:	58020800 	.word	0x58020800
 8001884:	58020c00 	.word	0x58020c00
 8001888:	58021000 	.word	0x58021000
 800188c:	58021400 	.word	0x58021400
 8001890:	58021800 	.word	0x58021800
 8001894:	58021c00 	.word	0x58021c00
 8001898:	58022000 	.word	0x58022000
 800189c:	58022400 	.word	0x58022400
 80018a0:	2300      	movs	r3, #0
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b2:	4938      	ldr	r1, [pc, #224]	; (8001994 <HAL_GPIO_Init+0x35c>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f ae63 	bne.w	800164c <HAL_GPIO_Init+0x14>
  }
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3724      	adds	r7, #36	; 0x24
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	58000400 	.word	0x58000400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	041a      	lsls	r2, r3, #16
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07f      	b.n	8001b12 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe ff96 	bl	8000958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2224      	movs	r2, #36	; 0x24
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d104      	bne.n	8001a9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_I2C_Init+0x11c>)
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69d9      	ldr	r1, [r3, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1a      	ldr	r2, [r3, #32]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	02008000 	.word	0x02008000

08001b20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	817b      	strh	r3, [r7, #10]
 8001b32:	460b      	mov	r3, r1
 8001b34:	813b      	strh	r3, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	f040 80f9 	bne.w	8001d3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_I2C_Mem_Write+0x34>
 8001b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0ed      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_I2C_Mem_Write+0x4e>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e0e6      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b76:	f7ff fc43 	bl	8001400 <HAL_GetTick>
 8001b7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2319      	movs	r3, #25
 8001b82:	2201      	movs	r2, #1
 8001b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fac3 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d1      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2221      	movs	r2, #33	; 0x21
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2240      	movs	r2, #64	; 0x40
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bc0:	88f8      	ldrh	r0, [r7, #6]
 8001bc2:	893a      	ldrh	r2, [r7, #8]
 8001bc4:	8979      	ldrh	r1, [r7, #10]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	4603      	mov	r3, r0
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f9d3 	bl	8001f7c <I2C_RequestMemoryWrite>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0a9      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2bff      	cmp	r3, #255	; 0xff
 8001bf0:	d90e      	bls.n	8001c10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	22ff      	movs	r2, #255	; 0xff
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	8979      	ldrh	r1, [r7, #10]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fc3d 	bl	8002488 <I2C_TransferConfig>
 8001c0e:	e00f      	b.n	8001c30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	8979      	ldrh	r1, [r7, #10]
 8001c22:	2300      	movs	r3, #0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fc2c 	bl	8002488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fabc 	bl	80021b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e07b      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d034      	beq.n	8001ce8 <HAL_I2C_Mem_Write+0x1c8>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d130      	bne.n	8001ce8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 fa3f 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e04d      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d90e      	bls.n	8001cc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	22ff      	movs	r2, #255	; 0xff
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fbe1 	bl	8002488 <I2C_TransferConfig>
 8001cc6:	e00f      	b.n	8001ce8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	8979      	ldrh	r1, [r7, #10]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fbd0 	bl	8002488 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d19e      	bne.n	8001c30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 faa2 	bl	8002240 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e01a      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_I2C_Mem_Write+0x224>)
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d3a:	2302      	movs	r3, #2
  }
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	fe00e800 	.word	0xfe00e800

08001d48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	817b      	strh	r3, [r7, #10]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	813b      	strh	r3, [r7, #8]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	f040 80fd 	bne.w	8001f6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_I2C_Mem_Read+0x34>
 8001d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0f1      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_I2C_Mem_Read+0x4e>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e0ea      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d9e:	f7ff fb2f 	bl	8001400 <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2319      	movs	r3, #25
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f9af 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0d5      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2222      	movs	r2, #34	; 0x22
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2240      	movs	r2, #64	; 0x40
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001de8:	88f8      	ldrh	r0, [r7, #6]
 8001dea:	893a      	ldrh	r2, [r7, #8]
 8001dec:	8979      	ldrh	r1, [r7, #10]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4603      	mov	r3, r0
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f913 	bl	8002024 <I2C_RequestMemoryRead>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0ad      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2bff      	cmp	r3, #255	; 0xff
 8001e18:	d90e      	bls.n	8001e38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	22ff      	movs	r2, #255	; 0xff
 8001e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	8979      	ldrh	r1, [r7, #10]
 8001e28:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <HAL_I2C_Mem_Read+0x22c>)
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fb29 	bl	8002488 <I2C_TransferConfig>
 8001e36:	e00f      	b.n	8001e58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <HAL_I2C_Mem_Read+0x22c>)
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fb18 	bl	8002488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2104      	movs	r1, #4
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f956 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e07c      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d034      	beq.n	8001f18 <HAL_I2C_Mem_Read+0x1d0>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d130      	bne.n	8001f18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f927 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e04d      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d90e      	bls.n	8001ef8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	22ff      	movs	r2, #255	; 0xff
 8001ede:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	8979      	ldrh	r1, [r7, #10]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fac9 	bl	8002488 <I2C_TransferConfig>
 8001ef6:	e00f      	b.n	8001f18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fab8 	bl	8002488 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d19a      	bne.n	8001e58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f98a 	bl	8002240 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e01a      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_I2C_Mem_Read+0x230>)
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
  }
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	80002400 	.word	0x80002400
 8001f78:	fe00e800 	.word	0xfe00e800

08001f7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	817b      	strh	r3, [r7, #10]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	813b      	strh	r3, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	4b20      	ldr	r3, [pc, #128]	; (8002020 <I2C_RequestMemoryWrite+0xa4>)
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fa6f 	bl	8002488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	69b9      	ldr	r1, [r7, #24]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8ff 	bl	80021b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e02c      	b.n	8002018 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc4:	893b      	ldrh	r3, [r7, #8]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8001fce:	e015      	b.n	8001ffc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fd0:	893b      	ldrh	r3, [r7, #8]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f8e5 	bl	80021b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e012      	b.n	8002018 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ff2:	893b      	ldrh	r3, [r7, #8]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2200      	movs	r2, #0
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f884 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	80002000 	.word	0x80002000

08002024 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4603      	mov	r3, r0
 8002034:	817b      	strh	r3, [r7, #10]
 8002036:	460b      	mov	r3, r1
 8002038:	813b      	strh	r3, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <I2C_RequestMemoryRead+0xa4>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fa1c 	bl	8002488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f8ac 	bl	80021b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e02c      	b.n	80020be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800206a:	893b      	ldrh	r3, [r7, #8]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
 8002074:	e015      	b.n	80020a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002076:	893b      	ldrh	r3, [r7, #8]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	b29b      	uxth	r3, r3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f892 	bl	80021b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e012      	b.n	80020be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002098:	893b      	ldrh	r3, [r7, #8]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2140      	movs	r1, #64	; 0x40
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f831 	bl	8002114 <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	80002000 	.word	0x80002000

080020cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d103      	bne.n	80020ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d007      	beq.n	8002108 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	619a      	str	r2, [r3, #24]
  }
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002124:	e031      	b.n	800218a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800212c:	d02d      	beq.n	800218a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212e:	f7ff f967 	bl	8001400 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d122      	bne.n	800218a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4013      	ands	r3, r2
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	429a      	cmp	r2, r3
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	429a      	cmp	r2, r3
 8002160:	d113      	bne.n	800218a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4013      	ands	r3, r2
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d0be      	beq.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021be:	e033      	b.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f87f 	bl	80022c8 <I2C_IsErrorOccurred>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e031      	b.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021da:	d025      	beq.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021dc:	f7ff f910 	bl	8001400 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d302      	bcc.n	80021f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d11a      	bne.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d013      	beq.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0220 	orr.w	r2, r3, #32
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e007      	b.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d1c4      	bne.n	80021c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800224c:	e02f      	b.n	80022ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f838 	bl	80022c8 <I2C_IsErrorOccurred>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e02d      	b.n	80022be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff f8cd 	bl	8001400 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d11a      	bne.n	80022ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b20      	cmp	r3, #32
 8002284:	d013      	beq.n	80022ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f043 0220 	orr.w	r2, r3, #32
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e007      	b.n	80022be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d1c8      	bne.n	800224e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d068      	beq.n	80023c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2210      	movs	r2, #16
 80022fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022fc:	e049      	b.n	8002392 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002304:	d045      	beq.n	8002392 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7ff f87b 	bl	8001400 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_IsErrorOccurred+0x54>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d13a      	bne.n	8002392 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800232e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800233a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233e:	d121      	bne.n	8002384 <I2C_IsErrorOccurred+0xbc>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002346:	d01d      	beq.n	8002384 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	2b20      	cmp	r3, #32
 800234c:	d01a      	beq.n	8002384 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800235c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800235e:	f7ff f84f 	bl	8001400 <HAL_GetTick>
 8002362:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002364:	e00e      	b.n	8002384 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002366:	f7ff f84b 	bl	8001400 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b19      	cmp	r3, #25
 8002372:	d907      	bls.n	8002384 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f043 0320 	orr.w	r3, r3, #32
 800237a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002382:	e006      	b.n	8002392 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b20      	cmp	r3, #32
 8002390:	d1e9      	bne.n	8002366 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b20      	cmp	r3, #32
 800239e:	d003      	beq.n	80023a8 <I2C_IsErrorOccurred+0xe0>
 80023a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0aa      	beq.n	80022fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2220      	movs	r2, #32
 80023b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800242c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01c      	beq.n	8002476 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff fe45 	bl	80020cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <I2C_IsErrorOccurred+0x1bc>)
 800244e:	400b      	ands	r3, r1
 8002450:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800247a:	4618      	mov	r0, r3
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	4613      	mov	r3, r2
 8002498:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024a0:	7a7b      	ldrb	r3, [r7, #9]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	0d5b      	lsrs	r3, r3, #21
 80024c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <I2C_TransferConfig+0x60>)
 80024c8:	430b      	orrs	r3, r1
 80024ca:	43db      	mvns	r3, r3
 80024cc:	ea02 0103 	and.w	r1, r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	03ff63ff 	.word	0x03ff63ff

080024ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d138      	bne.n	8002574 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800250c:	2302      	movs	r3, #2
 800250e:	e032      	b.n	8002576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800253e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b20      	cmp	r3, #32
 8002596:	d139      	bne.n	800260c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e033      	b.n	800260e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2224      	movs	r2, #36	; 0x24
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	2b06      	cmp	r3, #6
 800262e:	d00a      	beq.n	8002646 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d001      	beq.n	8002642 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e040      	b.n	80026c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e03e      	b.n	80026c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800264e:	491f      	ldr	r1, [pc, #124]	; (80026cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002656:	f7fe fed3 	bl	8001400 <HAL_GetTick>
 800265a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800265c:	e009      	b.n	8002672 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800265e:	f7fe fecf 	bl	8001400 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266c:	d901      	bls.n	8002672 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e028      	b.n	80026c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267e:	d1ee      	bne.n	800265e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b1e      	cmp	r3, #30
 8002684:	d008      	beq.n	8002698 <HAL_PWREx_ConfigSupply+0x7c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b2e      	cmp	r3, #46	; 0x2e
 800268a:	d005      	beq.n	8002698 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b1d      	cmp	r3, #29
 8002690:	d002      	beq.n	8002698 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b2d      	cmp	r3, #45	; 0x2d
 8002696:	d114      	bne.n	80026c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002698:	f7fe feb2 	bl	8001400 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800269e:	e009      	b.n	80026b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026a0:	f7fe feae 	bl	8001400 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ae:	d901      	bls.n	80026b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e007      	b.n	80026c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_PWREx_ConfigSupply+0xb0>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d1ee      	bne.n	80026a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	58024800 	.word	0x58024800

080026d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	f000 bc1f 	b.w	8002f22 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80b3 	beq.w	8002858 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f2:	4b95      	ldr	r3, [pc, #596]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026fc:	4b92      	ldr	r3, [pc, #584]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	2b10      	cmp	r3, #16
 8002706:	d007      	beq.n	8002718 <HAL_RCC_OscConfig+0x48>
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	2b18      	cmp	r3, #24
 800270c:	d112      	bne.n	8002734 <HAL_RCC_OscConfig+0x64>
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d10d      	bne.n	8002734 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8098 	beq.w	8002856 <HAL_RCC_OscConfig+0x186>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 8093 	bne.w	8002856 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e3f6      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x7c>
 800273e:	4b82      	ldr	r3, [pc, #520]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a81      	ldr	r2, [pc, #516]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e058      	b.n	80027fe <HAL_RCC_OscConfig+0x12e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d112      	bne.n	800277a <HAL_RCC_OscConfig+0xaa>
 8002754:	4b7c      	ldr	r3, [pc, #496]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7b      	ldr	r2, [pc, #492]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b79      	ldr	r3, [pc, #484]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a78      	ldr	r2, [pc, #480]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002766:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a75      	ldr	r2, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e041      	b.n	80027fe <HAL_RCC_OscConfig+0x12e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002782:	d112      	bne.n	80027aa <HAL_RCC_OscConfig+0xda>
 8002784:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6f      	ldr	r2, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 800278a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6c      	ldr	r2, [pc, #432]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002796:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a69      	ldr	r2, [pc, #420]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e029      	b.n	80027fe <HAL_RCC_OscConfig+0x12e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80027b2:	d112      	bne.n	80027da <HAL_RCC_OscConfig+0x10a>
 80027b4:	4b64      	ldr	r3, [pc, #400]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a63      	ldr	r2, [pc, #396]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a60      	ldr	r2, [pc, #384]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e011      	b.n	80027fe <HAL_RCC_OscConfig+0x12e>
 80027da:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b55      	ldr	r3, [pc, #340]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80027f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d013      	beq.n	800282e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fdfb 	bl	8001400 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280e:	f7fe fdf7 	bl	8001400 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e380      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002820:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x13e>
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fde7 	bl	8001400 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002836:	f7fe fde3 	bl	8001400 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e36c      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x166>
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 808c 	beq.w	800297e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800286e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002870:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_RCC_OscConfig+0x1bc>
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2b18      	cmp	r3, #24
 8002880:	d137      	bne.n	80028f2 <HAL_RCC_OscConfig+0x222>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d132      	bne.n	80028f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1d4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e33e      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 0219 	bic.w	r2, r3, #25
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4925      	ldr	r1, [pc, #148]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fda3 	bl	8001400 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fd9f 	bl	8001400 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e328      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4917      	ldr	r1, [pc, #92]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f0:	e045      	b.n	800297e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d028      	beq.n	800294c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0219 	bic.w	r2, r3, #25
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	4910      	ldr	r1, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fd78 	bl	8001400 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002914:	f7fe fd74 	bl	8001400 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e2fd      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	061b      	lsls	r3, r3, #24
 8002940:	4901      	ldr	r1, [pc, #4]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
 8002946:	e01a      	b.n	800297e <HAL_RCC_OscConfig+0x2ae>
 8002948:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294c:	4b97      	ldr	r3, [pc, #604]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a96      	ldr	r2, [pc, #600]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fd52 	bl	8001400 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002960:	f7fe fd4e 	bl	8001400 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e2d7      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002972:	4b8e      	ldr	r3, [pc, #568]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06a      	beq.n	8002a60 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002992:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002994:	4b85      	ldr	r3, [pc, #532]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d007      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2e0>
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b18      	cmp	r3, #24
 80029a4:	d11b      	bne.n	80029de <HAL_RCC_OscConfig+0x30e>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d116      	bne.n	80029de <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2f8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e2ac      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c8:	4b78      	ldr	r3, [pc, #480]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	4975      	ldr	r1, [pc, #468]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029dc:	e040      	b.n	8002a60 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d023      	beq.n	8002a2e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029e6:	4b71      	ldr	r3, [pc, #452]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a70      	ldr	r2, [pc, #448]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 80029ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe fd05 	bl	8001400 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029fa:	f7fe fd01 	bl	8001400 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e28a      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a18:	4b64      	ldr	r3, [pc, #400]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	4961      	ldr	r1, [pc, #388]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
 8002a2c:	e018      	b.n	8002a60 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5e      	ldr	r2, [pc, #376]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fce1 	bl	8001400 <HAL_GetTick>
 8002a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a42:	f7fe fcdd 	bl	8001400 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e266      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a54:	4b55      	ldr	r3, [pc, #340]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d036      	beq.n	8002ada <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d019      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a74:	4b4d      	ldr	r3, [pc, #308]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	4a4c      	ldr	r2, [pc, #304]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7fe fcbe 	bl	8001400 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fcba 	bl	8001400 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e243      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x3b8>
 8002aa6:	e018      	b.n	8002ada <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa8:	4b40      	ldr	r3, [pc, #256]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	4a3f      	ldr	r2, [pc, #252]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fca4 	bl	8001400 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fca0 	bl	8001400 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e229      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d036      	beq.n	8002b54 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d019      	beq.n	8002b22 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fc81 	bl	8001400 <HAL_GetTick>
 8002afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b02:	f7fe fc7d 	bl	8001400 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e206      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x432>
 8002b20:	e018      	b.n	8002b54 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a21      	ldr	r2, [pc, #132]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fc67 	bl	8001400 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b36:	f7fe fc63 	bl	8001400 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1ec      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80af 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_RCC_OscConfig+0x4e0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <HAL_RCC_OscConfig+0x4e0>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fc47 	bl	8001400 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe fc43 	bl	8001400 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1cc      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x4e0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4e4>
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a02      	ldr	r2, [pc, #8]	; (8002bac <HAL_RCC_OscConfig+0x4dc>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	e05b      	b.n	8002c62 <HAL_RCC_OscConfig+0x592>
 8002baa:	bf00      	nop
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	58024800 	.word	0x58024800
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x512>
 8002bbc:	4b9d      	ldr	r3, [pc, #628]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a9c      	ldr	r2, [pc, #624]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b9a      	ldr	r3, [pc, #616]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a99      	ldr	r2, [pc, #612]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	4b97      	ldr	r3, [pc, #604]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a96      	ldr	r2, [pc, #600]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bda:	f023 0304 	bic.w	r3, r3, #4
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	e03f      	b.n	8002c62 <HAL_RCC_OscConfig+0x592>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d112      	bne.n	8002c10 <HAL_RCC_OscConfig+0x540>
 8002bea:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a91      	ldr	r2, [pc, #580]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	4b8f      	ldr	r3, [pc, #572]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a8e      	ldr	r2, [pc, #568]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a8b      	ldr	r2, [pc, #556]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	e028      	b.n	8002c62 <HAL_RCC_OscConfig+0x592>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b85      	cmp	r3, #133	; 0x85
 8002c16:	d112      	bne.n	8002c3e <HAL_RCC_OscConfig+0x56e>
 8002c18:	4b86      	ldr	r3, [pc, #536]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a85      	ldr	r2, [pc, #532]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	4b83      	ldr	r3, [pc, #524]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a82      	ldr	r2, [pc, #520]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	4b80      	ldr	r3, [pc, #512]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a7f      	ldr	r2, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	e011      	b.n	8002c62 <HAL_RCC_OscConfig+0x592>
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a79      	ldr	r2, [pc, #484]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	4b77      	ldr	r3, [pc, #476]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a76      	ldr	r2, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d015      	beq.n	8002c96 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fbc9 	bl	8001400 <HAL_GetTick>
 8002c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe fbc5 	bl	8001400 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e14c      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c88:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ee      	beq.n	8002c72 <HAL_RCC_OscConfig+0x5a2>
 8002c94:	e014      	b.n	8002cc0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe fbb3 	bl	8001400 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe fbaf 	bl	8001400 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e136      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cb4:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ee      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 812b 	beq.w	8002f20 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cca:	4b5a      	ldr	r3, [pc, #360]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	f000 80bb 	beq.w	8002e4e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f040 8095 	bne.w	8002e0c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b54      	ldr	r3, [pc, #336]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a53      	ldr	r2, [pc, #332]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002ce8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fb87 	bl	8001400 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe fb83 	bl	8001400 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e10c      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d08:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d14:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d18:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x768>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	430a      	orrs	r2, r1
 8002d28:	4942      	ldr	r1, [pc, #264]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	3b01      	subs	r3, #1
 8002d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	025b      	lsls	r3, r3, #9
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	3b01      	subs	r3, #1
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d5e:	4935      	ldr	r1, [pc, #212]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d64:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d70:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d74:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCC_OscConfig+0x76c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d7c:	00d2      	lsls	r2, r2, #3
 8002d7e:	492d      	ldr	r1, [pc, #180]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f023 020c 	bic.w	r2, r3, #12
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4928      	ldr	r1, [pc, #160]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f023 0202 	bic.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4924      	ldr	r1, [pc, #144]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fb0c 	bl	8001400 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fb08 	bl	8001400 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e091      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x71c>
 8002e0a:	e089      	b.n	8002f20 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_RCC_OscConfig+0x764>)
 8002e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe faf2 	bl	8001400 <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe faee 	bl	8001400 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d908      	bls.n	8002e40 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e077      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
 8002e32:	bf00      	nop
 8002e34:	58024400 	.word	0x58024400
 8002e38:	fffffc0c 	.word	0xfffffc0c
 8002e3c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e9      	bne.n	8002e20 <HAL_RCC_OscConfig+0x750>
 8002e4c:	e068      	b.n	8002f20 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e4e:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e54:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d031      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0203 	and.w	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d12a      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d122      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d11a      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	0a5b      	lsrs	r3, r3, #9
 8002e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d111      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d108      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	0e1b      	lsrs	r3, r3, #24
 8002eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e02b      	b.n	8002f22 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ed4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d01f      	beq.n	8002f20 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eec:	f7fe fa88 	bl	8001400 <HAL_GetTick>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ef2:	bf00      	nop
 8002ef4:	f7fe fa84 	bl	8001400 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d0f9      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_OscConfig+0x860>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f0c:	00d2      	lsls	r2, r2, #3
 8002f0e:	4907      	ldr	r1, [pc, #28]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <HAL_RCC_OscConfig+0x85c>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3730      	adds	r7, #48	; 0x30
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	ffff0007 	.word	0xffff0007

08002f34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e19c      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b8a      	ldr	r3, [pc, #552]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b87      	ldr	r3, [pc, #540]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	4985      	ldr	r1, [pc, #532]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b83      	ldr	r3, [pc, #524]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e184      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d908      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f94:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	4975      	ldr	r1, [pc, #468]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d908      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	496a      	ldr	r1, [pc, #424]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d908      	bls.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	495e      	ldr	r1, [pc, #376]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800301a:	429a      	cmp	r2, r3
 800301c:	d908      	bls.n	8003030 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4953      	ldr	r1, [pc, #332]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800302c:	4313      	orrs	r3, r2
 800302e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	429a      	cmp	r2, r3
 800304a:	d908      	bls.n	800305e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f023 020f 	bic.w	r2, r3, #15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4947      	ldr	r1, [pc, #284]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800305a:	4313      	orrs	r3, r2
 800305c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d055      	beq.n	8003116 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4940      	ldr	r1, [pc, #256]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003078:	4313      	orrs	r3, r2
 800307a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d107      	bne.n	8003094 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003084:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d121      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0f6      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800309c:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d115      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0ea      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030b4:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0de      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d6      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f023 0207 	bic.w	r2, r3, #7
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e6:	f7fe f98b 	bl	8001400 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ee:	f7fe f987 	bl	8001400 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0be      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	429a      	cmp	r2, r3
 8003114:	d1eb      	bne.n	80030ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	429a      	cmp	r2, r3
 8003130:	d208      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f023 020f 	bic.w	r2, r3, #15
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	490e      	ldr	r1, [pc, #56]	; (8003178 <HAL_RCC_ClockConfig+0x244>)
 8003140:	4313      	orrs	r3, r2
 8003142:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d214      	bcs.n	800317c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4906      	ldr	r1, [pc, #24]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_ClockConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e086      	b.n	8003282 <HAL_RCC_ClockConfig+0x34e>
 8003174:	52002000 	.word	0x52002000
 8003178:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003198:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	4939      	ldr	r1, [pc, #228]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d208      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	492e      	ldr	r1, [pc, #184]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d208      	bcs.n	8003206 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4922      	ldr	r1, [pc, #136]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003202:	4313      	orrs	r3, r2
 8003204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800321e:	429a      	cmp	r2, r3
 8003220:	d208      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4917      	ldr	r1, [pc, #92]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003230:	4313      	orrs	r3, r2
 8003232:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003234:	f000 f834 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	4912      	ldr	r1, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x35c>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x358>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <HAL_RCC_ClockConfig+0x35c>)
 800325c:	5cd3      	ldrb	r3, [r2, r3]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x360>)
 800326a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x364>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x368>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f878 	bl	800136c <HAL_InitTick>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	58024400 	.word	0x58024400
 8003290:	08009ad4 	.word	0x08009ad4
 8003294:	24000004 	.word	0x24000004
 8003298:	24000000 	.word	0x24000000
 800329c:	24000008 	.word	0x24000008

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a6:	4bb3      	ldr	r3, [pc, #716]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ae:	2b18      	cmp	r3, #24
 80032b0:	f200 8155 	bhi.w	800355e <HAL_RCC_GetSysClockFreq+0x2be>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	08003321 	.word	0x08003321
 80032c0:	0800355f 	.word	0x0800355f
 80032c4:	0800355f 	.word	0x0800355f
 80032c8:	0800355f 	.word	0x0800355f
 80032cc:	0800355f 	.word	0x0800355f
 80032d0:	0800355f 	.word	0x0800355f
 80032d4:	0800355f 	.word	0x0800355f
 80032d8:	0800355f 	.word	0x0800355f
 80032dc:	08003347 	.word	0x08003347
 80032e0:	0800355f 	.word	0x0800355f
 80032e4:	0800355f 	.word	0x0800355f
 80032e8:	0800355f 	.word	0x0800355f
 80032ec:	0800355f 	.word	0x0800355f
 80032f0:	0800355f 	.word	0x0800355f
 80032f4:	0800355f 	.word	0x0800355f
 80032f8:	0800355f 	.word	0x0800355f
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	0800355f 	.word	0x0800355f
 8003304:	0800355f 	.word	0x0800355f
 8003308:	0800355f 	.word	0x0800355f
 800330c:	0800355f 	.word	0x0800355f
 8003310:	0800355f 	.word	0x0800355f
 8003314:	0800355f 	.word	0x0800355f
 8003318:	0800355f 	.word	0x0800355f
 800331c:	08003353 	.word	0x08003353
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003320:	4b94      	ldr	r3, [pc, #592]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800332c:	4b91      	ldr	r3, [pc, #580]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	4a90      	ldr	r2, [pc, #576]	; (8003578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
 800333c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800333e:	e111      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003340:	4b8d      	ldr	r3, [pc, #564]	; (8003578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003342:	61bb      	str	r3, [r7, #24]
      break;
 8003344:	e10e      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003346:	4b8d      	ldr	r3, [pc, #564]	; (800357c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003348:	61bb      	str	r3, [r7, #24]
      break;
 800334a:	e10b      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800334c:	4b8c      	ldr	r3, [pc, #560]	; (8003580 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800334e:	61bb      	str	r3, [r7, #24]
      break;
 8003350:	e108      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003352:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800335c:	4b85      	ldr	r3, [pc, #532]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003366:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003368:	4b82      	ldr	r3, [pc, #520]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003372:	4b80      	ldr	r3, [pc, #512]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	08db      	lsrs	r3, r3, #3
 8003378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80e1 	beq.w	8003558 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b02      	cmp	r3, #2
 800339a:	f000 8083 	beq.w	80034a4 <HAL_RCC_GetSysClockFreq+0x204>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	f200 80a1 	bhi.w	80034e8 <HAL_RCC_GetSysClockFreq+0x248>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x114>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d056      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033b2:	e099      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b4:	4b6f      	ldr	r3, [pc, #444]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02d      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033c0:	4b6c      	ldr	r3, [pc, #432]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	08db      	lsrs	r3, r3, #3
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	4a6b      	ldr	r2, [pc, #428]	; (8003578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800341a:	e087      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003588 <HAL_RCC_GetSysClockFreq+0x2e8>
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b51      	ldr	r3, [pc, #324]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003442:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800345e:	e065      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800358c <HAL_RCC_GetSysClockFreq+0x2ec>
 800346e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003472:	4b40      	ldr	r3, [pc, #256]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003482:	ed97 6a02 	vldr	s12, [r7, #8]
 8003486:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2e4>
 800348a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034a2:	e043      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003590 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034e6:	e021      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800358c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350a:	ed97 6a02 	vldr	s12, [r7, #8]
 800350e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800352a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	0a5b      	lsrs	r3, r3, #9
 8003532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003536:	3301      	adds	r3, #1
 8003538:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003544:	edd7 6a07 	vldr	s13, [r7, #28]
 8003548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800354c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003550:	ee17 3a90 	vmov	r3, s15
 8003554:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003556:	e005      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
      break;
 800355c:	e002      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003560:	61bb      	str	r3, [r7, #24]
      break;
 8003562:	bf00      	nop
  }

  return sysclockfreq;
 8003564:	69bb      	ldr	r3, [r7, #24]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	58024400 	.word	0x58024400
 8003578:	03d09000 	.word	0x03d09000
 800357c:	003d0900 	.word	0x003d0900
 8003580:	007a1200 	.word	0x007a1200
 8003584:	46000000 	.word	0x46000000
 8003588:	4c742400 	.word	0x4c742400
 800358c:	4a742400 	.word	0x4a742400
 8003590:	4af42400 	.word	0x4af42400

08003594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800359a:	f7ff fe81 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490f      	ldr	r1, [pc, #60]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_RCC_GetHCLKFreq+0x58>)
 80035d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035d2:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <HAL_RCC_GetHCLKFreq+0x58>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	58024400 	.word	0x58024400
 80035e8:	08009ad4 	.word	0x08009ad4
 80035ec:	24000004 	.word	0x24000004
 80035f0:	24000000 	.word	0x24000000

080035f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80035f8:	f7ff ffcc 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4904      	ldr	r1, [pc, #16]	; (800361c <HAL_RCC_GetPCLK1Freq+0x28>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	58024400 	.word	0x58024400
 800361c:	08009ad4 	.word	0x08009ad4

08003620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003624:	f7ff ffb6 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4904      	ldr	r1, [pc, #16]	; (8003648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	58024400 	.word	0x58024400
 8003648:	08009ad4 	.word	0x08009ad4

0800364c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800364c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003650:	b0c8      	sub	sp, #288	; 0x120
 8003652:	af00      	add	r7, sp, #0
 8003654:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003658:	2300      	movs	r3, #0
 800365a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800365e:	2300      	movs	r3, #0
 8003660:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003670:	2500      	movs	r5, #0
 8003672:	ea54 0305 	orrs.w	r3, r4, r5
 8003676:	d049      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003682:	d02f      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003684:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003688:	d828      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800368a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800368e:	d01a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003694:	d822      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800369a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369e:	d007      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036a0:	e01c      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a2:	4ba7      	ldr	r3, [pc, #668]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	4aa6      	ldr	r2, [pc, #664]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ae:	e01a      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b4:	3308      	adds	r3, #8
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fc43 	bl	8004f44 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036c4:	e00f      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ca:	3328      	adds	r3, #40	; 0x28
 80036cc:	2102      	movs	r1, #2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 fcea 	bl	80050a8 <RCCEx_PLL3_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036da:	e004      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036e2:	e000      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036ee:	4b94      	ldr	r3, [pc, #592]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fc:	4a90      	ldr	r2, [pc, #576]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fe:	430b      	orrs	r3, r1
 8003700:	6513      	str	r3, [r2, #80]	; 0x50
 8003702:	e003      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003708:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003718:	f04f 0900 	mov.w	r9, #0
 800371c:	ea58 0309 	orrs.w	r3, r8, r9
 8003720:	d047      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	2b04      	cmp	r3, #4
 800372a:	d82a      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003749 	.word	0x08003749
 8003738:	08003757 	.word	0x08003757
 800373c:	0800376d 	.word	0x0800376d
 8003740:	0800378b 	.word	0x0800378b
 8003744:	0800378b 	.word	0x0800378b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b7d      	ldr	r3, [pc, #500]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a7c      	ldr	r2, [pc, #496]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003754:	e01a      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375a:	3308      	adds	r3, #8
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fbf0 	bl	8004f44 <RCCEx_PLL2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800376a:	e00f      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800376c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003770:	3328      	adds	r3, #40	; 0x28
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f001 fc97 	bl	80050a8 <RCCEx_PLL3_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003780:	e004      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003788:	e000      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800378a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003794:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003798:	f023 0107 	bic.w	r1, r3, #7
 800379c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6513      	str	r3, [r2, #80]	; 0x50
 80037a8:	e003      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80037b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80037be:	f04f 0b00 	mov.w	fp, #0
 80037c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80037c6:	d054      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80037c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037d2:	d036      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80037d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037d8:	d82f      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037de:	d032      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e4:	d829      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037e6:	2bc0      	cmp	r3, #192	; 0xc0
 80037e8:	d02f      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80037ea:	2bc0      	cmp	r3, #192	; 0xc0
 80037ec:	d825      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037ee:	2b80      	cmp	r3, #128	; 0x80
 80037f0:	d018      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d821      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d007      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80037fe:	e01c      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a4e      	ldr	r2, [pc, #312]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800380c:	e01e      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003812:	3308      	adds	r3, #8
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fb94 	bl	8004f44 <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003822:	e013      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003828:	3328      	adds	r3, #40	; 0x28
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fc3b 	bl	80050a8 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003838:	e008      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003840:	e004      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800384a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800384c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003854:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	4a37      	ldr	r2, [pc, #220]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003864:	430b      	orrs	r3, r1
 8003866:	6513      	str	r3, [r2, #80]	; 0x50
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800387e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003888:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800388c:	460b      	mov	r3, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	d05c      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800389c:	d03b      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800389e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038a2:	d834      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a8:	d037      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80038aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ae:	d82e      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038b4:	d033      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038ba:	d828      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d01a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d822      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d0:	d007      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80038d2:	e01c      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80038e0:	e01e      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e6:	3308      	adds	r3, #8
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fb2a 	bl	8004f44 <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80038f6:	e013      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fc:	3328      	adds	r3, #40	; 0x28
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fbd1 	bl	80050a8 <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800390c:	e008      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003914:	e004      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003916:	bf00      	nop
 8003918:	e002      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800391e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003920:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10d      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	4a02      	ldr	r2, [pc, #8]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6513      	str	r3, [r2, #80]	; 0x50
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800393e:	bf00      	nop
 8003940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003948:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d03a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800396c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	2b30      	cmp	r3, #48	; 0x30
 8003974:	d01f      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003976:	2b30      	cmp	r3, #48	; 0x30
 8003978:	d819      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800397a:	2b20      	cmp	r3, #32
 800397c:	d00c      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800397e:	2b20      	cmp	r3, #32
 8003980:	d815      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d019      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003986:	2b10      	cmp	r3, #16
 8003988:	d111      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398a:	4bae      	ldr	r3, [pc, #696]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	4aad      	ldr	r2, [pc, #692]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399c:	3308      	adds	r3, #8
 800399e:	2102      	movs	r1, #2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 facf 	bl	8004f44 <RCCEx_PLL2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039ac:	e006      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039b4:	e002      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80039ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039c4:	4b9f      	ldr	r3, [pc, #636]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4a9c      	ldr	r2, [pc, #624]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d4:	430b      	orrs	r3, r1
 80039d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d8:	e003      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80039ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80039f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4313      	orrs	r3, r2
 8003a00:	d051      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0c:	d035      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a12:	d82e      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a18:	d031      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003a1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a1e:	d828      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d01a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d822      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d007      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003a36:	e01c      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a38:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4a81      	ldr	r2, [pc, #516]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a44:	e01c      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fa78 	bl	8004f44 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a5a:	e011      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a60:	3328      	adds	r3, #40	; 0x28
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 fb1f 	bl	80050a8 <RCCEx_PLL3_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a70:	e006      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a88:	4b6e      	ldr	r3, [pc, #440]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a96:	4a6b      	ldr	r2, [pc, #428]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6513      	str	r3, [r2, #80]	; 0x50
 8003a9c:	e003      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003abc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	d053      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad0:	d033      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad6:	d82c      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ad8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003adc:	d02f      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae2:	d826      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ae4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ae8:	d02b      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003aea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aee:	d820      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af4:	d012      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003afa:	d81a      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d022      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d115      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fa18 	bl	8004f44 <RCCEx_PLL2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b1a:	e015      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b20:	3328      	adds	r3, #40	; 0x28
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fabf 	bl	80050a8 <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b30:	e00a      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b3a:	bf00      	nop
 8003b3c:	e004      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b50:	4b3c      	ldr	r3, [pc, #240]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b5e:	4a39      	ldr	r2, [pc, #228]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6513      	str	r3, [r2, #80]	; 0x50
 8003b64:	e003      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d060      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b96:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003b9a:	d039      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003b9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ba0:	d832      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba6:	d035      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bac:	d82c      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d031      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d826      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bbe:	d02d      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003bc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc4:	d820      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bca:	d012      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd0:	d81a      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d024      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bda:	d115      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be0:	3308      	adds	r3, #8
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 f9ad 	bl	8004f44 <RCCEx_PLL2_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bf0:	e017      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf6:	3328      	adds	r3, #40	; 0x28
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fa54 	bl	80050a8 <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c0e:	e008      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c10:	bf00      	nop
 8003c12:	e006      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c14:	bf00      	nop
 8003c16:	e004      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c18:	bf00      	nop
 8003c1a:	e002      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c3a:	4a02      	ldr	r2, [pc, #8]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c40:	e006      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c42:	bf00      	nop
 8003c44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	d037      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c7a:	d00e      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c80:	d816      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c8a:	d111      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4bc4      	ldr	r3, [pc, #784]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4ac3      	ldr	r2, [pc, #780]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c98:	e00f      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 f94e 	bl	8004f44 <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cc2:	4bb7      	ldr	r3, [pc, #732]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd0:	4ab3      	ldr	r2, [pc, #716]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003cf6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	d039      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d81c      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d21 	.word	0x08003d21
 8003d18:	08003d2f 	.word	0x08003d2f
 8003d1c:	08003d4d 	.word	0x08003d4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b9f      	ldr	r3, [pc, #636]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a9e      	ldr	r2, [pc, #632]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	3308      	adds	r3, #8
 8003d34:	2102      	movs	r1, #2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f904 	bl	8004f44 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d56:	4b92      	ldr	r3, [pc, #584]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	f023 0103 	bic.w	r1, r3, #3
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	4a8e      	ldr	r2, [pc, #568]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f000 8099 	beq.w	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d96:	4b83      	ldr	r3, [pc, #524]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a82      	ldr	r2, [pc, #520]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da2:	f7fd fb2d 	bl	8001400 <HAL_GetTick>
 8003da6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd fb28 	bl	8001400 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d903      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc4:	4b77      	ldr	r3, [pc, #476]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ed      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d173      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dd8:	4b71      	ldr	r3, [pc, #452]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de4:	4053      	eors	r3, r2
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d015      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dee:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dfa:	4b69      	ldr	r3, [pc, #420]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a68      	ldr	r2, [pc, #416]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e06:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a65      	ldr	r2, [pc, #404]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e12:	4a63      	ldr	r2, [pc, #396]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d118      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd faea 	bl	8001400 <HAL_GetTick>
 8003e2c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e30:	e00d      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd fae5 	bl	8001400 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e3c:	1ad2      	subs	r2, r2, r3
 8003e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d903      	bls.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003e4c:	e005      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0eb      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003e5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d129      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e72:	d10e      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003e74:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e84:	091a      	lsrs	r2, r3, #4
 8003e86:	4b48      	ldr	r3, [pc, #288]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	4a45      	ldr	r2, [pc, #276]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6113      	str	r3, [r2, #16]
 8003e90:	e005      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e9c:	6113      	str	r3, [r2, #16]
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ea0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f002 0301 	and.w	r3, r2, #1
 8003ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ede:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f000 8090 	beq.w	800400a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef2:	2b28      	cmp	r3, #40	; 0x28
 8003ef4:	d870      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003ef6:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003fe1 	.word	0x08003fe1
 8003f00:	08003fd9 	.word	0x08003fd9
 8003f04:	08003fd9 	.word	0x08003fd9
 8003f08:	08003fd9 	.word	0x08003fd9
 8003f0c:	08003fd9 	.word	0x08003fd9
 8003f10:	08003fd9 	.word	0x08003fd9
 8003f14:	08003fd9 	.word	0x08003fd9
 8003f18:	08003fd9 	.word	0x08003fd9
 8003f1c:	08003fad 	.word	0x08003fad
 8003f20:	08003fd9 	.word	0x08003fd9
 8003f24:	08003fd9 	.word	0x08003fd9
 8003f28:	08003fd9 	.word	0x08003fd9
 8003f2c:	08003fd9 	.word	0x08003fd9
 8003f30:	08003fd9 	.word	0x08003fd9
 8003f34:	08003fd9 	.word	0x08003fd9
 8003f38:	08003fd9 	.word	0x08003fd9
 8003f3c:	08003fc3 	.word	0x08003fc3
 8003f40:	08003fd9 	.word	0x08003fd9
 8003f44:	08003fd9 	.word	0x08003fd9
 8003f48:	08003fd9 	.word	0x08003fd9
 8003f4c:	08003fd9 	.word	0x08003fd9
 8003f50:	08003fd9 	.word	0x08003fd9
 8003f54:	08003fd9 	.word	0x08003fd9
 8003f58:	08003fd9 	.word	0x08003fd9
 8003f5c:	08003fe1 	.word	0x08003fe1
 8003f60:	08003fd9 	.word	0x08003fd9
 8003f64:	08003fd9 	.word	0x08003fd9
 8003f68:	08003fd9 	.word	0x08003fd9
 8003f6c:	08003fd9 	.word	0x08003fd9
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003fd9 	.word	0x08003fd9
 8003f78:	08003fd9 	.word	0x08003fd9
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003fd9 	.word	0x08003fd9
 8003f8c:	08003fd9 	.word	0x08003fd9
 8003f90:	08003fd9 	.word	0x08003fd9
 8003f94:	08003fd9 	.word	0x08003fd9
 8003f98:	08003fd9 	.word	0x08003fd9
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	58024800 	.word	0x58024800
 8003fa8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 ffc5 	bl	8004f44 <RCCEx_PLL2_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fc0:	e00f      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc6:	3328      	adds	r3, #40	; 0x28
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f86c 	bl	80050a8 <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fea:	4bc0      	ldr	r3, [pc, #768]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffa:	4abc      	ldr	r2, [pc, #752]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6553      	str	r3, [r2, #84]	; 0x54
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004006:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800400a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f002 0302 	and.w	r3, r2, #2
 8004016:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004020:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004024:	460b      	mov	r3, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	d043      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	2b05      	cmp	r3, #5
 8004034:	d824      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	08004089 	.word	0x08004089
 8004040:	08004055 	.word	0x08004055
 8004044:	0800406b 	.word	0x0800406b
 8004048:	08004089 	.word	0x08004089
 800404c:	08004089 	.word	0x08004089
 8004050:	08004089 	.word	0x08004089
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	3308      	adds	r3, #8
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f000 ff71 	bl	8004f44 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004068:	e00f      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406e:	3328      	adds	r3, #40	; 0x28
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f001 f818 	bl	80050a8 <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800407e:	e004      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004092:	4b96      	ldr	r3, [pc, #600]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f023 0107 	bic.w	r1, r3, #7
 800409a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a2:	4a92      	ldr	r2, [pc, #584]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6553      	str	r3, [r2, #84]	; 0x54
 80040a8:	e003      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f002 0304 	and.w	r3, r2, #4
 80040be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4313      	orrs	r3, r2
 80040d0:	d043      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d824      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	08004131 	.word	0x08004131
 80040e8:	080040fd 	.word	0x080040fd
 80040ec:	08004113 	.word	0x08004113
 80040f0:	08004131 	.word	0x08004131
 80040f4:	08004131 	.word	0x08004131
 80040f8:	08004131 	.word	0x08004131
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004100:	3308      	adds	r3, #8
 8004102:	2101      	movs	r1, #1
 8004104:	4618      	mov	r0, r3
 8004106:	f000 ff1d 	bl	8004f44 <RCCEx_PLL2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004116:	3328      	adds	r3, #40	; 0x28
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f000 ffc4 	bl	80050a8 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004126:	e004      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004132:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413a:	4b6c      	ldr	r3, [pc, #432]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	f023 0107 	bic.w	r1, r3, #7
 8004142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414a:	4a68      	ldr	r2, [pc, #416]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6593      	str	r3, [r2, #88]	; 0x58
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004156:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800415a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f002 0320 	and.w	r3, r2, #32
 8004166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d055      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004186:	d033      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800418c:	d82c      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d02f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d826      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800419a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800419e:	d02b      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80041a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a4:	d820      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041aa:	d012      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d81a      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d022      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80041b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ba:	d115      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c0:	3308      	adds	r3, #8
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 febd 	bl	8004f44 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041d0:	e015      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	3328      	adds	r3, #40	; 0x28
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff64 	bl	80050a8 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041e6:	e00a      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041ee:	e006      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041f0:	bf00      	nop
 80041f2:	e004      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041f4:	bf00      	nop
 80041f6:	e002      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004216:	4a35      	ldr	r2, [pc, #212]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004218:	430b      	orrs	r3, r1
 800421a:	6553      	str	r3, [r2, #84]	; 0x54
 800421c:	e003      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004222:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800423c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d058      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800424e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004252:	d033      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004258:	d82c      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d02f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004264:	d826      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426a:	d02b      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800426c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004270:	d820      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d012      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427c:	d81a      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d022      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d115      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428c:	3308      	adds	r3, #8
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fe57 	bl	8004f44 <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800429c:	e015      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a2:	3328      	adds	r3, #40	; 0x28
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fefe 	bl	80050a8 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042b2:	e00a      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042ba:	e006      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042bc:	bf00      	nop
 80042be:	e004      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042c0:	bf00      	nop
 80042c2:	e002      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10e      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042e2:	4a02      	ldr	r2, [pc, #8]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6593      	str	r3, [r2, #88]	; 0x58
 80042e8:	e006      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80042ea:	bf00      	nop
 80042ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800430e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d055      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004320:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004324:	d033      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004326:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800432a:	d82c      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	d02f      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004336:	d826      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004338:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800433c:	d02b      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800433e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004342:	d820      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004348:	d012      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800434a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800434e:	d81a      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d022      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d115      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435e:	3308      	adds	r3, #8
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fdee 	bl	8004f44 <RCCEx_PLL2_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800436e:	e015      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004374:	3328      	adds	r3, #40	; 0x28
 8004376:	2102      	movs	r1, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fe95 	bl	80050a8 <RCCEx_PLL3_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004384:	e00a      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800438c:	e006      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800438e:	bf00      	nop
 8004390:	e004      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800439a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043a4:	4ba1      	ldr	r3, [pc, #644]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043b4:	4a9d      	ldr	r2, [pc, #628]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ba:	e003      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f002 0308 	and.w	r3, r2, #8
 80043d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043de:	460b      	mov	r3, r1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d01e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f6:	3328      	adds	r3, #40	; 0x28
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fe54 	bl	80050a8 <RCCEx_PLL3_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800440c:	4b87      	ldr	r3, [pc, #540]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441c:	4a83      	ldr	r2, [pc, #524]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f002 0310 	and.w	r3, r2, #16
 800442e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004432:	2300      	movs	r3, #0
 8004434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004438:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d01e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004446:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d10c      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	3328      	adds	r3, #40	; 0x28
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fe25 	bl	80050a8 <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446a:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800447a:	4a6c      	ldr	r2, [pc, #432]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800447c:	430b      	orrs	r3, r1
 800447e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800448c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004496:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d03e      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ac:	d022      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80044ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b2:	d81b      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80044be:	e015      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c4:	3308      	adds	r3, #8
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fd3b 	bl	8004f44 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044da:	3328      	adds	r3, #40	; 0x28
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fde2 	bl	80050a8 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044fe:	4b4b      	ldr	r3, [pc, #300]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800450e:	4a47      	ldr	r2, [pc, #284]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6593      	str	r3, [r2, #88]	; 0x58
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800451a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800452a:	67bb      	str	r3, [r7, #120]	; 0x78
 800452c:	2300      	movs	r3, #0
 800452e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004530:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d03b      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004546:	d01f      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004548:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800454c:	d818      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004558:	d007      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800455a:	e011      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455c:	4b33      	ldr	r3, [pc, #204]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	4a32      	ldr	r2, [pc, #200]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004568:	e00f      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800456a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456e:	3328      	adds	r3, #40	; 0x28
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd98 	bl	80050a8 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800457e:	e004      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800459a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	4a22      	ldr	r2, [pc, #136]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6553      	str	r3, [r2, #84]	; 0x54
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045be:	673b      	str	r3, [r7, #112]	; 0x70
 80045c0:	2300      	movs	r3, #0
 80045c2:	677b      	str	r3, [r7, #116]	; 0x74
 80045c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d034      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d007      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4a11      	ldr	r2, [pc, #68]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045ec:	e00e      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f2:	3308      	adds	r3, #8
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fca4 	bl	8004f44 <RCCEx_PLL2_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800460a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800461c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	4a02      	ldr	r2, [pc, #8]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004624:	430b      	orrs	r3, r1
 8004626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800462a:	bf00      	nop
 800462c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004634:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004644:	66bb      	str	r3, [r7, #104]	; 0x68
 8004646:	2300      	movs	r3, #0
 8004648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d00c      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004658:	3328      	adds	r3, #40	; 0x28
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fd23 	bl	80050a8 <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800467a:	663b      	str	r3, [r7, #96]	; 0x60
 800467c:	2300      	movs	r3, #0
 800467e:	667b      	str	r3, [r7, #100]	; 0x64
 8004680:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d038      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800468a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004696:	d018      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469c:	d811      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800469e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a2:	d014      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d80b      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b2:	d106      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b4:	4bc3      	ldr	r3, [pc, #780]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	4ac2      	ldr	r2, [pc, #776]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046c0:	e008      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046c8:	e004      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046dc:	4bb9      	ldr	r3, [pc, #740]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	4ab5      	ldr	r2, [pc, #724]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6553      	str	r3, [r2, #84]	; 0x54
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004708:	65bb      	str	r3, [r7, #88]	; 0x58
 800470a:	2300      	movs	r3, #0
 800470c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800470e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004718:	4baa      	ldr	r3, [pc, #680]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004726:	4aa7      	ldr	r2, [pc, #668]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004728:	430b      	orrs	r3, r1
 800472a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800472c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004738:	653b      	str	r3, [r7, #80]	; 0x50
 800473a:	2300      	movs	r3, #0
 800473c:	657b      	str	r3, [r7, #84]	; 0x54
 800473e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004742:	460b      	mov	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004748:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800474a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a9b      	ldr	r2, [pc, #620]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004758:	430b      	orrs	r3, r1
 800475a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800475c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004768:	64bb      	str	r3, [r7, #72]	; 0x48
 800476a:	2300      	movs	r3, #0
 800476c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004778:	4b92      	ldr	r3, [pc, #584]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004786:	4a8f      	ldr	r2, [pc, #572]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800478c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004798:	643b      	str	r3, [r7, #64]	; 0x40
 800479a:	2300      	movs	r3, #0
 800479c:	647b      	str	r3, [r7, #68]	; 0x44
 800479e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047a8:	4b86      	ldr	r3, [pc, #536]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	4a85      	ldr	r2, [pc, #532]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047b2:	6113      	str	r3, [r2, #16]
 80047b4:	4b83      	ldr	r3, [pc, #524]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047b6:	6919      	ldr	r1, [r3, #16]
 80047b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047c0:	4a80      	ldr	r2, [pc, #512]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047c2:	430b      	orrs	r3, r1
 80047c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80047d4:	2300      	movs	r3, #0
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047e2:	4b78      	ldr	r3, [pc, #480]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	4a74      	ldr	r2, [pc, #464]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
 8004804:	2300      	movs	r3, #0
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
 8004808:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004812:	4b6c      	ldr	r3, [pc, #432]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800481a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004822:	4a68      	ldr	r2, [pc, #416]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004824:	430b      	orrs	r3, r1
 8004826:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	2100      	movs	r1, #0
 8004832:	62b9      	str	r1, [r7, #40]	; 0x28
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	d011      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004848:	3308      	adds	r3, #8
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fb79 	bl	8004f44 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004864:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	2100      	movs	r1, #0
 8004872:	6239      	str	r1, [r7, #32]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d011      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	3308      	adds	r3, #8
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fb59 	bl	8004f44 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	2100      	movs	r1, #0
 80048b2:	61b9      	str	r1, [r7, #24]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d011      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c8:	3308      	adds	r3, #8
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fb39 	bl	8004f44 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80048d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	2100      	movs	r1, #0
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d011      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004908:	3328      	adds	r3, #40	; 0x28
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fbcb 	bl	80050a8 <RCCEx_PLL3_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004924:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	2100      	movs	r1, #0
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d011      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	3328      	adds	r3, #40	; 0x28
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fbab 	bl	80050a8 <RCCEx_PLL3_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004964:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	2100      	movs	r1, #0
 8004972:	6039      	str	r1, [r7, #0]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d011      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	3328      	adds	r3, #40	; 0x28
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fb8b 	bl	80050a8 <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80049a8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80049bc:	46bd      	mov	sp, r7
 80049be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c2:	bf00      	nop
 80049c4:	58024400 	.word	0x58024400

080049c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80049cc:	f7fe fde2 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4904      	ldr	r1, [pc, #16]	; (80049f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	58024400 	.word	0x58024400
 80049f0:	08009ad4 	.word	0x08009ad4

080049f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049fc:	4ba1      	ldr	r3, [pc, #644]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a06:	4b9f      	ldr	r3, [pc, #636]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	0b1b      	lsrs	r3, r3, #12
 8004a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a12:	4b9c      	ldr	r3, [pc, #624]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a1e:	4b99      	ldr	r3, [pc, #612]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	08db      	lsrs	r3, r3, #3
 8004a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8111 	beq.w	8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	f000 8083 	beq.w	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	f200 80a1 	bhi.w	8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d056      	beq.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a5e:	e099      	b.n	8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a60:	4b88      	ldr	r3, [pc, #544]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02d      	beq.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a6c:	4b85      	ldr	r3, [pc, #532]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	08db      	lsrs	r3, r3, #3
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	4a84      	ldr	r2, [pc, #528]	; (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b7b      	ldr	r3, [pc, #492]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ac6:	e087      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0a:	e065      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4e:	e043      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b62:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b92:	e021      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	0a5b      	lsrs	r3, r3, #9
 8004bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfe:	ee17 2a90 	vmov	r2, s15
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c06:	4b1f      	ldr	r3, [pc, #124]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	ee07 3a90 	vmov	s15, r3
 8004c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2c:	ee17 2a90 	vmov	r2, s15
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	0e1b      	lsrs	r3, r3, #24
 8004c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5a:	ee17 2a90 	vmov	r2, s15
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
}
 8004c76:	bf00      	nop
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
 8004c88:	03d09000 	.word	0x03d09000
 8004c8c:	46000000 	.word	0x46000000
 8004c90:	4c742400 	.word	0x4c742400
 8004c94:	4a742400 	.word	0x4a742400
 8004c98:	4af42400 	.word	0x4af42400

08004c9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	; 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca4:	4ba1      	ldr	r3, [pc, #644]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cae:	4b9f      	ldr	r3, [pc, #636]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	0d1b      	lsrs	r3, r3, #20
 8004cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cba:	4b9c      	ldr	r3, [pc, #624]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cc6:	4b99      	ldr	r3, [pc, #612]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8111 	beq.w	8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f000 8083 	beq.w	8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	f200 80a1 	bhi.w	8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d056      	beq.n	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d06:	e099      	b.n	8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d08:	4b88      	ldr	r3, [pc, #544]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d02d      	beq.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d14:	4b85      	ldr	r3, [pc, #532]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	4a84      	ldr	r2, [pc, #528]	; (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b7b      	ldr	r3, [pc, #492]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d6e:	e087      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d82:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db2:	e065      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b59      	ldr	r3, [pc, #356]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df6:	e043      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3a:	e021      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e80:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	0a5b      	lsrs	r3, r3, #9
 8004e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea6:	ee17 2a90 	vmov	r2, s15
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed4:	ee17 2a90 	vmov	r2, s15
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	0e1b      	lsrs	r3, r3, #24
 8004ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f02:	ee17 2a90 	vmov	r2, s15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f0a:	e008      	b.n	8004f1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	3724      	adds	r7, #36	; 0x24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	03d09000 	.word	0x03d09000
 8004f34:	46000000 	.word	0x46000000
 8004f38:	4c742400 	.word	0x4c742400
 8004f3c:	4a742400 	.word	0x4a742400
 8004f40:	4af42400 	.word	0x4af42400

08004f44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f52:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d101      	bne.n	8004f62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e099      	b.n	8005096 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f62:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a4e      	ldr	r2, [pc, #312]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6e:	f7fc fa47 	bl	8001400 <HAL_GetTick>
 8004f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f74:	e008      	b.n	8004f88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f76:	f7fc fa43 	bl	8001400 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e086      	b.n	8005096 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f88:	4b45      	ldr	r3, [pc, #276]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f94:	4b42      	ldr	r3, [pc, #264]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	493f      	ldr	r1, [pc, #252]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	025b      	lsls	r3, r3, #9
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fd8:	4931      	ldr	r1, [pc, #196]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fde:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	492d      	ldr	r1, [pc, #180]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	f023 0220 	bic.w	r2, r3, #32
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4928      	ldr	r1, [pc, #160]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005002:	4b27      	ldr	r3, [pc, #156]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005008:	f023 0310 	bic.w	r3, r3, #16
 800500c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <RCCEx_PLL2_Config+0x160>)
 8005014:	4013      	ands	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	69d2      	ldr	r2, [r2, #28]
 800501a:	00d2      	lsls	r2, r2, #3
 800501c:	4920      	ldr	r1, [pc, #128]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005022:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005028:	f043 0310 	orr.w	r3, r3, #16
 800502c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005034:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800503a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800503e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005040:	e00f      	b.n	8005062 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800504e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005054:	e005      	b.n	8005062 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800505c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800506c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506e:	f7fc f9c7 	bl	8001400 <HAL_GetTick>
 8005072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005074:	e008      	b.n	8005088 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005076:	f7fc f9c3 	bl	8001400 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e006      	b.n	8005096 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	58024400 	.word	0x58024400
 80050a4:	ffff0007 	.word	0xffff0007

080050a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b6:	4b53      	ldr	r3, [pc, #332]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d101      	bne.n	80050c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e099      	b.n	80051fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050c6:	4b4f      	ldr	r3, [pc, #316]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a4e      	ldr	r2, [pc, #312]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d2:	f7fc f995 	bl	8001400 <HAL_GetTick>
 80050d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050d8:	e008      	b.n	80050ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050da:	f7fc f991 	bl	8001400 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e086      	b.n	80051fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050ec:	4b45      	ldr	r3, [pc, #276]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f0      	bne.n	80050da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	493f      	ldr	r1, [pc, #252]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	628b      	str	r3, [r1, #40]	; 0x28
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	3b01      	subs	r3, #1
 8005112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	3b01      	subs	r3, #1
 800511c:	025b      	lsls	r3, r3, #9
 800511e:	b29b      	uxth	r3, r3
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	3b01      	subs	r3, #1
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	3b01      	subs	r3, #1
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800513c:	4931      	ldr	r1, [pc, #196]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005142:	4b30      	ldr	r3, [pc, #192]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	492d      	ldr	r1, [pc, #180]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005154:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	4928      	ldr	r1, [pc, #160]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005166:	4b27      	ldr	r3, [pc, #156]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	4a26      	ldr	r2, [pc, #152]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800516c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <RCCEx_PLL3_Config+0x160>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	69d2      	ldr	r2, [r2, #28]
 800517e:	00d2      	lsls	r2, r2, #3
 8005180:	4920      	ldr	r1, [pc, #128]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005186:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800519e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051a4:	e00f      	b.n	80051c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d106      	bne.n	80051ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051ac:	4b15      	ldr	r3, [pc, #84]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051b8:	e005      	b.n	80051c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	4a11      	ldr	r2, [pc, #68]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d2:	f7fc f915 	bl	8001400 <HAL_GetTick>
 80051d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051d8:	e008      	b.n	80051ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051da:	f7fc f911 	bl	8001400 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e006      	b.n	80051fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	58024400 	.word	0x58024400
 8005208:	ffff0007 	.word	0xffff0007

0800520c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e049      	b.n	80052b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb ff4e 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f000 f9f6 	bl	800563c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e054      	b.n	800537e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a26      	ldr	r2, [pc, #152]	; (800538c <HAL_TIM_Base_Start_IT+0xd0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d01d      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a22      	ldr	r2, [pc, #136]	; (8005390 <HAL_TIM_Base_Start_IT+0xd4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <HAL_TIM_Base_Start_IT+0xd8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1f      	ldr	r2, [pc, #124]	; (8005398 <HAL_TIM_Base_Start_IT+0xdc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1e      	ldr	r2, [pc, #120]	; (800539c <HAL_TIM_Base_Start_IT+0xe0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d115      	bne.n	8005368 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <HAL_TIM_Base_Start_IT+0xec>)
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b06      	cmp	r3, #6
 800534c:	d015      	beq.n	800537a <HAL_TIM_Base_Start_IT+0xbe>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d011      	beq.n	800537a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005366:	e008      	b.n	800537a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e000      	b.n	800537c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40010400 	.word	0x40010400
 80053a0:	40001800 	.word	0x40001800
 80053a4:	40014000 	.word	0x40014000
 80053a8:	00010007 	.word	0x00010007

080053ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0202 	mvn.w	r2, #2
 80053d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f905 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8f7 	bl	80055ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f908 	bl	8005612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0204 	mvn.w	r2, #4
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f8db 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8cd 	bl	80055ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8de 	bl	8005612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b08      	cmp	r3, #8
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0208 	mvn.w	r2, #8
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2204      	movs	r2, #4
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8b1 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f8a3 	bl	80055ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f8b4 	bl	8005612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0210 	mvn.w	r2, #16
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2208      	movs	r2, #8
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f887 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f879 	bl	80055ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f88a 	bl	8005612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0201 	mvn.w	r2, #1
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb fbf4 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9a2 	bl	80058a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d10e      	bne.n	800558a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b80      	cmp	r3, #128	; 0x80
 8005578:	d107      	bne.n	800558a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f995 	bl	80058b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f838 	bl	8005626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d10e      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d107      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f06f 0220 	mvn.w	r2, #32
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f955 	bl	800588c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a40      	ldr	r2, [pc, #256]	; (8005750 <TIM_Base_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565a:	d00f      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3d      	ldr	r2, [pc, #244]	; (8005754 <TIM_Base_SetConfig+0x118>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00b      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3c      	ldr	r2, [pc, #240]	; (8005758 <TIM_Base_SetConfig+0x11c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3b      	ldr	r2, [pc, #236]	; (800575c <TIM_Base_SetConfig+0x120>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3a      	ldr	r2, [pc, #232]	; (8005760 <TIM_Base_SetConfig+0x124>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d108      	bne.n	800568e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2f      	ldr	r2, [pc, #188]	; (8005750 <TIM_Base_SetConfig+0x114>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01f      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d01b      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <TIM_Base_SetConfig+0x118>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d017      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2b      	ldr	r2, [pc, #172]	; (8005758 <TIM_Base_SetConfig+0x11c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2a      	ldr	r2, [pc, #168]	; (800575c <TIM_Base_SetConfig+0x120>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a29      	ldr	r2, [pc, #164]	; (8005760 <TIM_Base_SetConfig+0x124>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a28      	ldr	r2, [pc, #160]	; (8005764 <TIM_Base_SetConfig+0x128>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a27      	ldr	r2, [pc, #156]	; (8005768 <TIM_Base_SetConfig+0x12c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_Base_SetConfig+0x9a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a26      	ldr	r2, [pc, #152]	; (800576c <TIM_Base_SetConfig+0x130>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d108      	bne.n	80056e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a10      	ldr	r2, [pc, #64]	; (8005750 <TIM_Base_SetConfig+0x114>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0xf8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a12      	ldr	r2, [pc, #72]	; (8005760 <TIM_Base_SetConfig+0x124>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0xf8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a11      	ldr	r2, [pc, #68]	; (8005764 <TIM_Base_SetConfig+0x128>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0xf8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a10      	ldr	r2, [pc, #64]	; (8005768 <TIM_Base_SetConfig+0x12c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0xf8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a0f      	ldr	r2, [pc, #60]	; (800576c <TIM_Base_SetConfig+0x130>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d103      	bne.n	800573c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	615a      	str	r2, [r3, #20]
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40010400 	.word	0x40010400
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800

08005770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005784:	2302      	movs	r3, #2
 8005786:	e06d      	b.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a30      	ldr	r2, [pc, #192]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d108      	bne.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a20      	ldr	r2, [pc, #128]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d022      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fa:	d01d      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d018      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1c      	ldr	r2, [pc, #112]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a15      	ldr	r2, [pc, #84]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a15      	ldr	r2, [pc, #84]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d10c      	bne.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	4313      	orrs	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40001800 	.word	0x40001800
 8005888:	40014000 	.word	0x40014000

0800588c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e042      	b.n	8005960 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fb fc65 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2224      	movs	r2, #36	; 0x24
 80058f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8ba 	bl	8005a84 <UART_SetConfig>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e022      	b.n	8005960 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ff1a 	bl	800675c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 ffa1 	bl	80068a0 <UART_CheckIdleState>
 800595e:	4603      	mov	r3, r0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	2b20      	cmp	r3, #32
 8005980:	d17b      	bne.n	8005a7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_UART_Transmit+0x26>
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e074      	b.n	8005a7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2221      	movs	r2, #33	; 0x21
 800599e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059a2:	f7fb fd2d 	bl	8001400 <HAL_GetTick>
 80059a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	88fa      	ldrh	r2, [r7, #6]
 80059b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c0:	d108      	bne.n	80059d4 <HAL_UART_Transmit+0x6c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	e003      	b.n	80059dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059dc:	e030      	b.n	8005a40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	2180      	movs	r1, #128	; 0x80
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f001 f803 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e03d      	b.n	8005a7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	3302      	adds	r3, #2
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	e007      	b.n	8005a2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1c8      	bne.n	80059de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2200      	movs	r2, #0
 8005a54:	2140      	movs	r1, #64	; 0x40
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 ffcc 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e006      	b.n	8005a7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e000      	b.n	8005a7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a88:	b092      	sub	sp, #72	; 0x48
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4bbe      	ldr	r3, [pc, #760]	; (8005dac <UART_SetConfig+0x328>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4ab3      	ldr	r2, [pc, #716]	; (8005db0 <UART_SetConfig+0x32c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aec:	4313      	orrs	r3, r2
 8005aee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	4baf      	ldr	r3, [pc, #700]	; (8005db4 <UART_SetConfig+0x330>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	f023 010f 	bic.w	r1, r3, #15
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4aa6      	ldr	r2, [pc, #664]	; (8005db8 <UART_SetConfig+0x334>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d177      	bne.n	8005c14 <UART_SetConfig+0x190>
 8005b24:	4ba5      	ldr	r3, [pc, #660]	; (8005dbc <UART_SetConfig+0x338>)
 8005b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b2c:	2b28      	cmp	r3, #40	; 0x28
 8005b2e:	d86d      	bhi.n	8005c0c <UART_SetConfig+0x188>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0xb4>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005bdd 	.word	0x08005bdd
 8005b3c:	08005c0d 	.word	0x08005c0d
 8005b40:	08005c0d 	.word	0x08005c0d
 8005b44:	08005c0d 	.word	0x08005c0d
 8005b48:	08005c0d 	.word	0x08005c0d
 8005b4c:	08005c0d 	.word	0x08005c0d
 8005b50:	08005c0d 	.word	0x08005c0d
 8005b54:	08005c0d 	.word	0x08005c0d
 8005b58:	08005be5 	.word	0x08005be5
 8005b5c:	08005c0d 	.word	0x08005c0d
 8005b60:	08005c0d 	.word	0x08005c0d
 8005b64:	08005c0d 	.word	0x08005c0d
 8005b68:	08005c0d 	.word	0x08005c0d
 8005b6c:	08005c0d 	.word	0x08005c0d
 8005b70:	08005c0d 	.word	0x08005c0d
 8005b74:	08005c0d 	.word	0x08005c0d
 8005b78:	08005bed 	.word	0x08005bed
 8005b7c:	08005c0d 	.word	0x08005c0d
 8005b80:	08005c0d 	.word	0x08005c0d
 8005b84:	08005c0d 	.word	0x08005c0d
 8005b88:	08005c0d 	.word	0x08005c0d
 8005b8c:	08005c0d 	.word	0x08005c0d
 8005b90:	08005c0d 	.word	0x08005c0d
 8005b94:	08005c0d 	.word	0x08005c0d
 8005b98:	08005bf5 	.word	0x08005bf5
 8005b9c:	08005c0d 	.word	0x08005c0d
 8005ba0:	08005c0d 	.word	0x08005c0d
 8005ba4:	08005c0d 	.word	0x08005c0d
 8005ba8:	08005c0d 	.word	0x08005c0d
 8005bac:	08005c0d 	.word	0x08005c0d
 8005bb0:	08005c0d 	.word	0x08005c0d
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005bfd 	.word	0x08005bfd
 8005bbc:	08005c0d 	.word	0x08005c0d
 8005bc0:	08005c0d 	.word	0x08005c0d
 8005bc4:	08005c0d 	.word	0x08005c0d
 8005bc8:	08005c0d 	.word	0x08005c0d
 8005bcc:	08005c0d 	.word	0x08005c0d
 8005bd0:	08005c0d 	.word	0x08005c0d
 8005bd4:	08005c0d 	.word	0x08005c0d
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be2:	e326      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e322      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e31e      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e31a      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e316      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e312      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e30e      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a69      	ldr	r2, [pc, #420]	; (8005dc0 <UART_SetConfig+0x33c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d130      	bne.n	8005c80 <UART_SetConfig+0x1fc>
 8005c1e:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <UART_SetConfig+0x338>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d826      	bhi.n	8005c78 <UART_SetConfig+0x1f4>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x1ac>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c49 	.word	0x08005c49
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	08005c59 	.word	0x08005c59
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c71 	.word	0x08005c71
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4e:	e2f0      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e2ec      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e2e8      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e2e4      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c68:	2320      	movs	r3, #32
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e2e0      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c70:	2340      	movs	r3, #64	; 0x40
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e2dc      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e2d8      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a4f      	ldr	r2, [pc, #316]	; (8005dc4 <UART_SetConfig+0x340>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d130      	bne.n	8005cec <UART_SetConfig+0x268>
 8005c8a:	4b4c      	ldr	r3, [pc, #304]	; (8005dbc <UART_SetConfig+0x338>)
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d826      	bhi.n	8005ce4 <UART_SetConfig+0x260>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x218>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cb5 	.word	0x08005cb5
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	08005cc5 	.word	0x08005cc5
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005cdd 	.word	0x08005cdd
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e2ba      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e2b6      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e2b2      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e2ae      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e2aa      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005cdc:	2340      	movs	r3, #64	; 0x40
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e2a6      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e2a2      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a35      	ldr	r2, [pc, #212]	; (8005dc8 <UART_SetConfig+0x344>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d130      	bne.n	8005d58 <UART_SetConfig+0x2d4>
 8005cf6:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <UART_SetConfig+0x338>)
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d826      	bhi.n	8005d50 <UART_SetConfig+0x2cc>
 8005d02:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x284>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d21 	.word	0x08005d21
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	08005d31 	.word	0x08005d31
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	2300      	movs	r3, #0
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e284      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e280      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d30:	2308      	movs	r3, #8
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e27c      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e278      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d40:	2320      	movs	r3, #32
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e274      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e270      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e26c      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1b      	ldr	r2, [pc, #108]	; (8005dcc <UART_SetConfig+0x348>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d142      	bne.n	8005de8 <UART_SetConfig+0x364>
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <UART_SetConfig+0x338>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d838      	bhi.n	8005de0 <UART_SetConfig+0x35c>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x2f0>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d8d 	.word	0x08005d8d
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dd1 	.word	0x08005dd1
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e24e      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e24a      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e246      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e242      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005dac:	cfff69f3 	.word	0xcfff69f3
 8005db0:	58000c00 	.word	0x58000c00
 8005db4:	11fff4ff 	.word	0x11fff4ff
 8005db8:	40011000 	.word	0x40011000
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	40004400 	.word	0x40004400
 8005dc4:	40004800 	.word	0x40004800
 8005dc8:	40004c00 	.word	0x40004c00
 8005dcc:	40005000 	.word	0x40005000
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e22c      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005dd8:	2340      	movs	r3, #64	; 0x40
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e228      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e224      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4ab1      	ldr	r2, [pc, #708]	; (80060b4 <UART_SetConfig+0x630>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d176      	bne.n	8005ee0 <UART_SetConfig+0x45c>
 8005df2:	4bb1      	ldr	r3, [pc, #708]	; (80060b8 <UART_SetConfig+0x634>)
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfa:	2b28      	cmp	r3, #40	; 0x28
 8005dfc:	d86c      	bhi.n	8005ed8 <UART_SetConfig+0x454>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x380>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005ea9 	.word	0x08005ea9
 8005e08:	08005ed9 	.word	0x08005ed9
 8005e0c:	08005ed9 	.word	0x08005ed9
 8005e10:	08005ed9 	.word	0x08005ed9
 8005e14:	08005ed9 	.word	0x08005ed9
 8005e18:	08005ed9 	.word	0x08005ed9
 8005e1c:	08005ed9 	.word	0x08005ed9
 8005e20:	08005ed9 	.word	0x08005ed9
 8005e24:	08005eb1 	.word	0x08005eb1
 8005e28:	08005ed9 	.word	0x08005ed9
 8005e2c:	08005ed9 	.word	0x08005ed9
 8005e30:	08005ed9 	.word	0x08005ed9
 8005e34:	08005ed9 	.word	0x08005ed9
 8005e38:	08005ed9 	.word	0x08005ed9
 8005e3c:	08005ed9 	.word	0x08005ed9
 8005e40:	08005ed9 	.word	0x08005ed9
 8005e44:	08005eb9 	.word	0x08005eb9
 8005e48:	08005ed9 	.word	0x08005ed9
 8005e4c:	08005ed9 	.word	0x08005ed9
 8005e50:	08005ed9 	.word	0x08005ed9
 8005e54:	08005ed9 	.word	0x08005ed9
 8005e58:	08005ed9 	.word	0x08005ed9
 8005e5c:	08005ed9 	.word	0x08005ed9
 8005e60:	08005ed9 	.word	0x08005ed9
 8005e64:	08005ec1 	.word	0x08005ec1
 8005e68:	08005ed9 	.word	0x08005ed9
 8005e6c:	08005ed9 	.word	0x08005ed9
 8005e70:	08005ed9 	.word	0x08005ed9
 8005e74:	08005ed9 	.word	0x08005ed9
 8005e78:	08005ed9 	.word	0x08005ed9
 8005e7c:	08005ed9 	.word	0x08005ed9
 8005e80:	08005ed9 	.word	0x08005ed9
 8005e84:	08005ec9 	.word	0x08005ec9
 8005e88:	08005ed9 	.word	0x08005ed9
 8005e8c:	08005ed9 	.word	0x08005ed9
 8005e90:	08005ed9 	.word	0x08005ed9
 8005e94:	08005ed9 	.word	0x08005ed9
 8005e98:	08005ed9 	.word	0x08005ed9
 8005e9c:	08005ed9 	.word	0x08005ed9
 8005ea0:	08005ed9 	.word	0x08005ed9
 8005ea4:	08005ed1 	.word	0x08005ed1
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e1c0      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e1bc      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ebe:	e1b8      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e1b4      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005ec8:	2320      	movs	r3, #32
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ece:	e1b0      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e1ac      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e1a8      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a75      	ldr	r2, [pc, #468]	; (80060bc <UART_SetConfig+0x638>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d130      	bne.n	8005f4c <UART_SetConfig+0x4c8>
 8005eea:	4b73      	ldr	r3, [pc, #460]	; (80060b8 <UART_SetConfig+0x634>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d826      	bhi.n	8005f44 <UART_SetConfig+0x4c0>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x478>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f15 	.word	0x08005f15
 8005f00:	08005f1d 	.word	0x08005f1d
 8005f04:	08005f25 	.word	0x08005f25
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f3d 	.word	0x08005f3d
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e18a      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e186      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f24:	2308      	movs	r3, #8
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e182      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e17e      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f34:	2320      	movs	r3, #32
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e17a      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f3c:	2340      	movs	r3, #64	; 0x40
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e176      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e172      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a5b      	ldr	r2, [pc, #364]	; (80060c0 <UART_SetConfig+0x63c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d130      	bne.n	8005fb8 <UART_SetConfig+0x534>
 8005f56:	4b58      	ldr	r3, [pc, #352]	; (80060b8 <UART_SetConfig+0x634>)
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	d826      	bhi.n	8005fb0 <UART_SetConfig+0x52c>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0x4e4>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005f81 	.word	0x08005f81
 8005f6c:	08005f89 	.word	0x08005f89
 8005f70:	08005f91 	.word	0x08005f91
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fa9 	.word	0x08005fa9
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e154      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e150      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f90:	2308      	movs	r3, #8
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e14c      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e148      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e144      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005fa8:	2340      	movs	r3, #64	; 0x40
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e140      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005fb0:	2380      	movs	r3, #128	; 0x80
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e13c      	b.n	8006232 <UART_SetConfig+0x7ae>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a41      	ldr	r2, [pc, #260]	; (80060c4 <UART_SetConfig+0x640>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f040 8082 	bne.w	80060c8 <UART_SetConfig+0x644>
 8005fc4:	4b3c      	ldr	r3, [pc, #240]	; (80060b8 <UART_SetConfig+0x634>)
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fcc:	2b28      	cmp	r3, #40	; 0x28
 8005fce:	d86d      	bhi.n	80060ac <UART_SetConfig+0x628>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <UART_SetConfig+0x554>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	0800607d 	.word	0x0800607d
 8005fdc:	080060ad 	.word	0x080060ad
 8005fe0:	080060ad 	.word	0x080060ad
 8005fe4:	080060ad 	.word	0x080060ad
 8005fe8:	080060ad 	.word	0x080060ad
 8005fec:	080060ad 	.word	0x080060ad
 8005ff0:	080060ad 	.word	0x080060ad
 8005ff4:	080060ad 	.word	0x080060ad
 8005ff8:	08006085 	.word	0x08006085
 8005ffc:	080060ad 	.word	0x080060ad
 8006000:	080060ad 	.word	0x080060ad
 8006004:	080060ad 	.word	0x080060ad
 8006008:	080060ad 	.word	0x080060ad
 800600c:	080060ad 	.word	0x080060ad
 8006010:	080060ad 	.word	0x080060ad
 8006014:	080060ad 	.word	0x080060ad
 8006018:	0800608d 	.word	0x0800608d
 800601c:	080060ad 	.word	0x080060ad
 8006020:	080060ad 	.word	0x080060ad
 8006024:	080060ad 	.word	0x080060ad
 8006028:	080060ad 	.word	0x080060ad
 800602c:	080060ad 	.word	0x080060ad
 8006030:	080060ad 	.word	0x080060ad
 8006034:	080060ad 	.word	0x080060ad
 8006038:	08006095 	.word	0x08006095
 800603c:	080060ad 	.word	0x080060ad
 8006040:	080060ad 	.word	0x080060ad
 8006044:	080060ad 	.word	0x080060ad
 8006048:	080060ad 	.word	0x080060ad
 800604c:	080060ad 	.word	0x080060ad
 8006050:	080060ad 	.word	0x080060ad
 8006054:	080060ad 	.word	0x080060ad
 8006058:	0800609d 	.word	0x0800609d
 800605c:	080060ad 	.word	0x080060ad
 8006060:	080060ad 	.word	0x080060ad
 8006064:	080060ad 	.word	0x080060ad
 8006068:	080060ad 	.word	0x080060ad
 800606c:	080060ad 	.word	0x080060ad
 8006070:	080060ad 	.word	0x080060ad
 8006074:	080060ad 	.word	0x080060ad
 8006078:	080060a5 	.word	0x080060a5
 800607c:	2301      	movs	r3, #1
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e0d6      	b.n	8006232 <UART_SetConfig+0x7ae>
 8006084:	2304      	movs	r3, #4
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e0d2      	b.n	8006232 <UART_SetConfig+0x7ae>
 800608c:	2308      	movs	r3, #8
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e0ce      	b.n	8006232 <UART_SetConfig+0x7ae>
 8006094:	2310      	movs	r3, #16
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e0ca      	b.n	8006232 <UART_SetConfig+0x7ae>
 800609c:	2320      	movs	r3, #32
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e0c6      	b.n	8006232 <UART_SetConfig+0x7ae>
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e0c2      	b.n	8006232 <UART_SetConfig+0x7ae>
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e0be      	b.n	8006232 <UART_SetConfig+0x7ae>
 80060b4:	40011400 	.word	0x40011400
 80060b8:	58024400 	.word	0x58024400
 80060bc:	40007800 	.word	0x40007800
 80060c0:	40007c00 	.word	0x40007c00
 80060c4:	40011800 	.word	0x40011800
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4aad      	ldr	r2, [pc, #692]	; (8006384 <UART_SetConfig+0x900>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d176      	bne.n	80061c0 <UART_SetConfig+0x73c>
 80060d2:	4bad      	ldr	r3, [pc, #692]	; (8006388 <UART_SetConfig+0x904>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060da:	2b28      	cmp	r3, #40	; 0x28
 80060dc:	d86c      	bhi.n	80061b8 <UART_SetConfig+0x734>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x660>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006189 	.word	0x08006189
 80060e8:	080061b9 	.word	0x080061b9
 80060ec:	080061b9 	.word	0x080061b9
 80060f0:	080061b9 	.word	0x080061b9
 80060f4:	080061b9 	.word	0x080061b9
 80060f8:	080061b9 	.word	0x080061b9
 80060fc:	080061b9 	.word	0x080061b9
 8006100:	080061b9 	.word	0x080061b9
 8006104:	08006191 	.word	0x08006191
 8006108:	080061b9 	.word	0x080061b9
 800610c:	080061b9 	.word	0x080061b9
 8006110:	080061b9 	.word	0x080061b9
 8006114:	080061b9 	.word	0x080061b9
 8006118:	080061b9 	.word	0x080061b9
 800611c:	080061b9 	.word	0x080061b9
 8006120:	080061b9 	.word	0x080061b9
 8006124:	08006199 	.word	0x08006199
 8006128:	080061b9 	.word	0x080061b9
 800612c:	080061b9 	.word	0x080061b9
 8006130:	080061b9 	.word	0x080061b9
 8006134:	080061b9 	.word	0x080061b9
 8006138:	080061b9 	.word	0x080061b9
 800613c:	080061b9 	.word	0x080061b9
 8006140:	080061b9 	.word	0x080061b9
 8006144:	080061a1 	.word	0x080061a1
 8006148:	080061b9 	.word	0x080061b9
 800614c:	080061b9 	.word	0x080061b9
 8006150:	080061b9 	.word	0x080061b9
 8006154:	080061b9 	.word	0x080061b9
 8006158:	080061b9 	.word	0x080061b9
 800615c:	080061b9 	.word	0x080061b9
 8006160:	080061b9 	.word	0x080061b9
 8006164:	080061a9 	.word	0x080061a9
 8006168:	080061b9 	.word	0x080061b9
 800616c:	080061b9 	.word	0x080061b9
 8006170:	080061b9 	.word	0x080061b9
 8006174:	080061b9 	.word	0x080061b9
 8006178:	080061b9 	.word	0x080061b9
 800617c:	080061b9 	.word	0x080061b9
 8006180:	080061b9 	.word	0x080061b9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e050      	b.n	8006232 <UART_SetConfig+0x7ae>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e04c      	b.n	8006232 <UART_SetConfig+0x7ae>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e048      	b.n	8006232 <UART_SetConfig+0x7ae>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e044      	b.n	8006232 <UART_SetConfig+0x7ae>
 80061a8:	2320      	movs	r3, #32
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e040      	b.n	8006232 <UART_SetConfig+0x7ae>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b6:	e03c      	b.n	8006232 <UART_SetConfig+0x7ae>
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e038      	b.n	8006232 <UART_SetConfig+0x7ae>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a71      	ldr	r2, [pc, #452]	; (800638c <UART_SetConfig+0x908>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d130      	bne.n	800622c <UART_SetConfig+0x7a8>
 80061ca:	4b6f      	ldr	r3, [pc, #444]	; (8006388 <UART_SetConfig+0x904>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d826      	bhi.n	8006224 <UART_SetConfig+0x7a0>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x758>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	080061f5 	.word	0x080061f5
 80061e0:	080061fd 	.word	0x080061fd
 80061e4:	08006205 	.word	0x08006205
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	2302      	movs	r3, #2
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e01a      	b.n	8006232 <UART_SetConfig+0x7ae>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e016      	b.n	8006232 <UART_SetConfig+0x7ae>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e012      	b.n	8006232 <UART_SetConfig+0x7ae>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e00e      	b.n	8006232 <UART_SetConfig+0x7ae>
 8006214:	2320      	movs	r3, #32
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e00a      	b.n	8006232 <UART_SetConfig+0x7ae>
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e006      	b.n	8006232 <UART_SetConfig+0x7ae>
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e002      	b.n	8006232 <UART_SetConfig+0x7ae>
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a55      	ldr	r2, [pc, #340]	; (800638c <UART_SetConfig+0x908>)
 8006238:	4293      	cmp	r3, r2
 800623a:	f040 80f8 	bne.w	800642e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800623e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006242:	2b20      	cmp	r3, #32
 8006244:	dc46      	bgt.n	80062d4 <UART_SetConfig+0x850>
 8006246:	2b02      	cmp	r3, #2
 8006248:	db75      	blt.n	8006336 <UART_SetConfig+0x8b2>
 800624a:	3b02      	subs	r3, #2
 800624c:	2b1e      	cmp	r3, #30
 800624e:	d872      	bhi.n	8006336 <UART_SetConfig+0x8b2>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0x7d4>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	080062db 	.word	0x080062db
 800625c:	08006337 	.word	0x08006337
 8006260:	080062e3 	.word	0x080062e3
 8006264:	08006337 	.word	0x08006337
 8006268:	08006337 	.word	0x08006337
 800626c:	08006337 	.word	0x08006337
 8006270:	080062f3 	.word	0x080062f3
 8006274:	08006337 	.word	0x08006337
 8006278:	08006337 	.word	0x08006337
 800627c:	08006337 	.word	0x08006337
 8006280:	08006337 	.word	0x08006337
 8006284:	08006337 	.word	0x08006337
 8006288:	08006337 	.word	0x08006337
 800628c:	08006337 	.word	0x08006337
 8006290:	08006303 	.word	0x08006303
 8006294:	08006337 	.word	0x08006337
 8006298:	08006337 	.word	0x08006337
 800629c:	08006337 	.word	0x08006337
 80062a0:	08006337 	.word	0x08006337
 80062a4:	08006337 	.word	0x08006337
 80062a8:	08006337 	.word	0x08006337
 80062ac:	08006337 	.word	0x08006337
 80062b0:	08006337 	.word	0x08006337
 80062b4:	08006337 	.word	0x08006337
 80062b8:	08006337 	.word	0x08006337
 80062bc:	08006337 	.word	0x08006337
 80062c0:	08006337 	.word	0x08006337
 80062c4:	08006337 	.word	0x08006337
 80062c8:	08006337 	.word	0x08006337
 80062cc:	08006337 	.word	0x08006337
 80062d0:	08006329 	.word	0x08006329
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d02a      	beq.n	800632e <UART_SetConfig+0x8aa>
 80062d8:	e02d      	b.n	8006336 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062da:	f7fe fb75 	bl	80049c8 <HAL_RCCEx_GetD3PCLK1Freq>
 80062de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062e0:	e02f      	b.n	8006342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fb84 	bl	80049f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062f0:	e027      	b.n	8006342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f2:	f107 0318 	add.w	r3, r7, #24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fcd0 	bl	8004c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006300:	e01f      	b.n	8006342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006302:	4b21      	ldr	r3, [pc, #132]	; (8006388 <UART_SetConfig+0x904>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800630e:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <UART_SetConfig+0x904>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	08db      	lsrs	r3, r3, #3
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	4a1d      	ldr	r2, [pc, #116]	; (8006390 <UART_SetConfig+0x90c>)
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006320:	e00f      	b.n	8006342 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006322:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <UART_SetConfig+0x90c>)
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006326:	e00c      	b.n	8006342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <UART_SetConfig+0x910>)
 800632a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800632c:	e009      	b.n	8006342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006334:	e005      	b.n	8006342 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 81ee 	beq.w	8006726 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <UART_SetConfig+0x914>)
 8006350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006354:	461a      	mov	r2, r3
 8006356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006358:	fbb3 f3f2 	udiv	r3, r3, r2
 800635c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636a:	429a      	cmp	r2, r3
 800636c:	d305      	bcc.n	800637a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	429a      	cmp	r2, r3
 8006378:	d910      	bls.n	800639c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006380:	e1d1      	b.n	8006726 <UART_SetConfig+0xca2>
 8006382:	bf00      	nop
 8006384:	40011c00 	.word	0x40011c00
 8006388:	58024400 	.word	0x58024400
 800638c:	58000c00 	.word	0x58000c00
 8006390:	03d09000 	.word	0x03d09000
 8006394:	003d0900 	.word	0x003d0900
 8006398:	08009ae4 	.word	0x08009ae4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800639c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639e:	2200      	movs	r2, #0
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	60fa      	str	r2, [r7, #12]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	4ac0      	ldr	r2, [pc, #768]	; (80066ac <UART_SetConfig+0xc28>)
 80063aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2200      	movs	r2, #0
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063be:	f7f9 ffef 	bl	80003a0 <__aeabi_uldivmod>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	020b      	lsls	r3, r1, #8
 80063d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063d8:	0202      	lsls	r2, r0, #8
 80063da:	6979      	ldr	r1, [r7, #20]
 80063dc:	6849      	ldr	r1, [r1, #4]
 80063de:	0849      	lsrs	r1, r1, #1
 80063e0:	2000      	movs	r0, #0
 80063e2:	460c      	mov	r4, r1
 80063e4:	4605      	mov	r5, r0
 80063e6:	eb12 0804 	adds.w	r8, r2, r4
 80063ea:	eb43 0905 	adc.w	r9, r3, r5
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	469a      	mov	sl, r3
 80063f6:	4693      	mov	fp, r2
 80063f8:	4652      	mov	r2, sl
 80063fa:	465b      	mov	r3, fp
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7f9 ffce 	bl	80003a0 <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4613      	mov	r3, r2
 800640a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006412:	d308      	bcc.n	8006426 <UART_SetConfig+0x9a2>
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641a:	d204      	bcs.n	8006426 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006422:	60da      	str	r2, [r3, #12]
 8006424:	e17f      	b.n	8006726 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800642c:	e17b      	b.n	8006726 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006436:	f040 80bd 	bne.w	80065b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800643a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800643e:	2b20      	cmp	r3, #32
 8006440:	dc48      	bgt.n	80064d4 <UART_SetConfig+0xa50>
 8006442:	2b00      	cmp	r3, #0
 8006444:	db7b      	blt.n	800653e <UART_SetConfig+0xaba>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d879      	bhi.n	800653e <UART_SetConfig+0xaba>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <UART_SetConfig+0x9cc>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	080064db 	.word	0x080064db
 8006454:	080064e3 	.word	0x080064e3
 8006458:	0800653f 	.word	0x0800653f
 800645c:	0800653f 	.word	0x0800653f
 8006460:	080064eb 	.word	0x080064eb
 8006464:	0800653f 	.word	0x0800653f
 8006468:	0800653f 	.word	0x0800653f
 800646c:	0800653f 	.word	0x0800653f
 8006470:	080064fb 	.word	0x080064fb
 8006474:	0800653f 	.word	0x0800653f
 8006478:	0800653f 	.word	0x0800653f
 800647c:	0800653f 	.word	0x0800653f
 8006480:	0800653f 	.word	0x0800653f
 8006484:	0800653f 	.word	0x0800653f
 8006488:	0800653f 	.word	0x0800653f
 800648c:	0800653f 	.word	0x0800653f
 8006490:	0800650b 	.word	0x0800650b
 8006494:	0800653f 	.word	0x0800653f
 8006498:	0800653f 	.word	0x0800653f
 800649c:	0800653f 	.word	0x0800653f
 80064a0:	0800653f 	.word	0x0800653f
 80064a4:	0800653f 	.word	0x0800653f
 80064a8:	0800653f 	.word	0x0800653f
 80064ac:	0800653f 	.word	0x0800653f
 80064b0:	0800653f 	.word	0x0800653f
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	0800653f 	.word	0x0800653f
 80064bc:	0800653f 	.word	0x0800653f
 80064c0:	0800653f 	.word	0x0800653f
 80064c4:	0800653f 	.word	0x0800653f
 80064c8:	0800653f 	.word	0x0800653f
 80064cc:	0800653f 	.word	0x0800653f
 80064d0:	08006531 	.word	0x08006531
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d02e      	beq.n	8006536 <UART_SetConfig+0xab2>
 80064d8:	e031      	b.n	800653e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064da:	f7fd f88b 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 80064de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064e0:	e033      	b.n	800654a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e2:	f7fd f89d 	bl	8003620 <HAL_RCC_GetPCLK2Freq>
 80064e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064e8:	e02f      	b.n	800654a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fa80 	bl	80049f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f8:	e027      	b.n	800654a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064fa:	f107 0318 	add.w	r3, r7, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fbcc 	bl	8004c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006508:	e01f      	b.n	800654a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800650a:	4b69      	ldr	r3, [pc, #420]	; (80066b0 <UART_SetConfig+0xc2c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006516:	4b66      	ldr	r3, [pc, #408]	; (80066b0 <UART_SetConfig+0xc2c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	08db      	lsrs	r3, r3, #3
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	4a64      	ldr	r2, [pc, #400]	; (80066b4 <UART_SetConfig+0xc30>)
 8006522:	fa22 f303 	lsr.w	r3, r2, r3
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006528:	e00f      	b.n	800654a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800652a:	4b62      	ldr	r3, [pc, #392]	; (80066b4 <UART_SetConfig+0xc30>)
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800652e:	e00c      	b.n	800654a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006530:	4b61      	ldr	r3, [pc, #388]	; (80066b8 <UART_SetConfig+0xc34>)
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006534:	e009      	b.n	800654a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653c:	e005      	b.n	800654a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80ea 	beq.w	8006726 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	4a55      	ldr	r2, [pc, #340]	; (80066ac <UART_SetConfig+0xc28>)
 8006558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800655c:	461a      	mov	r2, r3
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	fbb3 f3f2 	udiv	r3, r3, r2
 8006564:	005a      	lsls	r2, r3, #1
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	441a      	add	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	fbb2 f3f3 	udiv	r3, r2, r3
 8006576:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	2b0f      	cmp	r3, #15
 800657c:	d916      	bls.n	80065ac <UART_SetConfig+0xb28>
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006584:	d212      	bcs.n	80065ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	b29b      	uxth	r3, r3
 800658a:	f023 030f 	bic.w	r3, r3, #15
 800658e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	b29a      	uxth	r2, r3
 800659c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800659e:	4313      	orrs	r3, r2
 80065a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80065a8:	60da      	str	r2, [r3, #12]
 80065aa:	e0bc      	b.n	8006726 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80065b2:	e0b8      	b.n	8006726 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	dc4b      	bgt.n	8006654 <UART_SetConfig+0xbd0>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f2c0 8087 	blt.w	80066d0 <UART_SetConfig+0xc4c>
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	f200 8084 	bhi.w	80066d0 <UART_SetConfig+0xc4c>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <UART_SetConfig+0xb4c>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	0800665b 	.word	0x0800665b
 80065d4:	08006663 	.word	0x08006663
 80065d8:	080066d1 	.word	0x080066d1
 80065dc:	080066d1 	.word	0x080066d1
 80065e0:	0800666b 	.word	0x0800666b
 80065e4:	080066d1 	.word	0x080066d1
 80065e8:	080066d1 	.word	0x080066d1
 80065ec:	080066d1 	.word	0x080066d1
 80065f0:	0800667b 	.word	0x0800667b
 80065f4:	080066d1 	.word	0x080066d1
 80065f8:	080066d1 	.word	0x080066d1
 80065fc:	080066d1 	.word	0x080066d1
 8006600:	080066d1 	.word	0x080066d1
 8006604:	080066d1 	.word	0x080066d1
 8006608:	080066d1 	.word	0x080066d1
 800660c:	080066d1 	.word	0x080066d1
 8006610:	0800668b 	.word	0x0800668b
 8006614:	080066d1 	.word	0x080066d1
 8006618:	080066d1 	.word	0x080066d1
 800661c:	080066d1 	.word	0x080066d1
 8006620:	080066d1 	.word	0x080066d1
 8006624:	080066d1 	.word	0x080066d1
 8006628:	080066d1 	.word	0x080066d1
 800662c:	080066d1 	.word	0x080066d1
 8006630:	080066d1 	.word	0x080066d1
 8006634:	080066d1 	.word	0x080066d1
 8006638:	080066d1 	.word	0x080066d1
 800663c:	080066d1 	.word	0x080066d1
 8006640:	080066d1 	.word	0x080066d1
 8006644:	080066d1 	.word	0x080066d1
 8006648:	080066d1 	.word	0x080066d1
 800664c:	080066d1 	.word	0x080066d1
 8006650:	080066c3 	.word	0x080066c3
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d037      	beq.n	80066c8 <UART_SetConfig+0xc44>
 8006658:	e03a      	b.n	80066d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800665a:	f7fc ffcb 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 800665e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006660:	e03c      	b.n	80066dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006662:	f7fc ffdd 	bl	8003620 <HAL_RCC_GetPCLK2Freq>
 8006666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006668:	e038      	b.n	80066dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800666a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe f9c0 	bl	80049f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006678:	e030      	b.n	80066dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800667a:	f107 0318 	add.w	r3, r7, #24
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fb0c 	bl	8004c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006688:	e028      	b.n	80066dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <UART_SetConfig+0xc2c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d012      	beq.n	80066bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <UART_SetConfig+0xc2c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	08db      	lsrs	r3, r3, #3
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	4a04      	ldr	r2, [pc, #16]	; (80066b4 <UART_SetConfig+0xc30>)
 80066a2:	fa22 f303 	lsr.w	r3, r2, r3
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066a8:	e018      	b.n	80066dc <UART_SetConfig+0xc58>
 80066aa:	bf00      	nop
 80066ac:	08009ae4 	.word	0x08009ae4
 80066b0:	58024400 	.word	0x58024400
 80066b4:	03d09000 	.word	0x03d09000
 80066b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <UART_SetConfig+0xccc>)
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c0:	e00c      	b.n	80066dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <UART_SetConfig+0xcd0>)
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c6:	e009      	b.n	80066dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ce:	e005      	b.n	80066dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80066da:	bf00      	nop
    }

    if (pclk != 0U)
 80066dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d021      	beq.n	8006726 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	4a1c      	ldr	r2, [pc, #112]	; (8006758 <UART_SetConfig+0xcd4>)
 80066e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ec:	461a      	mov	r2, r3
 80066ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	441a      	add	r2, r3
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	2b0f      	cmp	r3, #15
 800670a:	d909      	bls.n	8006720 <UART_SetConfig+0xc9c>
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d205      	bcs.n	8006720 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	b29a      	uxth	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60da      	str	r2, [r3, #12]
 800671e:	e002      	b.n	8006726 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2201      	movs	r2, #1
 800672a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2201      	movs	r2, #1
 8006732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2200      	movs	r2, #0
 800673a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2200      	movs	r2, #0
 8006740:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006742:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006746:	4618      	mov	r0, r3
 8006748:	3748      	adds	r7, #72	; 0x48
 800674a:	46bd      	mov	sp, r7
 800674c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006750:	03d09000 	.word	0x03d09000
 8006754:	003d0900 	.word	0x003d0900
 8006758:	08009ae4 	.word	0x08009ae4

0800675c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01a      	beq.n	8006872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685a:	d10a      	bne.n	8006872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b098      	sub	sp, #96	; 0x60
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068b0:	f7fa fda6 	bl	8001400 <HAL_GetTick>
 80068b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d12f      	bne.n	8006924 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068cc:	2200      	movs	r2, #0
 80068ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f88e 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d022      	beq.n	8006924 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f2:	653b      	str	r3, [r7, #80]	; 0x50
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
 80068fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e6      	bne.n	80068de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e063      	b.n	80069ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b04      	cmp	r3, #4
 8006930:	d149      	bne.n	80069c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006932:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800693a:	2200      	movs	r2, #0
 800693c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f857 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d03c      	beq.n	80069c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	623b      	str	r3, [r7, #32]
   return(result);
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
 800696c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e6      	bne.n	800694c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	60fb      	str	r3, [r7, #12]
   return(result);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	64bb      	str	r3, [r7, #72]	; 0x48
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800699e:	61fa      	str	r2, [r7, #28]
 80069a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	69b9      	ldr	r1, [r7, #24]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	617b      	str	r3, [r7, #20]
   return(result);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e5      	bne.n	800697e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e012      	b.n	80069ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3758      	adds	r7, #88	; 0x58
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a04:	e049      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a0c:	d045      	beq.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0e:	f7fa fcf7 	bl	8001400 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d302      	bcc.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e048      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d031      	beq.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d110      	bne.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f839 	bl	8006ac4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2208      	movs	r2, #8
 8006a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e029      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a74:	d111      	bne.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f81f 	bl	8006ac4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e00f      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	bf0c      	ite	eq
 8006aaa:	2301      	moveq	r3, #1
 8006aac:	2300      	movne	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d0a6      	beq.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b095      	sub	sp, #84	; 0x54
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aea:	643b      	str	r3, [r7, #64]	; 0x40
 8006aec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e6      	bne.n	8006acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <UART_EndRxTransfer+0xc8>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d118      	bne.n	8006b6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f023 0310 	bic.w	r3, r3, #16
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6979      	ldr	r1, [r7, #20]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e6      	bne.n	8006b3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b80:	bf00      	nop
 8006b82:	3754      	adds	r7, #84	; 0x54
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	effffffe 	.word	0xeffffffe

08006b90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e027      	b.n	8006bf6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2224      	movs	r2, #36	; 0x24
 8006bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e02d      	b.n	8006c76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2224      	movs	r2, #36	; 0x24
 8006c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f850 	bl	8006cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e02d      	b.n	8006cf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2224      	movs	r2, #36	; 0x24
 8006ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f812 	bl	8006cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d108      	bne.n	8006d1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d1c:	e031      	b.n	8006d82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d1e:	2310      	movs	r3, #16
 8006d20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d22:	2310      	movs	r3, #16
 8006d24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	0e5b      	lsrs	r3, r3, #25
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	0f5b      	lsrs	r3, r3, #29
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	7b3a      	ldrb	r2, [r7, #12]
 8006d4a:	4911      	ldr	r1, [pc, #68]	; (8006d90 <UARTEx_SetNbDataToProcess+0x94>)
 8006d4c:	5c8a      	ldrb	r2, [r1, r2]
 8006d4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d52:	7b3a      	ldrb	r2, [r7, #12]
 8006d54:	490f      	ldr	r1, [pc, #60]	; (8006d94 <UARTEx_SetNbDataToProcess+0x98>)
 8006d56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	7b7a      	ldrb	r2, [r7, #13]
 8006d68:	4909      	ldr	r1, [pc, #36]	; (8006d90 <UARTEx_SetNbDataToProcess+0x94>)
 8006d6a:	5c8a      	ldrb	r2, [r1, r2]
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d70:	7b7a      	ldrb	r2, [r7, #13]
 8006d72:	4908      	ldr	r1, [pc, #32]	; (8006d94 <UARTEx_SetNbDataToProcess+0x98>)
 8006d74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d76:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	08009afc 	.word	0x08009afc
 8006d94:	08009b04 	.word	0x08009b04

08006d98 <__errno>:
 8006d98:	4b01      	ldr	r3, [pc, #4]	; (8006da0 <__errno+0x8>)
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	24000010 	.word	0x24000010

08006da4 <__libc_init_array>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4d0d      	ldr	r5, [pc, #52]	; (8006ddc <__libc_init_array+0x38>)
 8006da8:	4c0d      	ldr	r4, [pc, #52]	; (8006de0 <__libc_init_array+0x3c>)
 8006daa:	1b64      	subs	r4, r4, r5
 8006dac:	10a4      	asrs	r4, r4, #2
 8006dae:	2600      	movs	r6, #0
 8006db0:	42a6      	cmp	r6, r4
 8006db2:	d109      	bne.n	8006dc8 <__libc_init_array+0x24>
 8006db4:	4d0b      	ldr	r5, [pc, #44]	; (8006de4 <__libc_init_array+0x40>)
 8006db6:	4c0c      	ldr	r4, [pc, #48]	; (8006de8 <__libc_init_array+0x44>)
 8006db8:	f002 fe72 	bl	8009aa0 <_init>
 8006dbc:	1b64      	subs	r4, r4, r5
 8006dbe:	10a4      	asrs	r4, r4, #2
 8006dc0:	2600      	movs	r6, #0
 8006dc2:	42a6      	cmp	r6, r4
 8006dc4:	d105      	bne.n	8006dd2 <__libc_init_array+0x2e>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dcc:	4798      	blx	r3
 8006dce:	3601      	adds	r6, #1
 8006dd0:	e7ee      	b.n	8006db0 <__libc_init_array+0xc>
 8006dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd6:	4798      	blx	r3
 8006dd8:	3601      	adds	r6, #1
 8006dda:	e7f2      	b.n	8006dc2 <__libc_init_array+0x1e>
 8006ddc:	08009eec 	.word	0x08009eec
 8006de0:	08009eec 	.word	0x08009eec
 8006de4:	08009eec 	.word	0x08009eec
 8006de8:	08009ef0 	.word	0x08009ef0

08006dec <memset>:
 8006dec:	4402      	add	r2, r0
 8006dee:	4603      	mov	r3, r0
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d100      	bne.n	8006df6 <memset+0xa>
 8006df4:	4770      	bx	lr
 8006df6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfa:	e7f9      	b.n	8006df0 <memset+0x4>

08006dfc <__cvt>:
 8006dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfe:	ed2d 8b02 	vpush	{d8}
 8006e02:	eeb0 8b40 	vmov.f64	d8, d0
 8006e06:	b085      	sub	sp, #20
 8006e08:	4617      	mov	r7, r2
 8006e0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006e0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006e0e:	ee18 2a90 	vmov	r2, s17
 8006e12:	f025 0520 	bic.w	r5, r5, #32
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	bfb6      	itet	lt
 8006e1a:	222d      	movlt	r2, #45	; 0x2d
 8006e1c:	2200      	movge	r2, #0
 8006e1e:	eeb1 8b40 	vneglt.f64	d8, d0
 8006e22:	2d46      	cmp	r5, #70	; 0x46
 8006e24:	460c      	mov	r4, r1
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	d004      	beq.n	8006e34 <__cvt+0x38>
 8006e2a:	2d45      	cmp	r5, #69	; 0x45
 8006e2c:	d100      	bne.n	8006e30 <__cvt+0x34>
 8006e2e:	3401      	adds	r4, #1
 8006e30:	2102      	movs	r1, #2
 8006e32:	e000      	b.n	8006e36 <__cvt+0x3a>
 8006e34:	2103      	movs	r1, #3
 8006e36:	ab03      	add	r3, sp, #12
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	ab02      	add	r3, sp, #8
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4622      	mov	r2, r4
 8006e40:	4633      	mov	r3, r6
 8006e42:	eeb0 0b48 	vmov.f64	d0, d8
 8006e46:	f000 fcdf 	bl	8007808 <_dtoa_r>
 8006e4a:	2d47      	cmp	r5, #71	; 0x47
 8006e4c:	d101      	bne.n	8006e52 <__cvt+0x56>
 8006e4e:	07fb      	lsls	r3, r7, #31
 8006e50:	d51a      	bpl.n	8006e88 <__cvt+0x8c>
 8006e52:	2d46      	cmp	r5, #70	; 0x46
 8006e54:	eb00 0204 	add.w	r2, r0, r4
 8006e58:	d10c      	bne.n	8006e74 <__cvt+0x78>
 8006e5a:	7803      	ldrb	r3, [r0, #0]
 8006e5c:	2b30      	cmp	r3, #48	; 0x30
 8006e5e:	d107      	bne.n	8006e70 <__cvt+0x74>
 8006e60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e68:	bf1c      	itt	ne
 8006e6a:	f1c4 0401 	rsbne	r4, r4, #1
 8006e6e:	6034      	strne	r4, [r6, #0]
 8006e70:	6833      	ldr	r3, [r6, #0]
 8006e72:	441a      	add	r2, r3
 8006e74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7c:	bf08      	it	eq
 8006e7e:	9203      	streq	r2, [sp, #12]
 8006e80:	2130      	movs	r1, #48	; 0x30
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d307      	bcc.n	8006e98 <__cvt+0x9c>
 8006e88:	9b03      	ldr	r3, [sp, #12]
 8006e8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e8c:	1a1b      	subs	r3, r3, r0
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	b005      	add	sp, #20
 8006e92:	ecbd 8b02 	vpop	{d8}
 8006e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e98:	1c5c      	adds	r4, r3, #1
 8006e9a:	9403      	str	r4, [sp, #12]
 8006e9c:	7019      	strb	r1, [r3, #0]
 8006e9e:	e7f0      	b.n	8006e82 <__cvt+0x86>

08006ea0 <__exponent>:
 8006ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	bfb8      	it	lt
 8006ea8:	4249      	neglt	r1, r1
 8006eaa:	f803 2b02 	strb.w	r2, [r3], #2
 8006eae:	bfb4      	ite	lt
 8006eb0:	222d      	movlt	r2, #45	; 0x2d
 8006eb2:	222b      	movge	r2, #43	; 0x2b
 8006eb4:	2909      	cmp	r1, #9
 8006eb6:	7042      	strb	r2, [r0, #1]
 8006eb8:	dd2a      	ble.n	8006f10 <__exponent+0x70>
 8006eba:	f10d 0407 	add.w	r4, sp, #7
 8006ebe:	46a4      	mov	ip, r4
 8006ec0:	270a      	movs	r7, #10
 8006ec2:	46a6      	mov	lr, r4
 8006ec4:	460a      	mov	r2, r1
 8006ec6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006eca:	fb07 1516 	mls	r5, r7, r6, r1
 8006ece:	3530      	adds	r5, #48	; 0x30
 8006ed0:	2a63      	cmp	r2, #99	; 0x63
 8006ed2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006ed6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006eda:	4631      	mov	r1, r6
 8006edc:	dcf1      	bgt.n	8006ec2 <__exponent+0x22>
 8006ede:	3130      	adds	r1, #48	; 0x30
 8006ee0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ee4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ee8:	1c44      	adds	r4, r0, #1
 8006eea:	4629      	mov	r1, r5
 8006eec:	4561      	cmp	r1, ip
 8006eee:	d30a      	bcc.n	8006f06 <__exponent+0x66>
 8006ef0:	f10d 0209 	add.w	r2, sp, #9
 8006ef4:	eba2 020e 	sub.w	r2, r2, lr
 8006ef8:	4565      	cmp	r5, ip
 8006efa:	bf88      	it	hi
 8006efc:	2200      	movhi	r2, #0
 8006efe:	4413      	add	r3, r2
 8006f00:	1a18      	subs	r0, r3, r0
 8006f02:	b003      	add	sp, #12
 8006f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f0e:	e7ed      	b.n	8006eec <__exponent+0x4c>
 8006f10:	2330      	movs	r3, #48	; 0x30
 8006f12:	3130      	adds	r1, #48	; 0x30
 8006f14:	7083      	strb	r3, [r0, #2]
 8006f16:	70c1      	strb	r1, [r0, #3]
 8006f18:	1d03      	adds	r3, r0, #4
 8006f1a:	e7f1      	b.n	8006f00 <__exponent+0x60>
 8006f1c:	0000      	movs	r0, r0
	...

08006f20 <_printf_float>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	b08b      	sub	sp, #44	; 0x2c
 8006f26:	460c      	mov	r4, r1
 8006f28:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	461f      	mov	r7, r3
 8006f30:	4605      	mov	r5, r0
 8006f32:	f001 f9d7 	bl	80082e4 <_localeconv_r>
 8006f36:	f8d0 b000 	ldr.w	fp, [r0]
 8006f3a:	4658      	mov	r0, fp
 8006f3c:	f7f9 f9d8 	bl	80002f0 <strlen>
 8006f40:	2300      	movs	r3, #0
 8006f42:	9308      	str	r3, [sp, #32]
 8006f44:	f8d8 3000 	ldr.w	r3, [r8]
 8006f48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	3307      	adds	r3, #7
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	f103 0108 	add.w	r1, r3, #8
 8006f58:	f8c8 1000 	str.w	r1, [r8]
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f62:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006f66:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80071c8 <_printf_float+0x2a8>
 8006f6a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006f6e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006f72:	eeb4 6b47 	vcmp.f64	d6, d7
 8006f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7a:	dd24      	ble.n	8006fc6 <_printf_float+0xa6>
 8006f7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f84:	d502      	bpl.n	8006f8c <_printf_float+0x6c>
 8006f86:	232d      	movs	r3, #45	; 0x2d
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8c:	4b90      	ldr	r3, [pc, #576]	; (80071d0 <_printf_float+0x2b0>)
 8006f8e:	4891      	ldr	r0, [pc, #580]	; (80071d4 <_printf_float+0x2b4>)
 8006f90:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f94:	bf94      	ite	ls
 8006f96:	4698      	movls	r8, r3
 8006f98:	4680      	movhi	r8, r0
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	f022 0204 	bic.w	r2, r2, #4
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6022      	str	r2, [r4, #0]
 8006fa6:	9304      	str	r3, [sp, #16]
 8006fa8:	9700      	str	r7, [sp, #0]
 8006faa:	4633      	mov	r3, r6
 8006fac:	aa09      	add	r2, sp, #36	; 0x24
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 f9d3 	bl	800735c <_printf_common>
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f040 808a 	bne.w	80070d0 <_printf_float+0x1b0>
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fc0:	b00b      	add	sp, #44	; 0x2c
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	eeb4 0b40 	vcmp.f64	d0, d0
 8006fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fce:	d709      	bvc.n	8006fe4 <_printf_float+0xc4>
 8006fd0:	ee10 3a90 	vmov	r3, s1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bfbc      	itt	lt
 8006fd8:	232d      	movlt	r3, #45	; 0x2d
 8006fda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fde:	487e      	ldr	r0, [pc, #504]	; (80071d8 <_printf_float+0x2b8>)
 8006fe0:	4b7e      	ldr	r3, [pc, #504]	; (80071dc <_printf_float+0x2bc>)
 8006fe2:	e7d5      	b.n	8006f90 <_printf_float+0x70>
 8006fe4:	6863      	ldr	r3, [r4, #4]
 8006fe6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006fea:	9104      	str	r1, [sp, #16]
 8006fec:	1c59      	adds	r1, r3, #1
 8006fee:	d13c      	bne.n	800706a <_printf_float+0x14a>
 8006ff0:	2306      	movs	r3, #6
 8006ff2:	6063      	str	r3, [r4, #4]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	ab08      	add	r3, sp, #32
 8006ffa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007002:	ab07      	add	r3, sp, #28
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	6022      	str	r2, [r4, #0]
 800700a:	f10d 031b 	add.w	r3, sp, #27
 800700e:	4628      	mov	r0, r5
 8007010:	f7ff fef4 	bl	8006dfc <__cvt>
 8007014:	9b04      	ldr	r3, [sp, #16]
 8007016:	9907      	ldr	r1, [sp, #28]
 8007018:	2b47      	cmp	r3, #71	; 0x47
 800701a:	4680      	mov	r8, r0
 800701c:	d108      	bne.n	8007030 <_printf_float+0x110>
 800701e:	1cc8      	adds	r0, r1, #3
 8007020:	db02      	blt.n	8007028 <_printf_float+0x108>
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	4299      	cmp	r1, r3
 8007026:	dd41      	ble.n	80070ac <_printf_float+0x18c>
 8007028:	f1a9 0902 	sub.w	r9, r9, #2
 800702c:	fa5f f989 	uxtb.w	r9, r9
 8007030:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007034:	d820      	bhi.n	8007078 <_printf_float+0x158>
 8007036:	3901      	subs	r1, #1
 8007038:	464a      	mov	r2, r9
 800703a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800703e:	9107      	str	r1, [sp, #28]
 8007040:	f7ff ff2e 	bl	8006ea0 <__exponent>
 8007044:	9a08      	ldr	r2, [sp, #32]
 8007046:	9004      	str	r0, [sp, #16]
 8007048:	1813      	adds	r3, r2, r0
 800704a:	2a01      	cmp	r2, #1
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	dc02      	bgt.n	8007056 <_printf_float+0x136>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	07d2      	lsls	r2, r2, #31
 8007054:	d501      	bpl.n	800705a <_printf_float+0x13a>
 8007056:	3301      	adds	r3, #1
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0a2      	beq.n	8006fa8 <_printf_float+0x88>
 8007062:	232d      	movs	r3, #45	; 0x2d
 8007064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007068:	e79e      	b.n	8006fa8 <_printf_float+0x88>
 800706a:	9904      	ldr	r1, [sp, #16]
 800706c:	2947      	cmp	r1, #71	; 0x47
 800706e:	d1c1      	bne.n	8006ff4 <_printf_float+0xd4>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1bf      	bne.n	8006ff4 <_printf_float+0xd4>
 8007074:	2301      	movs	r3, #1
 8007076:	e7bc      	b.n	8006ff2 <_printf_float+0xd2>
 8007078:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800707c:	d118      	bne.n	80070b0 <_printf_float+0x190>
 800707e:	2900      	cmp	r1, #0
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	dd0b      	ble.n	800709c <_printf_float+0x17c>
 8007084:	6121      	str	r1, [r4, #16]
 8007086:	b913      	cbnz	r3, 800708e <_printf_float+0x16e>
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	07d0      	lsls	r0, r2, #31
 800708c:	d502      	bpl.n	8007094 <_printf_float+0x174>
 800708e:	3301      	adds	r3, #1
 8007090:	440b      	add	r3, r1
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	2300      	movs	r3, #0
 8007096:	65a1      	str	r1, [r4, #88]	; 0x58
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	e7de      	b.n	800705a <_printf_float+0x13a>
 800709c:	b913      	cbnz	r3, 80070a4 <_printf_float+0x184>
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	07d2      	lsls	r2, r2, #31
 80070a2:	d501      	bpl.n	80070a8 <_printf_float+0x188>
 80070a4:	3302      	adds	r3, #2
 80070a6:	e7f4      	b.n	8007092 <_printf_float+0x172>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e7f2      	b.n	8007092 <_printf_float+0x172>
 80070ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80070b0:	9b08      	ldr	r3, [sp, #32]
 80070b2:	4299      	cmp	r1, r3
 80070b4:	db05      	blt.n	80070c2 <_printf_float+0x1a2>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	6121      	str	r1, [r4, #16]
 80070ba:	07d8      	lsls	r0, r3, #31
 80070bc:	d5ea      	bpl.n	8007094 <_printf_float+0x174>
 80070be:	1c4b      	adds	r3, r1, #1
 80070c0:	e7e7      	b.n	8007092 <_printf_float+0x172>
 80070c2:	2900      	cmp	r1, #0
 80070c4:	bfd4      	ite	le
 80070c6:	f1c1 0202 	rsble	r2, r1, #2
 80070ca:	2201      	movgt	r2, #1
 80070cc:	4413      	add	r3, r2
 80070ce:	e7e0      	b.n	8007092 <_printf_float+0x172>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	055a      	lsls	r2, r3, #21
 80070d4:	d407      	bmi.n	80070e6 <_printf_float+0x1c6>
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	4642      	mov	r2, r8
 80070da:	4631      	mov	r1, r6
 80070dc:	4628      	mov	r0, r5
 80070de:	47b8      	blx	r7
 80070e0:	3001      	adds	r0, #1
 80070e2:	d12a      	bne.n	800713a <_printf_float+0x21a>
 80070e4:	e76a      	b.n	8006fbc <_printf_float+0x9c>
 80070e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070ea:	f240 80e2 	bls.w	80072b2 <_printf_float+0x392>
 80070ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80070f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fa:	d133      	bne.n	8007164 <_printf_float+0x244>
 80070fc:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <_printf_float+0x2c0>)
 80070fe:	2301      	movs	r3, #1
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	f43f af58 	beq.w	8006fbc <_printf_float+0x9c>
 800710c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007110:	429a      	cmp	r2, r3
 8007112:	db02      	blt.n	800711a <_printf_float+0x1fa>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	07d8      	lsls	r0, r3, #31
 8007118:	d50f      	bpl.n	800713a <_printf_float+0x21a>
 800711a:	4653      	mov	r3, sl
 800711c:	465a      	mov	r2, fp
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	f43f af49 	beq.w	8006fbc <_printf_float+0x9c>
 800712a:	f04f 0800 	mov.w	r8, #0
 800712e:	f104 091a 	add.w	r9, r4, #26
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	3b01      	subs	r3, #1
 8007136:	4543      	cmp	r3, r8
 8007138:	dc09      	bgt.n	800714e <_printf_float+0x22e>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	079b      	lsls	r3, r3, #30
 800713e:	f100 8108 	bmi.w	8007352 <_printf_float+0x432>
 8007142:	68e0      	ldr	r0, [r4, #12]
 8007144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007146:	4298      	cmp	r0, r3
 8007148:	bfb8      	it	lt
 800714a:	4618      	movlt	r0, r3
 800714c:	e738      	b.n	8006fc0 <_printf_float+0xa0>
 800714e:	2301      	movs	r3, #1
 8007150:	464a      	mov	r2, r9
 8007152:	4631      	mov	r1, r6
 8007154:	4628      	mov	r0, r5
 8007156:	47b8      	blx	r7
 8007158:	3001      	adds	r0, #1
 800715a:	f43f af2f 	beq.w	8006fbc <_printf_float+0x9c>
 800715e:	f108 0801 	add.w	r8, r8, #1
 8007162:	e7e6      	b.n	8007132 <_printf_float+0x212>
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dc3c      	bgt.n	80071e4 <_printf_float+0x2c4>
 800716a:	4a1d      	ldr	r2, [pc, #116]	; (80071e0 <_printf_float+0x2c0>)
 800716c:	2301      	movs	r3, #1
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	f43f af21 	beq.w	8006fbc <_printf_float+0x9c>
 800717a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800717e:	4313      	orrs	r3, r2
 8007180:	d102      	bne.n	8007188 <_printf_float+0x268>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	07d9      	lsls	r1, r3, #31
 8007186:	d5d8      	bpl.n	800713a <_printf_float+0x21a>
 8007188:	4653      	mov	r3, sl
 800718a:	465a      	mov	r2, fp
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f af12 	beq.w	8006fbc <_printf_float+0x9c>
 8007198:	f04f 0900 	mov.w	r9, #0
 800719c:	f104 0a1a 	add.w	sl, r4, #26
 80071a0:	9b07      	ldr	r3, [sp, #28]
 80071a2:	425b      	negs	r3, r3
 80071a4:	454b      	cmp	r3, r9
 80071a6:	dc01      	bgt.n	80071ac <_printf_float+0x28c>
 80071a8:	9b08      	ldr	r3, [sp, #32]
 80071aa:	e795      	b.n	80070d8 <_printf_float+0x1b8>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4652      	mov	r2, sl
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f af00 	beq.w	8006fbc <_printf_float+0x9c>
 80071bc:	f109 0901 	add.w	r9, r9, #1
 80071c0:	e7ee      	b.n	80071a0 <_printf_float+0x280>
 80071c2:	bf00      	nop
 80071c4:	f3af 8000 	nop.w
 80071c8:	ffffffff 	.word	0xffffffff
 80071cc:	7fefffff 	.word	0x7fefffff
 80071d0:	08009b10 	.word	0x08009b10
 80071d4:	08009b14 	.word	0x08009b14
 80071d8:	08009b1c 	.word	0x08009b1c
 80071dc:	08009b18 	.word	0x08009b18
 80071e0:	08009b20 	.word	0x08009b20
 80071e4:	9a08      	ldr	r2, [sp, #32]
 80071e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071e8:	429a      	cmp	r2, r3
 80071ea:	bfa8      	it	ge
 80071ec:	461a      	movge	r2, r3
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	4691      	mov	r9, r2
 80071f2:	dc38      	bgt.n	8007266 <_printf_float+0x346>
 80071f4:	2300      	movs	r3, #0
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071fc:	f104 021a 	add.w	r2, r4, #26
 8007200:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007202:	9905      	ldr	r1, [sp, #20]
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	eba3 0309 	sub.w	r3, r3, r9
 800720a:	428b      	cmp	r3, r1
 800720c:	dc33      	bgt.n	8007276 <_printf_float+0x356>
 800720e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007212:	429a      	cmp	r2, r3
 8007214:	db3c      	blt.n	8007290 <_printf_float+0x370>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	07da      	lsls	r2, r3, #31
 800721a:	d439      	bmi.n	8007290 <_printf_float+0x370>
 800721c:	9b08      	ldr	r3, [sp, #32]
 800721e:	9a04      	ldr	r2, [sp, #16]
 8007220:	9907      	ldr	r1, [sp, #28]
 8007222:	1a9a      	subs	r2, r3, r2
 8007224:	eba3 0901 	sub.w	r9, r3, r1
 8007228:	4591      	cmp	r9, r2
 800722a:	bfa8      	it	ge
 800722c:	4691      	movge	r9, r2
 800722e:	f1b9 0f00 	cmp.w	r9, #0
 8007232:	dc35      	bgt.n	80072a0 <_printf_float+0x380>
 8007234:	f04f 0800 	mov.w	r8, #0
 8007238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800723c:	f104 0a1a 	add.w	sl, r4, #26
 8007240:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	eba3 0309 	sub.w	r3, r3, r9
 800724a:	4543      	cmp	r3, r8
 800724c:	f77f af75 	ble.w	800713a <_printf_float+0x21a>
 8007250:	2301      	movs	r3, #1
 8007252:	4652      	mov	r2, sl
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f aeae 	beq.w	8006fbc <_printf_float+0x9c>
 8007260:	f108 0801 	add.w	r8, r8, #1
 8007264:	e7ec      	b.n	8007240 <_printf_float+0x320>
 8007266:	4613      	mov	r3, r2
 8007268:	4631      	mov	r1, r6
 800726a:	4642      	mov	r2, r8
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	d1bf      	bne.n	80071f4 <_printf_float+0x2d4>
 8007274:	e6a2      	b.n	8006fbc <_printf_float+0x9c>
 8007276:	2301      	movs	r3, #1
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	9204      	str	r2, [sp, #16]
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f ae9b 	beq.w	8006fbc <_printf_float+0x9c>
 8007286:	9b05      	ldr	r3, [sp, #20]
 8007288:	9a04      	ldr	r2, [sp, #16]
 800728a:	3301      	adds	r3, #1
 800728c:	9305      	str	r3, [sp, #20]
 800728e:	e7b7      	b.n	8007200 <_printf_float+0x2e0>
 8007290:	4653      	mov	r3, sl
 8007292:	465a      	mov	r2, fp
 8007294:	4631      	mov	r1, r6
 8007296:	4628      	mov	r0, r5
 8007298:	47b8      	blx	r7
 800729a:	3001      	adds	r0, #1
 800729c:	d1be      	bne.n	800721c <_printf_float+0x2fc>
 800729e:	e68d      	b.n	8006fbc <_printf_float+0x9c>
 80072a0:	9a04      	ldr	r2, [sp, #16]
 80072a2:	464b      	mov	r3, r9
 80072a4:	4442      	add	r2, r8
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	d1c1      	bne.n	8007234 <_printf_float+0x314>
 80072b0:	e684      	b.n	8006fbc <_printf_float+0x9c>
 80072b2:	9a08      	ldr	r2, [sp, #32]
 80072b4:	2a01      	cmp	r2, #1
 80072b6:	dc01      	bgt.n	80072bc <_printf_float+0x39c>
 80072b8:	07db      	lsls	r3, r3, #31
 80072ba:	d537      	bpl.n	800732c <_printf_float+0x40c>
 80072bc:	2301      	movs	r3, #1
 80072be:	4642      	mov	r2, r8
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	f43f ae78 	beq.w	8006fbc <_printf_float+0x9c>
 80072cc:	4653      	mov	r3, sl
 80072ce:	465a      	mov	r2, fp
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f ae70 	beq.w	8006fbc <_printf_float+0x9c>
 80072dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80072e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e8:	d01b      	beq.n	8007322 <_printf_float+0x402>
 80072ea:	9b08      	ldr	r3, [sp, #32]
 80072ec:	f108 0201 	add.w	r2, r8, #1
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	d10e      	bne.n	800731a <_printf_float+0x3fa>
 80072fc:	e65e      	b.n	8006fbc <_printf_float+0x9c>
 80072fe:	2301      	movs	r3, #1
 8007300:	464a      	mov	r2, r9
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f ae57 	beq.w	8006fbc <_printf_float+0x9c>
 800730e:	f108 0801 	add.w	r8, r8, #1
 8007312:	9b08      	ldr	r3, [sp, #32]
 8007314:	3b01      	subs	r3, #1
 8007316:	4543      	cmp	r3, r8
 8007318:	dcf1      	bgt.n	80072fe <_printf_float+0x3de>
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007320:	e6db      	b.n	80070da <_printf_float+0x1ba>
 8007322:	f04f 0800 	mov.w	r8, #0
 8007326:	f104 091a 	add.w	r9, r4, #26
 800732a:	e7f2      	b.n	8007312 <_printf_float+0x3f2>
 800732c:	2301      	movs	r3, #1
 800732e:	4642      	mov	r2, r8
 8007330:	e7df      	b.n	80072f2 <_printf_float+0x3d2>
 8007332:	2301      	movs	r3, #1
 8007334:	464a      	mov	r2, r9
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f ae3d 	beq.w	8006fbc <_printf_float+0x9c>
 8007342:	f108 0801 	add.w	r8, r8, #1
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800734a:	1a5b      	subs	r3, r3, r1
 800734c:	4543      	cmp	r3, r8
 800734e:	dcf0      	bgt.n	8007332 <_printf_float+0x412>
 8007350:	e6f7      	b.n	8007142 <_printf_float+0x222>
 8007352:	f04f 0800 	mov.w	r8, #0
 8007356:	f104 0919 	add.w	r9, r4, #25
 800735a:	e7f4      	b.n	8007346 <_printf_float+0x426>

0800735c <_printf_common>:
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	4616      	mov	r6, r2
 8007362:	4699      	mov	r9, r3
 8007364:	688a      	ldr	r2, [r1, #8]
 8007366:	690b      	ldr	r3, [r1, #16]
 8007368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800736c:	4293      	cmp	r3, r2
 800736e:	bfb8      	it	lt
 8007370:	4613      	movlt	r3, r2
 8007372:	6033      	str	r3, [r6, #0]
 8007374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007378:	4607      	mov	r7, r0
 800737a:	460c      	mov	r4, r1
 800737c:	b10a      	cbz	r2, 8007382 <_printf_common+0x26>
 800737e:	3301      	adds	r3, #1
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	0699      	lsls	r1, r3, #26
 8007386:	bf42      	ittt	mi
 8007388:	6833      	ldrmi	r3, [r6, #0]
 800738a:	3302      	addmi	r3, #2
 800738c:	6033      	strmi	r3, [r6, #0]
 800738e:	6825      	ldr	r5, [r4, #0]
 8007390:	f015 0506 	ands.w	r5, r5, #6
 8007394:	d106      	bne.n	80073a4 <_printf_common+0x48>
 8007396:	f104 0a19 	add.w	sl, r4, #25
 800739a:	68e3      	ldr	r3, [r4, #12]
 800739c:	6832      	ldr	r2, [r6, #0]
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	dc26      	bgt.n	80073f2 <_printf_common+0x96>
 80073a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073a8:	1e13      	subs	r3, r2, #0
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	bf18      	it	ne
 80073ae:	2301      	movne	r3, #1
 80073b0:	0692      	lsls	r2, r2, #26
 80073b2:	d42b      	bmi.n	800740c <_printf_common+0xb0>
 80073b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073b8:	4649      	mov	r1, r9
 80073ba:	4638      	mov	r0, r7
 80073bc:	47c0      	blx	r8
 80073be:	3001      	adds	r0, #1
 80073c0:	d01e      	beq.n	8007400 <_printf_common+0xa4>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	68e5      	ldr	r5, [r4, #12]
 80073c6:	6832      	ldr	r2, [r6, #0]
 80073c8:	f003 0306 	and.w	r3, r3, #6
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	bf08      	it	eq
 80073d0:	1aad      	subeq	r5, r5, r2
 80073d2:	68a3      	ldr	r3, [r4, #8]
 80073d4:	6922      	ldr	r2, [r4, #16]
 80073d6:	bf0c      	ite	eq
 80073d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073dc:	2500      	movne	r5, #0
 80073de:	4293      	cmp	r3, r2
 80073e0:	bfc4      	itt	gt
 80073e2:	1a9b      	subgt	r3, r3, r2
 80073e4:	18ed      	addgt	r5, r5, r3
 80073e6:	2600      	movs	r6, #0
 80073e8:	341a      	adds	r4, #26
 80073ea:	42b5      	cmp	r5, r6
 80073ec:	d11a      	bne.n	8007424 <_printf_common+0xc8>
 80073ee:	2000      	movs	r0, #0
 80073f0:	e008      	b.n	8007404 <_printf_common+0xa8>
 80073f2:	2301      	movs	r3, #1
 80073f4:	4652      	mov	r2, sl
 80073f6:	4649      	mov	r1, r9
 80073f8:	4638      	mov	r0, r7
 80073fa:	47c0      	blx	r8
 80073fc:	3001      	adds	r0, #1
 80073fe:	d103      	bne.n	8007408 <_printf_common+0xac>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007408:	3501      	adds	r5, #1
 800740a:	e7c6      	b.n	800739a <_printf_common+0x3e>
 800740c:	18e1      	adds	r1, r4, r3
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	2030      	movs	r0, #48	; 0x30
 8007412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007416:	4422      	add	r2, r4
 8007418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800741c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007420:	3302      	adds	r3, #2
 8007422:	e7c7      	b.n	80073b4 <_printf_common+0x58>
 8007424:	2301      	movs	r3, #1
 8007426:	4622      	mov	r2, r4
 8007428:	4649      	mov	r1, r9
 800742a:	4638      	mov	r0, r7
 800742c:	47c0      	blx	r8
 800742e:	3001      	adds	r0, #1
 8007430:	d0e6      	beq.n	8007400 <_printf_common+0xa4>
 8007432:	3601      	adds	r6, #1
 8007434:	e7d9      	b.n	80073ea <_printf_common+0x8e>
	...

08007438 <_printf_i>:
 8007438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	7e0f      	ldrb	r7, [r1, #24]
 800743e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007440:	2f78      	cmp	r7, #120	; 0x78
 8007442:	4691      	mov	r9, r2
 8007444:	4680      	mov	r8, r0
 8007446:	460c      	mov	r4, r1
 8007448:	469a      	mov	sl, r3
 800744a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800744e:	d807      	bhi.n	8007460 <_printf_i+0x28>
 8007450:	2f62      	cmp	r7, #98	; 0x62
 8007452:	d80a      	bhi.n	800746a <_printf_i+0x32>
 8007454:	2f00      	cmp	r7, #0
 8007456:	f000 80d8 	beq.w	800760a <_printf_i+0x1d2>
 800745a:	2f58      	cmp	r7, #88	; 0x58
 800745c:	f000 80a3 	beq.w	80075a6 <_printf_i+0x16e>
 8007460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007468:	e03a      	b.n	80074e0 <_printf_i+0xa8>
 800746a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800746e:	2b15      	cmp	r3, #21
 8007470:	d8f6      	bhi.n	8007460 <_printf_i+0x28>
 8007472:	a101      	add	r1, pc, #4	; (adr r1, 8007478 <_printf_i+0x40>)
 8007474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007478:	080074d1 	.word	0x080074d1
 800747c:	080074e5 	.word	0x080074e5
 8007480:	08007461 	.word	0x08007461
 8007484:	08007461 	.word	0x08007461
 8007488:	08007461 	.word	0x08007461
 800748c:	08007461 	.word	0x08007461
 8007490:	080074e5 	.word	0x080074e5
 8007494:	08007461 	.word	0x08007461
 8007498:	08007461 	.word	0x08007461
 800749c:	08007461 	.word	0x08007461
 80074a0:	08007461 	.word	0x08007461
 80074a4:	080075f1 	.word	0x080075f1
 80074a8:	08007515 	.word	0x08007515
 80074ac:	080075d3 	.word	0x080075d3
 80074b0:	08007461 	.word	0x08007461
 80074b4:	08007461 	.word	0x08007461
 80074b8:	08007613 	.word	0x08007613
 80074bc:	08007461 	.word	0x08007461
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007461 	.word	0x08007461
 80074c8:	08007461 	.word	0x08007461
 80074cc:	080075db 	.word	0x080075db
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	1d1a      	adds	r2, r3, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	602a      	str	r2, [r5, #0]
 80074d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0a3      	b.n	800762c <_printf_i+0x1f4>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	6829      	ldr	r1, [r5, #0]
 80074e8:	0606      	lsls	r6, r0, #24
 80074ea:	f101 0304 	add.w	r3, r1, #4
 80074ee:	d50a      	bpl.n	8007506 <_printf_i+0xce>
 80074f0:	680e      	ldr	r6, [r1, #0]
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	2e00      	cmp	r6, #0
 80074f6:	da03      	bge.n	8007500 <_printf_i+0xc8>
 80074f8:	232d      	movs	r3, #45	; 0x2d
 80074fa:	4276      	negs	r6, r6
 80074fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007500:	485e      	ldr	r0, [pc, #376]	; (800767c <_printf_i+0x244>)
 8007502:	230a      	movs	r3, #10
 8007504:	e019      	b.n	800753a <_printf_i+0x102>
 8007506:	680e      	ldr	r6, [r1, #0]
 8007508:	602b      	str	r3, [r5, #0]
 800750a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800750e:	bf18      	it	ne
 8007510:	b236      	sxthne	r6, r6
 8007512:	e7ef      	b.n	80074f4 <_printf_i+0xbc>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	6029      	str	r1, [r5, #0]
 800751c:	0601      	lsls	r1, r0, #24
 800751e:	d501      	bpl.n	8007524 <_printf_i+0xec>
 8007520:	681e      	ldr	r6, [r3, #0]
 8007522:	e002      	b.n	800752a <_printf_i+0xf2>
 8007524:	0646      	lsls	r6, r0, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0xe8>
 8007528:	881e      	ldrh	r6, [r3, #0]
 800752a:	4854      	ldr	r0, [pc, #336]	; (800767c <_printf_i+0x244>)
 800752c:	2f6f      	cmp	r7, #111	; 0x6f
 800752e:	bf0c      	ite	eq
 8007530:	2308      	moveq	r3, #8
 8007532:	230a      	movne	r3, #10
 8007534:	2100      	movs	r1, #0
 8007536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800753a:	6865      	ldr	r5, [r4, #4]
 800753c:	60a5      	str	r5, [r4, #8]
 800753e:	2d00      	cmp	r5, #0
 8007540:	bfa2      	ittt	ge
 8007542:	6821      	ldrge	r1, [r4, #0]
 8007544:	f021 0104 	bicge.w	r1, r1, #4
 8007548:	6021      	strge	r1, [r4, #0]
 800754a:	b90e      	cbnz	r6, 8007550 <_printf_i+0x118>
 800754c:	2d00      	cmp	r5, #0
 800754e:	d04d      	beq.n	80075ec <_printf_i+0x1b4>
 8007550:	4615      	mov	r5, r2
 8007552:	fbb6 f1f3 	udiv	r1, r6, r3
 8007556:	fb03 6711 	mls	r7, r3, r1, r6
 800755a:	5dc7      	ldrb	r7, [r0, r7]
 800755c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007560:	4637      	mov	r7, r6
 8007562:	42bb      	cmp	r3, r7
 8007564:	460e      	mov	r6, r1
 8007566:	d9f4      	bls.n	8007552 <_printf_i+0x11a>
 8007568:	2b08      	cmp	r3, #8
 800756a:	d10b      	bne.n	8007584 <_printf_i+0x14c>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	07de      	lsls	r6, r3, #31
 8007570:	d508      	bpl.n	8007584 <_printf_i+0x14c>
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	6861      	ldr	r1, [r4, #4]
 8007576:	4299      	cmp	r1, r3
 8007578:	bfde      	ittt	le
 800757a:	2330      	movle	r3, #48	; 0x30
 800757c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007580:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007584:	1b52      	subs	r2, r2, r5
 8007586:	6122      	str	r2, [r4, #16]
 8007588:	f8cd a000 	str.w	sl, [sp]
 800758c:	464b      	mov	r3, r9
 800758e:	aa03      	add	r2, sp, #12
 8007590:	4621      	mov	r1, r4
 8007592:	4640      	mov	r0, r8
 8007594:	f7ff fee2 	bl	800735c <_printf_common>
 8007598:	3001      	adds	r0, #1
 800759a:	d14c      	bne.n	8007636 <_printf_i+0x1fe>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a0:	b004      	add	sp, #16
 80075a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a6:	4835      	ldr	r0, [pc, #212]	; (800767c <_printf_i+0x244>)
 80075a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075ac:	6829      	ldr	r1, [r5, #0]
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075b4:	6029      	str	r1, [r5, #0]
 80075b6:	061d      	lsls	r5, r3, #24
 80075b8:	d514      	bpl.n	80075e4 <_printf_i+0x1ac>
 80075ba:	07df      	lsls	r7, r3, #31
 80075bc:	bf44      	itt	mi
 80075be:	f043 0320 	orrmi.w	r3, r3, #32
 80075c2:	6023      	strmi	r3, [r4, #0]
 80075c4:	b91e      	cbnz	r6, 80075ce <_printf_i+0x196>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f023 0320 	bic.w	r3, r3, #32
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	2310      	movs	r3, #16
 80075d0:	e7b0      	b.n	8007534 <_printf_i+0xfc>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	f043 0320 	orr.w	r3, r3, #32
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	2378      	movs	r3, #120	; 0x78
 80075dc:	4828      	ldr	r0, [pc, #160]	; (8007680 <_printf_i+0x248>)
 80075de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075e2:	e7e3      	b.n	80075ac <_printf_i+0x174>
 80075e4:	0659      	lsls	r1, r3, #25
 80075e6:	bf48      	it	mi
 80075e8:	b2b6      	uxthmi	r6, r6
 80075ea:	e7e6      	b.n	80075ba <_printf_i+0x182>
 80075ec:	4615      	mov	r5, r2
 80075ee:	e7bb      	b.n	8007568 <_printf_i+0x130>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	6826      	ldr	r6, [r4, #0]
 80075f4:	6961      	ldr	r1, [r4, #20]
 80075f6:	1d18      	adds	r0, r3, #4
 80075f8:	6028      	str	r0, [r5, #0]
 80075fa:	0635      	lsls	r5, r6, #24
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	d501      	bpl.n	8007604 <_printf_i+0x1cc>
 8007600:	6019      	str	r1, [r3, #0]
 8007602:	e002      	b.n	800760a <_printf_i+0x1d2>
 8007604:	0670      	lsls	r0, r6, #25
 8007606:	d5fb      	bpl.n	8007600 <_printf_i+0x1c8>
 8007608:	8019      	strh	r1, [r3, #0]
 800760a:	2300      	movs	r3, #0
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	4615      	mov	r5, r2
 8007610:	e7ba      	b.n	8007588 <_printf_i+0x150>
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	1d1a      	adds	r2, r3, #4
 8007616:	602a      	str	r2, [r5, #0]
 8007618:	681d      	ldr	r5, [r3, #0]
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	2100      	movs	r1, #0
 800761e:	4628      	mov	r0, r5
 8007620:	f7f8 fe6e 	bl	8000300 <memchr>
 8007624:	b108      	cbz	r0, 800762a <_printf_i+0x1f2>
 8007626:	1b40      	subs	r0, r0, r5
 8007628:	6060      	str	r0, [r4, #4]
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	2300      	movs	r3, #0
 8007630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007634:	e7a8      	b.n	8007588 <_printf_i+0x150>
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	462a      	mov	r2, r5
 800763a:	4649      	mov	r1, r9
 800763c:	4640      	mov	r0, r8
 800763e:	47d0      	blx	sl
 8007640:	3001      	adds	r0, #1
 8007642:	d0ab      	beq.n	800759c <_printf_i+0x164>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	079b      	lsls	r3, r3, #30
 8007648:	d413      	bmi.n	8007672 <_printf_i+0x23a>
 800764a:	68e0      	ldr	r0, [r4, #12]
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	4298      	cmp	r0, r3
 8007650:	bfb8      	it	lt
 8007652:	4618      	movlt	r0, r3
 8007654:	e7a4      	b.n	80075a0 <_printf_i+0x168>
 8007656:	2301      	movs	r3, #1
 8007658:	4632      	mov	r2, r6
 800765a:	4649      	mov	r1, r9
 800765c:	4640      	mov	r0, r8
 800765e:	47d0      	blx	sl
 8007660:	3001      	adds	r0, #1
 8007662:	d09b      	beq.n	800759c <_printf_i+0x164>
 8007664:	3501      	adds	r5, #1
 8007666:	68e3      	ldr	r3, [r4, #12]
 8007668:	9903      	ldr	r1, [sp, #12]
 800766a:	1a5b      	subs	r3, r3, r1
 800766c:	42ab      	cmp	r3, r5
 800766e:	dcf2      	bgt.n	8007656 <_printf_i+0x21e>
 8007670:	e7eb      	b.n	800764a <_printf_i+0x212>
 8007672:	2500      	movs	r5, #0
 8007674:	f104 0619 	add.w	r6, r4, #25
 8007678:	e7f5      	b.n	8007666 <_printf_i+0x22e>
 800767a:	bf00      	nop
 800767c:	08009b22 	.word	0x08009b22
 8007680:	08009b33 	.word	0x08009b33

08007684 <sniprintf>:
 8007684:	b40c      	push	{r2, r3}
 8007686:	b530      	push	{r4, r5, lr}
 8007688:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <sniprintf+0x64>)
 800768a:	1e0c      	subs	r4, r1, #0
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	b09d      	sub	sp, #116	; 0x74
 8007690:	da08      	bge.n	80076a4 <sniprintf+0x20>
 8007692:	238b      	movs	r3, #139	; 0x8b
 8007694:	602b      	str	r3, [r5, #0]
 8007696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800769a:	b01d      	add	sp, #116	; 0x74
 800769c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076a0:	b002      	add	sp, #8
 80076a2:	4770      	bx	lr
 80076a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076ac:	bf14      	ite	ne
 80076ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80076b2:	4623      	moveq	r3, r4
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076bc:	9002      	str	r0, [sp, #8]
 80076be:	9006      	str	r0, [sp, #24]
 80076c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076c6:	ab21      	add	r3, sp, #132	; 0x84
 80076c8:	a902      	add	r1, sp, #8
 80076ca:	4628      	mov	r0, r5
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	f001 faf9 	bl	8008cc4 <_svfiprintf_r>
 80076d2:	1c43      	adds	r3, r0, #1
 80076d4:	bfbc      	itt	lt
 80076d6:	238b      	movlt	r3, #139	; 0x8b
 80076d8:	602b      	strlt	r3, [r5, #0]
 80076da:	2c00      	cmp	r4, #0
 80076dc:	d0dd      	beq.n	800769a <sniprintf+0x16>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e7d9      	b.n	800769a <sniprintf+0x16>
 80076e6:	bf00      	nop
 80076e8:	24000010 	.word	0x24000010

080076ec <quorem>:
 80076ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	6903      	ldr	r3, [r0, #16]
 80076f2:	690c      	ldr	r4, [r1, #16]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	4607      	mov	r7, r0
 80076f8:	f2c0 8081 	blt.w	80077fe <quorem+0x112>
 80076fc:	3c01      	subs	r4, #1
 80076fe:	f101 0814 	add.w	r8, r1, #20
 8007702:	f100 0514 	add.w	r5, r0, #20
 8007706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007714:	3301      	adds	r3, #1
 8007716:	429a      	cmp	r2, r3
 8007718:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800771c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007720:	fbb2 f6f3 	udiv	r6, r2, r3
 8007724:	d331      	bcc.n	800778a <quorem+0x9e>
 8007726:	f04f 0e00 	mov.w	lr, #0
 800772a:	4640      	mov	r0, r8
 800772c:	46ac      	mov	ip, r5
 800772e:	46f2      	mov	sl, lr
 8007730:	f850 2b04 	ldr.w	r2, [r0], #4
 8007734:	b293      	uxth	r3, r2
 8007736:	fb06 e303 	mla	r3, r6, r3, lr
 800773a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800773e:	b29b      	uxth	r3, r3
 8007740:	ebaa 0303 	sub.w	r3, sl, r3
 8007744:	f8dc a000 	ldr.w	sl, [ip]
 8007748:	0c12      	lsrs	r2, r2, #16
 800774a:	fa13 f38a 	uxtah	r3, r3, sl
 800774e:	fb06 e202 	mla	r2, r6, r2, lr
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	9b00      	ldr	r3, [sp, #0]
 8007756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800775a:	b292      	uxth	r2, r2
 800775c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007764:	f8bd 3000 	ldrh.w	r3, [sp]
 8007768:	4581      	cmp	r9, r0
 800776a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800776e:	f84c 3b04 	str.w	r3, [ip], #4
 8007772:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007776:	d2db      	bcs.n	8007730 <quorem+0x44>
 8007778:	f855 300b 	ldr.w	r3, [r5, fp]
 800777c:	b92b      	cbnz	r3, 800778a <quorem+0x9e>
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	3b04      	subs	r3, #4
 8007782:	429d      	cmp	r5, r3
 8007784:	461a      	mov	r2, r3
 8007786:	d32e      	bcc.n	80077e6 <quorem+0xfa>
 8007788:	613c      	str	r4, [r7, #16]
 800778a:	4638      	mov	r0, r7
 800778c:	f001 f846 	bl	800881c <__mcmp>
 8007790:	2800      	cmp	r0, #0
 8007792:	db24      	blt.n	80077de <quorem+0xf2>
 8007794:	3601      	adds	r6, #1
 8007796:	4628      	mov	r0, r5
 8007798:	f04f 0c00 	mov.w	ip, #0
 800779c:	f858 2b04 	ldr.w	r2, [r8], #4
 80077a0:	f8d0 e000 	ldr.w	lr, [r0]
 80077a4:	b293      	uxth	r3, r2
 80077a6:	ebac 0303 	sub.w	r3, ip, r3
 80077aa:	0c12      	lsrs	r2, r2, #16
 80077ac:	fa13 f38e 	uxtah	r3, r3, lr
 80077b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077be:	45c1      	cmp	r9, r8
 80077c0:	f840 3b04 	str.w	r3, [r0], #4
 80077c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077c8:	d2e8      	bcs.n	800779c <quorem+0xb0>
 80077ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077d2:	b922      	cbnz	r2, 80077de <quorem+0xf2>
 80077d4:	3b04      	subs	r3, #4
 80077d6:	429d      	cmp	r5, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	d30a      	bcc.n	80077f2 <quorem+0x106>
 80077dc:	613c      	str	r4, [r7, #16]
 80077de:	4630      	mov	r0, r6
 80077e0:	b003      	add	sp, #12
 80077e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e6:	6812      	ldr	r2, [r2, #0]
 80077e8:	3b04      	subs	r3, #4
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	d1cc      	bne.n	8007788 <quorem+0x9c>
 80077ee:	3c01      	subs	r4, #1
 80077f0:	e7c7      	b.n	8007782 <quorem+0x96>
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	d1f0      	bne.n	80077dc <quorem+0xf0>
 80077fa:	3c01      	subs	r4, #1
 80077fc:	e7eb      	b.n	80077d6 <quorem+0xea>
 80077fe:	2000      	movs	r0, #0
 8007800:	e7ee      	b.n	80077e0 <quorem+0xf4>
 8007802:	0000      	movs	r0, r0
 8007804:	0000      	movs	r0, r0
	...

08007808 <_dtoa_r>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	ed2d 8b02 	vpush	{d8}
 8007810:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007812:	b091      	sub	sp, #68	; 0x44
 8007814:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007818:	ec59 8b10 	vmov	r8, r9, d0
 800781c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800781e:	9106      	str	r1, [sp, #24]
 8007820:	4606      	mov	r6, r0
 8007822:	9208      	str	r2, [sp, #32]
 8007824:	930c      	str	r3, [sp, #48]	; 0x30
 8007826:	b975      	cbnz	r5, 8007846 <_dtoa_r+0x3e>
 8007828:	2010      	movs	r0, #16
 800782a:	f000 fd5f 	bl	80082ec <malloc>
 800782e:	4602      	mov	r2, r0
 8007830:	6270      	str	r0, [r6, #36]	; 0x24
 8007832:	b920      	cbnz	r0, 800783e <_dtoa_r+0x36>
 8007834:	4baa      	ldr	r3, [pc, #680]	; (8007ae0 <_dtoa_r+0x2d8>)
 8007836:	21ea      	movs	r1, #234	; 0xea
 8007838:	48aa      	ldr	r0, [pc, #680]	; (8007ae4 <_dtoa_r+0x2dc>)
 800783a:	f001 fb53 	bl	8008ee4 <__assert_func>
 800783e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007842:	6005      	str	r5, [r0, #0]
 8007844:	60c5      	str	r5, [r0, #12]
 8007846:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007848:	6819      	ldr	r1, [r3, #0]
 800784a:	b151      	cbz	r1, 8007862 <_dtoa_r+0x5a>
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	604a      	str	r2, [r1, #4]
 8007850:	2301      	movs	r3, #1
 8007852:	4093      	lsls	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
 8007856:	4630      	mov	r0, r6
 8007858:	f000 fd9e 	bl	8008398 <_Bfree>
 800785c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f1b9 0300 	subs.w	r3, r9, #0
 8007866:	bfbb      	ittet	lt
 8007868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800786c:	9303      	strlt	r3, [sp, #12]
 800786e:	2300      	movge	r3, #0
 8007870:	2201      	movlt	r2, #1
 8007872:	bfac      	ite	ge
 8007874:	6023      	strge	r3, [r4, #0]
 8007876:	6022      	strlt	r2, [r4, #0]
 8007878:	4b9b      	ldr	r3, [pc, #620]	; (8007ae8 <_dtoa_r+0x2e0>)
 800787a:	9c03      	ldr	r4, [sp, #12]
 800787c:	43a3      	bics	r3, r4
 800787e:	d11c      	bne.n	80078ba <_dtoa_r+0xb2>
 8007880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007882:	f242 730f 	movw	r3, #9999	; 0x270f
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800788c:	ea53 0308 	orrs.w	r3, r3, r8
 8007890:	f000 84fd 	beq.w	800828e <_dtoa_r+0xa86>
 8007894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007896:	b963      	cbnz	r3, 80078b2 <_dtoa_r+0xaa>
 8007898:	4b94      	ldr	r3, [pc, #592]	; (8007aec <_dtoa_r+0x2e4>)
 800789a:	e01f      	b.n	80078dc <_dtoa_r+0xd4>
 800789c:	4b94      	ldr	r3, [pc, #592]	; (8007af0 <_dtoa_r+0x2e8>)
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	3308      	adds	r3, #8
 80078a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	9801      	ldr	r0, [sp, #4]
 80078a8:	b011      	add	sp, #68	; 0x44
 80078aa:	ecbd 8b02 	vpop	{d8}
 80078ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b2:	4b8e      	ldr	r3, [pc, #568]	; (8007aec <_dtoa_r+0x2e4>)
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	3303      	adds	r3, #3
 80078b8:	e7f3      	b.n	80078a2 <_dtoa_r+0x9a>
 80078ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80078be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c6:	d10b      	bne.n	80078e0 <_dtoa_r+0xd8>
 80078c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ca:	2301      	movs	r3, #1
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 84d9 	beq.w	8008288 <_dtoa_r+0xa80>
 80078d6:	4887      	ldr	r0, [pc, #540]	; (8007af4 <_dtoa_r+0x2ec>)
 80078d8:	6018      	str	r0, [r3, #0]
 80078da:	1e43      	subs	r3, r0, #1
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	e7e2      	b.n	80078a6 <_dtoa_r+0x9e>
 80078e0:	a90f      	add	r1, sp, #60	; 0x3c
 80078e2:	aa0e      	add	r2, sp, #56	; 0x38
 80078e4:	4630      	mov	r0, r6
 80078e6:	eeb0 0b48 	vmov.f64	d0, d8
 80078ea:	f001 f83d 	bl	8008968 <__d2b>
 80078ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80078f2:	4605      	mov	r5, r0
 80078f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078f6:	2900      	cmp	r1, #0
 80078f8:	d046      	beq.n	8007988 <_dtoa_r+0x180>
 80078fa:	ee18 4a90 	vmov	r4, s17
 80078fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007902:	ec53 2b18 	vmov	r2, r3, d8
 8007906:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800790a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800790e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007912:	2400      	movs	r4, #0
 8007914:	ec43 2b16 	vmov	d6, r2, r3
 8007918:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800791c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007ac8 <_dtoa_r+0x2c0>
 8007920:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007924:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007ad0 <_dtoa_r+0x2c8>
 8007928:	eea7 6b05 	vfma.f64	d6, d7, d5
 800792c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007ad8 <_dtoa_r+0x2d0>
 8007930:	ee07 1a90 	vmov	s15, r1
 8007934:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007938:	eeb0 7b46 	vmov.f64	d7, d6
 800793c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007940:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007944:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794c:	ee16 ba90 	vmov	fp, s13
 8007950:	940a      	str	r4, [sp, #40]	; 0x28
 8007952:	d508      	bpl.n	8007966 <_dtoa_r+0x15e>
 8007954:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007958:	eeb4 6b47 	vcmp.f64	d6, d7
 800795c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007960:	bf18      	it	ne
 8007962:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8007966:	f1bb 0f16 	cmp.w	fp, #22
 800796a:	d82f      	bhi.n	80079cc <_dtoa_r+0x1c4>
 800796c:	4b62      	ldr	r3, [pc, #392]	; (8007af8 <_dtoa_r+0x2f0>)
 800796e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007972:	ed93 7b00 	vldr	d7, [r3]
 8007976:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	d501      	bpl.n	8007984 <_dtoa_r+0x17c>
 8007980:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007984:	2300      	movs	r3, #0
 8007986:	e022      	b.n	80079ce <_dtoa_r+0x1c6>
 8007988:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800798a:	4401      	add	r1, r0
 800798c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007990:	2b20      	cmp	r3, #32
 8007992:	bfc1      	itttt	gt
 8007994:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007998:	fa04 f303 	lslgt.w	r3, r4, r3
 800799c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80079a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80079a4:	bfd6      	itet	le
 80079a6:	f1c3 0320 	rsble	r3, r3, #32
 80079aa:	ea43 0808 	orrgt.w	r8, r3, r8
 80079ae:	fa08 f803 	lslle.w	r8, r8, r3
 80079b2:	ee07 8a90 	vmov	s15, r8
 80079b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80079ba:	3901      	subs	r1, #1
 80079bc:	ee17 4a90 	vmov	r4, s15
 80079c0:	ec53 2b17 	vmov	r2, r3, d7
 80079c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80079c8:	2401      	movs	r4, #1
 80079ca:	e7a3      	b.n	8007914 <_dtoa_r+0x10c>
 80079cc:	2301      	movs	r3, #1
 80079ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d0:	1a43      	subs	r3, r0, r1
 80079d2:	1e5a      	subs	r2, r3, #1
 80079d4:	bf45      	ittet	mi
 80079d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80079da:	9304      	strmi	r3, [sp, #16]
 80079dc:	2300      	movpl	r3, #0
 80079de:	2300      	movmi	r3, #0
 80079e0:	9205      	str	r2, [sp, #20]
 80079e2:	bf54      	ite	pl
 80079e4:	9304      	strpl	r3, [sp, #16]
 80079e6:	9305      	strmi	r3, [sp, #20]
 80079e8:	f1bb 0f00 	cmp.w	fp, #0
 80079ec:	db18      	blt.n	8007a20 <_dtoa_r+0x218>
 80079ee:	9b05      	ldr	r3, [sp, #20]
 80079f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80079f4:	445b      	add	r3, fp
 80079f6:	9305      	str	r3, [sp, #20]
 80079f8:	2300      	movs	r3, #0
 80079fa:	9a06      	ldr	r2, [sp, #24]
 80079fc:	2a09      	cmp	r2, #9
 80079fe:	d849      	bhi.n	8007a94 <_dtoa_r+0x28c>
 8007a00:	2a05      	cmp	r2, #5
 8007a02:	bfc4      	itt	gt
 8007a04:	3a04      	subgt	r2, #4
 8007a06:	9206      	strgt	r2, [sp, #24]
 8007a08:	9a06      	ldr	r2, [sp, #24]
 8007a0a:	f1a2 0202 	sub.w	r2, r2, #2
 8007a0e:	bfcc      	ite	gt
 8007a10:	2400      	movgt	r4, #0
 8007a12:	2401      	movle	r4, #1
 8007a14:	2a03      	cmp	r2, #3
 8007a16:	d848      	bhi.n	8007aaa <_dtoa_r+0x2a2>
 8007a18:	e8df f002 	tbb	[pc, r2]
 8007a1c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	2200      	movs	r2, #0
 8007a24:	eba3 030b 	sub.w	r3, r3, fp
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a2c:	f1cb 0300 	rsb	r3, fp, #0
 8007a30:	e7e3      	b.n	80079fa <_dtoa_r+0x1f2>
 8007a32:	2200      	movs	r2, #0
 8007a34:	9207      	str	r2, [sp, #28]
 8007a36:	9a08      	ldr	r2, [sp, #32]
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	dc39      	bgt.n	8007ab0 <_dtoa_r+0x2a8>
 8007a3c:	f04f 0a01 	mov.w	sl, #1
 8007a40:	46d1      	mov	r9, sl
 8007a42:	4652      	mov	r2, sl
 8007a44:	f8cd a020 	str.w	sl, [sp, #32]
 8007a48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6079      	str	r1, [r7, #4]
 8007a4e:	2004      	movs	r0, #4
 8007a50:	f100 0c14 	add.w	ip, r0, #20
 8007a54:	4594      	cmp	ip, r2
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	d92f      	bls.n	8007aba <_dtoa_r+0x2b2>
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a5e:	f000 fc5b 	bl	8008318 <_Balloc>
 8007a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a64:	9001      	str	r0, [sp, #4]
 8007a66:	4602      	mov	r2, r0
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d149      	bne.n	8007b00 <_dtoa_r+0x2f8>
 8007a6c:	4b23      	ldr	r3, [pc, #140]	; (8007afc <_dtoa_r+0x2f4>)
 8007a6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a72:	e6e1      	b.n	8007838 <_dtoa_r+0x30>
 8007a74:	2201      	movs	r2, #1
 8007a76:	e7dd      	b.n	8007a34 <_dtoa_r+0x22c>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	9207      	str	r2, [sp, #28]
 8007a7c:	9a08      	ldr	r2, [sp, #32]
 8007a7e:	eb0b 0a02 	add.w	sl, fp, r2
 8007a82:	f10a 0901 	add.w	r9, sl, #1
 8007a86:	464a      	mov	r2, r9
 8007a88:	2a01      	cmp	r2, #1
 8007a8a:	bfb8      	it	lt
 8007a8c:	2201      	movlt	r2, #1
 8007a8e:	e7db      	b.n	8007a48 <_dtoa_r+0x240>
 8007a90:	2201      	movs	r2, #1
 8007a92:	e7f2      	b.n	8007a7a <_dtoa_r+0x272>
 8007a94:	2401      	movs	r4, #1
 8007a96:	2200      	movs	r2, #0
 8007a98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007a9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	46d1      	mov	r9, sl
 8007aa4:	2212      	movs	r2, #18
 8007aa6:	9108      	str	r1, [sp, #32]
 8007aa8:	e7ce      	b.n	8007a48 <_dtoa_r+0x240>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	9207      	str	r2, [sp, #28]
 8007aae:	e7f5      	b.n	8007a9c <_dtoa_r+0x294>
 8007ab0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ab4:	46d1      	mov	r9, sl
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	e7c6      	b.n	8007a48 <_dtoa_r+0x240>
 8007aba:	3101      	adds	r1, #1
 8007abc:	6079      	str	r1, [r7, #4]
 8007abe:	0040      	lsls	r0, r0, #1
 8007ac0:	e7c6      	b.n	8007a50 <_dtoa_r+0x248>
 8007ac2:	bf00      	nop
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	636f4361 	.word	0x636f4361
 8007acc:	3fd287a7 	.word	0x3fd287a7
 8007ad0:	8b60c8b3 	.word	0x8b60c8b3
 8007ad4:	3fc68a28 	.word	0x3fc68a28
 8007ad8:	509f79fb 	.word	0x509f79fb
 8007adc:	3fd34413 	.word	0x3fd34413
 8007ae0:	08009b51 	.word	0x08009b51
 8007ae4:	08009b68 	.word	0x08009b68
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	08009b4d 	.word	0x08009b4d
 8007af0:	08009b44 	.word	0x08009b44
 8007af4:	08009b21 	.word	0x08009b21
 8007af8:	08009c58 	.word	0x08009c58
 8007afc:	08009bc3 	.word	0x08009bc3
 8007b00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007b02:	9901      	ldr	r1, [sp, #4]
 8007b04:	6011      	str	r1, [r2, #0]
 8007b06:	f1b9 0f0e 	cmp.w	r9, #14
 8007b0a:	d86c      	bhi.n	8007be6 <_dtoa_r+0x3de>
 8007b0c:	2c00      	cmp	r4, #0
 8007b0e:	d06a      	beq.n	8007be6 <_dtoa_r+0x3de>
 8007b10:	f1bb 0f00 	cmp.w	fp, #0
 8007b14:	f340 80a0 	ble.w	8007c58 <_dtoa_r+0x450>
 8007b18:	49c1      	ldr	r1, [pc, #772]	; (8007e20 <_dtoa_r+0x618>)
 8007b1a:	f00b 020f 	and.w	r2, fp, #15
 8007b1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007b22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b26:	ed92 7b00 	vldr	d7, [r2]
 8007b2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007b2e:	f000 8087 	beq.w	8007c40 <_dtoa_r+0x438>
 8007b32:	4abc      	ldr	r2, [pc, #752]	; (8007e24 <_dtoa_r+0x61c>)
 8007b34:	ed92 6b08 	vldr	d6, [r2, #32]
 8007b38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007b3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b40:	f001 010f 	and.w	r1, r1, #15
 8007b44:	2203      	movs	r2, #3
 8007b46:	48b7      	ldr	r0, [pc, #732]	; (8007e24 <_dtoa_r+0x61c>)
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	d17b      	bne.n	8007c44 <_dtoa_r+0x43c>
 8007b4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b5a:	2900      	cmp	r1, #0
 8007b5c:	f000 80a2 	beq.w	8007ca4 <_dtoa_r+0x49c>
 8007b60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007b64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b70:	f140 8098 	bpl.w	8007ca4 <_dtoa_r+0x49c>
 8007b74:	f1b9 0f00 	cmp.w	r9, #0
 8007b78:	f000 8094 	beq.w	8007ca4 <_dtoa_r+0x49c>
 8007b7c:	f1ba 0f00 	cmp.w	sl, #0
 8007b80:	dd2f      	ble.n	8007be2 <_dtoa_r+0x3da>
 8007b82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007b86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b8e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007b92:	3201      	adds	r2, #1
 8007b94:	4650      	mov	r0, sl
 8007b96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007b9e:	ee07 2a90 	vmov	s15, r2
 8007ba2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ba6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007baa:	ee15 4a90 	vmov	r4, s11
 8007bae:	ec52 1b15 	vmov	r1, r2, d5
 8007bb2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d177      	bne.n	8007caa <_dtoa_r+0x4a2>
 8007bba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007bbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007bc2:	ec42 1b17 	vmov	d7, r1, r2
 8007bc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bce:	f300 8263 	bgt.w	8008098 <_dtoa_r+0x890>
 8007bd2:	eeb1 7b47 	vneg.f64	d7, d7
 8007bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bde:	f100 8258 	bmi.w	8008092 <_dtoa_r+0x88a>
 8007be2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	f2c0 811d 	blt.w	8007e28 <_dtoa_r+0x620>
 8007bee:	f1bb 0f0e 	cmp.w	fp, #14
 8007bf2:	f300 8119 	bgt.w	8007e28 <_dtoa_r+0x620>
 8007bf6:	4b8a      	ldr	r3, [pc, #552]	; (8007e20 <_dtoa_r+0x618>)
 8007bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bfc:	ed93 6b00 	vldr	d6, [r3]
 8007c00:	9b08      	ldr	r3, [sp, #32]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f280 80b7 	bge.w	8007d76 <_dtoa_r+0x56e>
 8007c08:	f1b9 0f00 	cmp.w	r9, #0
 8007c0c:	f300 80b3 	bgt.w	8007d76 <_dtoa_r+0x56e>
 8007c10:	f040 823f 	bne.w	8008092 <_dtoa_r+0x88a>
 8007c14:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c28:	464c      	mov	r4, r9
 8007c2a:	464f      	mov	r7, r9
 8007c2c:	f280 8215 	bge.w	800805a <_dtoa_r+0x852>
 8007c30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c34:	2331      	movs	r3, #49	; 0x31
 8007c36:	f808 3b01 	strb.w	r3, [r8], #1
 8007c3a:	f10b 0b01 	add.w	fp, fp, #1
 8007c3e:	e211      	b.n	8008064 <_dtoa_r+0x85c>
 8007c40:	2202      	movs	r2, #2
 8007c42:	e780      	b.n	8007b46 <_dtoa_r+0x33e>
 8007c44:	07cc      	lsls	r4, r1, #31
 8007c46:	d504      	bpl.n	8007c52 <_dtoa_r+0x44a>
 8007c48:	ed90 6b00 	vldr	d6, [r0]
 8007c4c:	3201      	adds	r2, #1
 8007c4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c52:	1049      	asrs	r1, r1, #1
 8007c54:	3008      	adds	r0, #8
 8007c56:	e777      	b.n	8007b48 <_dtoa_r+0x340>
 8007c58:	d022      	beq.n	8007ca0 <_dtoa_r+0x498>
 8007c5a:	f1cb 0100 	rsb	r1, fp, #0
 8007c5e:	4a70      	ldr	r2, [pc, #448]	; (8007e20 <_dtoa_r+0x618>)
 8007c60:	f001 000f 	and.w	r0, r1, #15
 8007c64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007c68:	ed92 7b00 	vldr	d7, [r2]
 8007c6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007c70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c74:	486b      	ldr	r0, [pc, #428]	; (8007e24 <_dtoa_r+0x61c>)
 8007c76:	1109      	asrs	r1, r1, #4
 8007c78:	2400      	movs	r4, #0
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	b929      	cbnz	r1, 8007c8a <_dtoa_r+0x482>
 8007c7e:	2c00      	cmp	r4, #0
 8007c80:	f43f af6a 	beq.w	8007b58 <_dtoa_r+0x350>
 8007c84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c88:	e766      	b.n	8007b58 <_dtoa_r+0x350>
 8007c8a:	07cf      	lsls	r7, r1, #31
 8007c8c:	d505      	bpl.n	8007c9a <_dtoa_r+0x492>
 8007c8e:	ed90 6b00 	vldr	d6, [r0]
 8007c92:	3201      	adds	r2, #1
 8007c94:	2401      	movs	r4, #1
 8007c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c9a:	1049      	asrs	r1, r1, #1
 8007c9c:	3008      	adds	r0, #8
 8007c9e:	e7ed      	b.n	8007c7c <_dtoa_r+0x474>
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	e759      	b.n	8007b58 <_dtoa_r+0x350>
 8007ca4:	465f      	mov	r7, fp
 8007ca6:	4648      	mov	r0, r9
 8007ca8:	e775      	b.n	8007b96 <_dtoa_r+0x38e>
 8007caa:	ec42 1b17 	vmov	d7, r1, r2
 8007cae:	4a5c      	ldr	r2, [pc, #368]	; (8007e20 <_dtoa_r+0x618>)
 8007cb0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007cb4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007cb8:	9a01      	ldr	r2, [sp, #4]
 8007cba:	1814      	adds	r4, r2, r0
 8007cbc:	9a07      	ldr	r2, [sp, #28]
 8007cbe:	b352      	cbz	r2, 8007d16 <_dtoa_r+0x50e>
 8007cc0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007cc4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007cc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ccc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007cd0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007cd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007cd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007cdc:	ee14 2a90 	vmov	r2, s9
 8007ce0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ce4:	3230      	adds	r2, #48	; 0x30
 8007ce6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007cea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf2:	f808 2b01 	strb.w	r2, [r8], #1
 8007cf6:	d439      	bmi.n	8007d6c <_dtoa_r+0x564>
 8007cf8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007cfc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d04:	d472      	bmi.n	8007dec <_dtoa_r+0x5e4>
 8007d06:	45a0      	cmp	r8, r4
 8007d08:	f43f af6b 	beq.w	8007be2 <_dtoa_r+0x3da>
 8007d0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007d10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d14:	e7e0      	b.n	8007cd8 <_dtoa_r+0x4d0>
 8007d16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d1e:	4621      	mov	r1, r4
 8007d20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d28:	ee14 2a90 	vmov	r2, s9
 8007d2c:	3230      	adds	r2, #48	; 0x30
 8007d2e:	f808 2b01 	strb.w	r2, [r8], #1
 8007d32:	45a0      	cmp	r8, r4
 8007d34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d3c:	d118      	bne.n	8007d70 <_dtoa_r+0x568>
 8007d3e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007d42:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007d46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4e:	dc4d      	bgt.n	8007dec <_dtoa_r+0x5e4>
 8007d50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5c:	f57f af41 	bpl.w	8007be2 <_dtoa_r+0x3da>
 8007d60:	4688      	mov	r8, r1
 8007d62:	3901      	subs	r1, #1
 8007d64:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007d68:	2b30      	cmp	r3, #48	; 0x30
 8007d6a:	d0f9      	beq.n	8007d60 <_dtoa_r+0x558>
 8007d6c:	46bb      	mov	fp, r7
 8007d6e:	e02a      	b.n	8007dc6 <_dtoa_r+0x5be>
 8007d70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d74:	e7d6      	b.n	8007d24 <_dtoa_r+0x51c>
 8007d76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d7a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007d7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007d86:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007d8a:	ee15 3a10 	vmov	r3, s10
 8007d8e:	3330      	adds	r3, #48	; 0x30
 8007d90:	f808 3b01 	strb.w	r3, [r8], #1
 8007d94:	9b01      	ldr	r3, [sp, #4]
 8007d96:	eba8 0303 	sub.w	r3, r8, r3
 8007d9a:	4599      	cmp	r9, r3
 8007d9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007da0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007da4:	d133      	bne.n	8007e0e <_dtoa_r+0x606>
 8007da6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007daa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db2:	dc1a      	bgt.n	8007dea <_dtoa_r+0x5e2>
 8007db4:	eeb4 7b46 	vcmp.f64	d7, d6
 8007db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbc:	d103      	bne.n	8007dc6 <_dtoa_r+0x5be>
 8007dbe:	ee15 3a10 	vmov	r3, s10
 8007dc2:	07d9      	lsls	r1, r3, #31
 8007dc4:	d411      	bmi.n	8007dea <_dtoa_r+0x5e2>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 fae5 	bl	8008398 <_Bfree>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dd2:	f888 3000 	strb.w	r3, [r8]
 8007dd6:	f10b 0301 	add.w	r3, fp, #1
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f43f ad61 	beq.w	80078a6 <_dtoa_r+0x9e>
 8007de4:	f8c3 8000 	str.w	r8, [r3]
 8007de8:	e55d      	b.n	80078a6 <_dtoa_r+0x9e>
 8007dea:	465f      	mov	r7, fp
 8007dec:	4643      	mov	r3, r8
 8007dee:	4698      	mov	r8, r3
 8007df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007df4:	2a39      	cmp	r2, #57	; 0x39
 8007df6:	d106      	bne.n	8007e06 <_dtoa_r+0x5fe>
 8007df8:	9a01      	ldr	r2, [sp, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d1f7      	bne.n	8007dee <_dtoa_r+0x5e6>
 8007dfe:	9901      	ldr	r1, [sp, #4]
 8007e00:	2230      	movs	r2, #48	; 0x30
 8007e02:	3701      	adds	r7, #1
 8007e04:	700a      	strb	r2, [r1, #0]
 8007e06:	781a      	ldrb	r2, [r3, #0]
 8007e08:	3201      	adds	r2, #1
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e7ae      	b.n	8007d6c <_dtoa_r+0x564>
 8007e0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	d1b2      	bne.n	8007d82 <_dtoa_r+0x57a>
 8007e1c:	e7d3      	b.n	8007dc6 <_dtoa_r+0x5be>
 8007e1e:	bf00      	nop
 8007e20:	08009c58 	.word	0x08009c58
 8007e24:	08009c30 	.word	0x08009c30
 8007e28:	9907      	ldr	r1, [sp, #28]
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	f000 80d0 	beq.w	8007fd0 <_dtoa_r+0x7c8>
 8007e30:	9906      	ldr	r1, [sp, #24]
 8007e32:	2901      	cmp	r1, #1
 8007e34:	f300 80b4 	bgt.w	8007fa0 <_dtoa_r+0x798>
 8007e38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e3a:	2900      	cmp	r1, #0
 8007e3c:	f000 80ac 	beq.w	8007f98 <_dtoa_r+0x790>
 8007e40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e48:	461c      	mov	r4, r3
 8007e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	4413      	add	r3, r2
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	9b05      	ldr	r3, [sp, #20]
 8007e54:	2101      	movs	r1, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	4630      	mov	r0, r6
 8007e5a:	9305      	str	r3, [sp, #20]
 8007e5c:	f000 fb54 	bl	8008508 <__i2b>
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	4607      	mov	r7, r0
 8007e64:	f1b8 0f00 	cmp.w	r8, #0
 8007e68:	dd0d      	ble.n	8007e86 <_dtoa_r+0x67e>
 8007e6a:	9a05      	ldr	r2, [sp, #20]
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	dd0a      	ble.n	8007e86 <_dtoa_r+0x67e>
 8007e70:	4542      	cmp	r2, r8
 8007e72:	9904      	ldr	r1, [sp, #16]
 8007e74:	bfa8      	it	ge
 8007e76:	4642      	movge	r2, r8
 8007e78:	1a89      	subs	r1, r1, r2
 8007e7a:	9104      	str	r1, [sp, #16]
 8007e7c:	9905      	ldr	r1, [sp, #20]
 8007e7e:	eba8 0802 	sub.w	r8, r8, r2
 8007e82:	1a8a      	subs	r2, r1, r2
 8007e84:	9205      	str	r2, [sp, #20]
 8007e86:	b303      	cbz	r3, 8007eca <_dtoa_r+0x6c2>
 8007e88:	9a07      	ldr	r2, [sp, #28]
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	f000 80a5 	beq.w	8007fda <_dtoa_r+0x7d2>
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	dd13      	ble.n	8007ebc <_dtoa_r+0x6b4>
 8007e94:	4639      	mov	r1, r7
 8007e96:	4622      	mov	r2, r4
 8007e98:	4630      	mov	r0, r6
 8007e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e9c:	f000 fbf4 	bl	8008688 <__pow5mult>
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 fb44 	bl	8008534 <__multiply>
 8007eac:	4629      	mov	r1, r5
 8007eae:	900a      	str	r0, [sp, #40]	; 0x28
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 fa71 	bl	8008398 <_Bfree>
 8007eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eba:	4615      	mov	r5, r2
 8007ebc:	1b1a      	subs	r2, r3, r4
 8007ebe:	d004      	beq.n	8007eca <_dtoa_r+0x6c2>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 fbe0 	bl	8008688 <__pow5mult>
 8007ec8:	4605      	mov	r5, r0
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 fb1b 	bl	8008508 <__i2b>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	f340 8081 	ble.w	8007fde <_dtoa_r+0x7d6>
 8007edc:	461a      	mov	r2, r3
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 fbd1 	bl	8008688 <__pow5mult>
 8007ee6:	9b06      	ldr	r3, [sp, #24]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	4604      	mov	r4, r0
 8007eec:	dd7a      	ble.n	8007fe4 <_dtoa_r+0x7dc>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef2:	6922      	ldr	r2, [r4, #16]
 8007ef4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007ef8:	6910      	ldr	r0, [r2, #16]
 8007efa:	f000 fab5 	bl	8008468 <__hi0bits>
 8007efe:	f1c0 0020 	rsb	r0, r0, #32
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	4418      	add	r0, r3
 8007f06:	f010 001f 	ands.w	r0, r0, #31
 8007f0a:	f000 808c 	beq.w	8008026 <_dtoa_r+0x81e>
 8007f0e:	f1c0 0220 	rsb	r2, r0, #32
 8007f12:	2a04      	cmp	r2, #4
 8007f14:	f340 8085 	ble.w	8008022 <_dtoa_r+0x81a>
 8007f18:	f1c0 001c 	rsb	r0, r0, #28
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	4403      	add	r3, r0
 8007f20:	9304      	str	r3, [sp, #16]
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	4403      	add	r3, r0
 8007f26:	4480      	add	r8, r0
 8007f28:	9305      	str	r3, [sp, #20]
 8007f2a:	9b04      	ldr	r3, [sp, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd05      	ble.n	8007f3c <_dtoa_r+0x734>
 8007f30:	4629      	mov	r1, r5
 8007f32:	461a      	mov	r2, r3
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 fc01 	bl	800873c <__lshift>
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	9b05      	ldr	r3, [sp, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	dd05      	ble.n	8007f4e <_dtoa_r+0x746>
 8007f42:	4621      	mov	r1, r4
 8007f44:	461a      	mov	r2, r3
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 fbf8 	bl	800873c <__lshift>
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d06a      	beq.n	800802a <_dtoa_r+0x822>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 fc60 	bl	800881c <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	da64      	bge.n	800802a <_dtoa_r+0x822>
 8007f60:	2300      	movs	r3, #0
 8007f62:	4629      	mov	r1, r5
 8007f64:	220a      	movs	r2, #10
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 fa38 	bl	80083dc <__multadd>
 8007f6c:	9b07      	ldr	r3, [sp, #28]
 8007f6e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007f72:	4605      	mov	r5, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8191 	beq.w	800829c <_dtoa_r+0xa94>
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	220a      	movs	r2, #10
 8007f80:	4630      	mov	r0, r6
 8007f82:	f000 fa2b 	bl	80083dc <__multadd>
 8007f86:	f1ba 0f00 	cmp.w	sl, #0
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	f300 808d 	bgt.w	80080aa <_dtoa_r+0x8a2>
 8007f90:	9b06      	ldr	r3, [sp, #24]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	dc50      	bgt.n	8008038 <_dtoa_r+0x830>
 8007f96:	e088      	b.n	80080aa <_dtoa_r+0x8a2>
 8007f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f9e:	e751      	b.n	8007e44 <_dtoa_r+0x63c>
 8007fa0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	bfbf      	itttt	lt
 8007fa8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007faa:	1ae3      	sublt	r3, r4, r3
 8007fac:	18d2      	addlt	r2, r2, r3
 8007fae:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007fb0:	bfb6      	itet	lt
 8007fb2:	4623      	movlt	r3, r4
 8007fb4:	1b1c      	subge	r4, r3, r4
 8007fb6:	2400      	movlt	r4, #0
 8007fb8:	f1b9 0f00 	cmp.w	r9, #0
 8007fbc:	bfb5      	itete	lt
 8007fbe:	9a04      	ldrlt	r2, [sp, #16]
 8007fc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007fc4:	eba2 0809 	sublt.w	r8, r2, r9
 8007fc8:	464a      	movge	r2, r9
 8007fca:	bfb8      	it	lt
 8007fcc:	2200      	movlt	r2, #0
 8007fce:	e73c      	b.n	8007e4a <_dtoa_r+0x642>
 8007fd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007fd4:	9f07      	ldr	r7, [sp, #28]
 8007fd6:	461c      	mov	r4, r3
 8007fd8:	e744      	b.n	8007e64 <_dtoa_r+0x65c>
 8007fda:	461a      	mov	r2, r3
 8007fdc:	e770      	b.n	8007ec0 <_dtoa_r+0x6b8>
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	dc18      	bgt.n	8008016 <_dtoa_r+0x80e>
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	b9b3      	cbnz	r3, 8008016 <_dtoa_r+0x80e>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007fee:	b9a2      	cbnz	r2, 800801a <_dtoa_r+0x812>
 8007ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ff4:	0d12      	lsrs	r2, r2, #20
 8007ff6:	0512      	lsls	r2, r2, #20
 8007ff8:	b18a      	cbz	r2, 800801e <_dtoa_r+0x816>
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	9b05      	ldr	r3, [sp, #20]
 8008002:	3301      	adds	r3, #1
 8008004:	9305      	str	r3, [sp, #20]
 8008006:	2301      	movs	r3, #1
 8008008:	930a      	str	r3, [sp, #40]	; 0x28
 800800a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f af70 	bne.w	8007ef2 <_dtoa_r+0x6ea>
 8008012:	2001      	movs	r0, #1
 8008014:	e775      	b.n	8007f02 <_dtoa_r+0x6fa>
 8008016:	2300      	movs	r3, #0
 8008018:	e7f6      	b.n	8008008 <_dtoa_r+0x800>
 800801a:	9b02      	ldr	r3, [sp, #8]
 800801c:	e7f4      	b.n	8008008 <_dtoa_r+0x800>
 800801e:	920a      	str	r2, [sp, #40]	; 0x28
 8008020:	e7f3      	b.n	800800a <_dtoa_r+0x802>
 8008022:	d082      	beq.n	8007f2a <_dtoa_r+0x722>
 8008024:	4610      	mov	r0, r2
 8008026:	301c      	adds	r0, #28
 8008028:	e778      	b.n	8007f1c <_dtoa_r+0x714>
 800802a:	f1b9 0f00 	cmp.w	r9, #0
 800802e:	dc37      	bgt.n	80080a0 <_dtoa_r+0x898>
 8008030:	9b06      	ldr	r3, [sp, #24]
 8008032:	2b02      	cmp	r3, #2
 8008034:	dd34      	ble.n	80080a0 <_dtoa_r+0x898>
 8008036:	46ca      	mov	sl, r9
 8008038:	f1ba 0f00 	cmp.w	sl, #0
 800803c:	d10d      	bne.n	800805a <_dtoa_r+0x852>
 800803e:	4621      	mov	r1, r4
 8008040:	4653      	mov	r3, sl
 8008042:	2205      	movs	r2, #5
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f9c9 	bl	80083dc <__multadd>
 800804a:	4601      	mov	r1, r0
 800804c:	4604      	mov	r4, r0
 800804e:	4628      	mov	r0, r5
 8008050:	f000 fbe4 	bl	800881c <__mcmp>
 8008054:	2800      	cmp	r0, #0
 8008056:	f73f adeb 	bgt.w	8007c30 <_dtoa_r+0x428>
 800805a:	9b08      	ldr	r3, [sp, #32]
 800805c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008060:	ea6f 0b03 	mvn.w	fp, r3
 8008064:	f04f 0900 	mov.w	r9, #0
 8008068:	4621      	mov	r1, r4
 800806a:	4630      	mov	r0, r6
 800806c:	f000 f994 	bl	8008398 <_Bfree>
 8008070:	2f00      	cmp	r7, #0
 8008072:	f43f aea8 	beq.w	8007dc6 <_dtoa_r+0x5be>
 8008076:	f1b9 0f00 	cmp.w	r9, #0
 800807a:	d005      	beq.n	8008088 <_dtoa_r+0x880>
 800807c:	45b9      	cmp	r9, r7
 800807e:	d003      	beq.n	8008088 <_dtoa_r+0x880>
 8008080:	4649      	mov	r1, r9
 8008082:	4630      	mov	r0, r6
 8008084:	f000 f988 	bl	8008398 <_Bfree>
 8008088:	4639      	mov	r1, r7
 800808a:	4630      	mov	r0, r6
 800808c:	f000 f984 	bl	8008398 <_Bfree>
 8008090:	e699      	b.n	8007dc6 <_dtoa_r+0x5be>
 8008092:	2400      	movs	r4, #0
 8008094:	4627      	mov	r7, r4
 8008096:	e7e0      	b.n	800805a <_dtoa_r+0x852>
 8008098:	46bb      	mov	fp, r7
 800809a:	4604      	mov	r4, r0
 800809c:	4607      	mov	r7, r0
 800809e:	e5c7      	b.n	8007c30 <_dtoa_r+0x428>
 80080a0:	9b07      	ldr	r3, [sp, #28]
 80080a2:	46ca      	mov	sl, r9
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8100 	beq.w	80082aa <_dtoa_r+0xaa2>
 80080aa:	f1b8 0f00 	cmp.w	r8, #0
 80080ae:	dd05      	ble.n	80080bc <_dtoa_r+0x8b4>
 80080b0:	4639      	mov	r1, r7
 80080b2:	4642      	mov	r2, r8
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 fb41 	bl	800873c <__lshift>
 80080ba:	4607      	mov	r7, r0
 80080bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d05d      	beq.n	800817e <_dtoa_r+0x976>
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4630      	mov	r0, r6
 80080c6:	f000 f927 	bl	8008318 <_Balloc>
 80080ca:	4680      	mov	r8, r0
 80080cc:	b928      	cbnz	r0, 80080da <_dtoa_r+0x8d2>
 80080ce:	4b82      	ldr	r3, [pc, #520]	; (80082d8 <_dtoa_r+0xad0>)
 80080d0:	4602      	mov	r2, r0
 80080d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080d6:	f7ff bbaf 	b.w	8007838 <_dtoa_r+0x30>
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	3202      	adds	r2, #2
 80080de:	0092      	lsls	r2, r2, #2
 80080e0:	f107 010c 	add.w	r1, r7, #12
 80080e4:	300c      	adds	r0, #12
 80080e6:	f000 f909 	bl	80082fc <memcpy>
 80080ea:	2201      	movs	r2, #1
 80080ec:	4641      	mov	r1, r8
 80080ee:	4630      	mov	r0, r6
 80080f0:	f000 fb24 	bl	800873c <__lshift>
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	3301      	adds	r3, #1
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	4453      	add	r3, sl
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	9b02      	ldr	r3, [sp, #8]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	46b9      	mov	r9, r7
 8008108:	9307      	str	r3, [sp, #28]
 800810a:	4607      	mov	r7, r0
 800810c:	9b04      	ldr	r3, [sp, #16]
 800810e:	4621      	mov	r1, r4
 8008110:	3b01      	subs	r3, #1
 8008112:	4628      	mov	r0, r5
 8008114:	9302      	str	r3, [sp, #8]
 8008116:	f7ff fae9 	bl	80076ec <quorem>
 800811a:	4603      	mov	r3, r0
 800811c:	3330      	adds	r3, #48	; 0x30
 800811e:	9005      	str	r0, [sp, #20]
 8008120:	4649      	mov	r1, r9
 8008122:	4628      	mov	r0, r5
 8008124:	9309      	str	r3, [sp, #36]	; 0x24
 8008126:	f000 fb79 	bl	800881c <__mcmp>
 800812a:	463a      	mov	r2, r7
 800812c:	4682      	mov	sl, r0
 800812e:	4621      	mov	r1, r4
 8008130:	4630      	mov	r0, r6
 8008132:	f000 fb8f 	bl	8008854 <__mdiff>
 8008136:	68c2      	ldr	r2, [r0, #12]
 8008138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813a:	4680      	mov	r8, r0
 800813c:	bb0a      	cbnz	r2, 8008182 <_dtoa_r+0x97a>
 800813e:	4601      	mov	r1, r0
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fb6b 	bl	800881c <__mcmp>
 8008146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008148:	4602      	mov	r2, r0
 800814a:	4641      	mov	r1, r8
 800814c:	4630      	mov	r0, r6
 800814e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008152:	f000 f921 	bl	8008398 <_Bfree>
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800815a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800815e:	ea43 0102 	orr.w	r1, r3, r2
 8008162:	9b07      	ldr	r3, [sp, #28]
 8008164:	430b      	orrs	r3, r1
 8008166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008168:	d10d      	bne.n	8008186 <_dtoa_r+0x97e>
 800816a:	2b39      	cmp	r3, #57	; 0x39
 800816c:	d029      	beq.n	80081c2 <_dtoa_r+0x9ba>
 800816e:	f1ba 0f00 	cmp.w	sl, #0
 8008172:	dd01      	ble.n	8008178 <_dtoa_r+0x970>
 8008174:	9b05      	ldr	r3, [sp, #20]
 8008176:	3331      	adds	r3, #49	; 0x31
 8008178:	9a02      	ldr	r2, [sp, #8]
 800817a:	7013      	strb	r3, [r2, #0]
 800817c:	e774      	b.n	8008068 <_dtoa_r+0x860>
 800817e:	4638      	mov	r0, r7
 8008180:	e7b8      	b.n	80080f4 <_dtoa_r+0x8ec>
 8008182:	2201      	movs	r2, #1
 8008184:	e7e1      	b.n	800814a <_dtoa_r+0x942>
 8008186:	f1ba 0f00 	cmp.w	sl, #0
 800818a:	db06      	blt.n	800819a <_dtoa_r+0x992>
 800818c:	9906      	ldr	r1, [sp, #24]
 800818e:	ea41 0a0a 	orr.w	sl, r1, sl
 8008192:	9907      	ldr	r1, [sp, #28]
 8008194:	ea5a 0101 	orrs.w	r1, sl, r1
 8008198:	d120      	bne.n	80081dc <_dtoa_r+0x9d4>
 800819a:	2a00      	cmp	r2, #0
 800819c:	ddec      	ble.n	8008178 <_dtoa_r+0x970>
 800819e:	4629      	mov	r1, r5
 80081a0:	2201      	movs	r2, #1
 80081a2:	4630      	mov	r0, r6
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	f000 fac9 	bl	800873c <__lshift>
 80081aa:	4621      	mov	r1, r4
 80081ac:	4605      	mov	r5, r0
 80081ae:	f000 fb35 	bl	800881c <__mcmp>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	9b04      	ldr	r3, [sp, #16]
 80081b6:	dc02      	bgt.n	80081be <_dtoa_r+0x9b6>
 80081b8:	d1de      	bne.n	8008178 <_dtoa_r+0x970>
 80081ba:	07da      	lsls	r2, r3, #31
 80081bc:	d5dc      	bpl.n	8008178 <_dtoa_r+0x970>
 80081be:	2b39      	cmp	r3, #57	; 0x39
 80081c0:	d1d8      	bne.n	8008174 <_dtoa_r+0x96c>
 80081c2:	9a02      	ldr	r2, [sp, #8]
 80081c4:	2339      	movs	r3, #57	; 0x39
 80081c6:	7013      	strb	r3, [r2, #0]
 80081c8:	4643      	mov	r3, r8
 80081ca:	4698      	mov	r8, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80081d2:	2a39      	cmp	r2, #57	; 0x39
 80081d4:	d051      	beq.n	800827a <_dtoa_r+0xa72>
 80081d6:	3201      	adds	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e745      	b.n	8008068 <_dtoa_r+0x860>
 80081dc:	2a00      	cmp	r2, #0
 80081de:	dd03      	ble.n	80081e8 <_dtoa_r+0x9e0>
 80081e0:	2b39      	cmp	r3, #57	; 0x39
 80081e2:	d0ee      	beq.n	80081c2 <_dtoa_r+0x9ba>
 80081e4:	3301      	adds	r3, #1
 80081e6:	e7c7      	b.n	8008178 <_dtoa_r+0x970>
 80081e8:	9a04      	ldr	r2, [sp, #16]
 80081ea:	9908      	ldr	r1, [sp, #32]
 80081ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081f0:	428a      	cmp	r2, r1
 80081f2:	d02b      	beq.n	800824c <_dtoa_r+0xa44>
 80081f4:	4629      	mov	r1, r5
 80081f6:	2300      	movs	r3, #0
 80081f8:	220a      	movs	r2, #10
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 f8ee 	bl	80083dc <__multadd>
 8008200:	45b9      	cmp	r9, r7
 8008202:	4605      	mov	r5, r0
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	f04f 020a 	mov.w	r2, #10
 800820c:	4649      	mov	r1, r9
 800820e:	4630      	mov	r0, r6
 8008210:	d107      	bne.n	8008222 <_dtoa_r+0xa1a>
 8008212:	f000 f8e3 	bl	80083dc <__multadd>
 8008216:	4681      	mov	r9, r0
 8008218:	4607      	mov	r7, r0
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	3301      	adds	r3, #1
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	e774      	b.n	800810c <_dtoa_r+0x904>
 8008222:	f000 f8db 	bl	80083dc <__multadd>
 8008226:	4639      	mov	r1, r7
 8008228:	4681      	mov	r9, r0
 800822a:	2300      	movs	r3, #0
 800822c:	220a      	movs	r2, #10
 800822e:	4630      	mov	r0, r6
 8008230:	f000 f8d4 	bl	80083dc <__multadd>
 8008234:	4607      	mov	r7, r0
 8008236:	e7f0      	b.n	800821a <_dtoa_r+0xa12>
 8008238:	f1ba 0f00 	cmp.w	sl, #0
 800823c:	9a01      	ldr	r2, [sp, #4]
 800823e:	bfcc      	ite	gt
 8008240:	46d0      	movgt	r8, sl
 8008242:	f04f 0801 	movle.w	r8, #1
 8008246:	4490      	add	r8, r2
 8008248:	f04f 0900 	mov.w	r9, #0
 800824c:	4629      	mov	r1, r5
 800824e:	2201      	movs	r2, #1
 8008250:	4630      	mov	r0, r6
 8008252:	9302      	str	r3, [sp, #8]
 8008254:	f000 fa72 	bl	800873c <__lshift>
 8008258:	4621      	mov	r1, r4
 800825a:	4605      	mov	r5, r0
 800825c:	f000 fade 	bl	800881c <__mcmp>
 8008260:	2800      	cmp	r0, #0
 8008262:	dcb1      	bgt.n	80081c8 <_dtoa_r+0x9c0>
 8008264:	d102      	bne.n	800826c <_dtoa_r+0xa64>
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	07db      	lsls	r3, r3, #31
 800826a:	d4ad      	bmi.n	80081c8 <_dtoa_r+0x9c0>
 800826c:	4643      	mov	r3, r8
 800826e:	4698      	mov	r8, r3
 8008270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008274:	2a30      	cmp	r2, #48	; 0x30
 8008276:	d0fa      	beq.n	800826e <_dtoa_r+0xa66>
 8008278:	e6f6      	b.n	8008068 <_dtoa_r+0x860>
 800827a:	9a01      	ldr	r2, [sp, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d1a4      	bne.n	80081ca <_dtoa_r+0x9c2>
 8008280:	f10b 0b01 	add.w	fp, fp, #1
 8008284:	2331      	movs	r3, #49	; 0x31
 8008286:	e778      	b.n	800817a <_dtoa_r+0x972>
 8008288:	4b14      	ldr	r3, [pc, #80]	; (80082dc <_dtoa_r+0xad4>)
 800828a:	f7ff bb27 	b.w	80078dc <_dtoa_r+0xd4>
 800828e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008290:	2b00      	cmp	r3, #0
 8008292:	f47f ab03 	bne.w	800789c <_dtoa_r+0x94>
 8008296:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <_dtoa_r+0xad8>)
 8008298:	f7ff bb20 	b.w	80078dc <_dtoa_r+0xd4>
 800829c:	f1ba 0f00 	cmp.w	sl, #0
 80082a0:	dc03      	bgt.n	80082aa <_dtoa_r+0xaa2>
 80082a2:	9b06      	ldr	r3, [sp, #24]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	f73f aec7 	bgt.w	8008038 <_dtoa_r+0x830>
 80082aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff fa1b 	bl	80076ec <quorem>
 80082b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082ba:	f808 3b01 	strb.w	r3, [r8], #1
 80082be:	9a01      	ldr	r2, [sp, #4]
 80082c0:	eba8 0202 	sub.w	r2, r8, r2
 80082c4:	4592      	cmp	sl, r2
 80082c6:	ddb7      	ble.n	8008238 <_dtoa_r+0xa30>
 80082c8:	4629      	mov	r1, r5
 80082ca:	2300      	movs	r3, #0
 80082cc:	220a      	movs	r2, #10
 80082ce:	4630      	mov	r0, r6
 80082d0:	f000 f884 	bl	80083dc <__multadd>
 80082d4:	4605      	mov	r5, r0
 80082d6:	e7ea      	b.n	80082ae <_dtoa_r+0xaa6>
 80082d8:	08009bc3 	.word	0x08009bc3
 80082dc:	08009b20 	.word	0x08009b20
 80082e0:	08009b44 	.word	0x08009b44

080082e4 <_localeconv_r>:
 80082e4:	4800      	ldr	r0, [pc, #0]	; (80082e8 <_localeconv_r+0x4>)
 80082e6:	4770      	bx	lr
 80082e8:	24000164 	.word	0x24000164

080082ec <malloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <malloc+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f000 bc17 	b.w	8008b24 <_malloc_r>
 80082f6:	bf00      	nop
 80082f8:	24000010 	.word	0x24000010

080082fc <memcpy>:
 80082fc:	440a      	add	r2, r1
 80082fe:	4291      	cmp	r1, r2
 8008300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008304:	d100      	bne.n	8008308 <memcpy+0xc>
 8008306:	4770      	bx	lr
 8008308:	b510      	push	{r4, lr}
 800830a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008312:	4291      	cmp	r1, r2
 8008314:	d1f9      	bne.n	800830a <memcpy+0xe>
 8008316:	bd10      	pop	{r4, pc}

08008318 <_Balloc>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	b976      	cbnz	r6, 8008340 <_Balloc+0x28>
 8008322:	2010      	movs	r0, #16
 8008324:	f7ff ffe2 	bl	80082ec <malloc>
 8008328:	4602      	mov	r2, r0
 800832a:	6260      	str	r0, [r4, #36]	; 0x24
 800832c:	b920      	cbnz	r0, 8008338 <_Balloc+0x20>
 800832e:	4b18      	ldr	r3, [pc, #96]	; (8008390 <_Balloc+0x78>)
 8008330:	4818      	ldr	r0, [pc, #96]	; (8008394 <_Balloc+0x7c>)
 8008332:	2166      	movs	r1, #102	; 0x66
 8008334:	f000 fdd6 	bl	8008ee4 <__assert_func>
 8008338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800833c:	6006      	str	r6, [r0, #0]
 800833e:	60c6      	str	r6, [r0, #12]
 8008340:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008342:	68f3      	ldr	r3, [r6, #12]
 8008344:	b183      	cbz	r3, 8008368 <_Balloc+0x50>
 8008346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800834e:	b9b8      	cbnz	r0, 8008380 <_Balloc+0x68>
 8008350:	2101      	movs	r1, #1
 8008352:	fa01 f605 	lsl.w	r6, r1, r5
 8008356:	1d72      	adds	r2, r6, #5
 8008358:	0092      	lsls	r2, r2, #2
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fb60 	bl	8008a20 <_calloc_r>
 8008360:	b160      	cbz	r0, 800837c <_Balloc+0x64>
 8008362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008366:	e00e      	b.n	8008386 <_Balloc+0x6e>
 8008368:	2221      	movs	r2, #33	; 0x21
 800836a:	2104      	movs	r1, #4
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fb57 	bl	8008a20 <_calloc_r>
 8008372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008374:	60f0      	str	r0, [r6, #12]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e4      	bne.n	8008346 <_Balloc+0x2e>
 800837c:	2000      	movs	r0, #0
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	6802      	ldr	r2, [r0, #0]
 8008382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008386:	2300      	movs	r3, #0
 8008388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800838c:	e7f7      	b.n	800837e <_Balloc+0x66>
 800838e:	bf00      	nop
 8008390:	08009b51 	.word	0x08009b51
 8008394:	08009bd4 	.word	0x08009bd4

08008398 <_Bfree>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800839c:	4605      	mov	r5, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b976      	cbnz	r6, 80083c0 <_Bfree+0x28>
 80083a2:	2010      	movs	r0, #16
 80083a4:	f7ff ffa2 	bl	80082ec <malloc>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6268      	str	r0, [r5, #36]	; 0x24
 80083ac:	b920      	cbnz	r0, 80083b8 <_Bfree+0x20>
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <_Bfree+0x3c>)
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <_Bfree+0x40>)
 80083b2:	218a      	movs	r1, #138	; 0x8a
 80083b4:	f000 fd96 	bl	8008ee4 <__assert_func>
 80083b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083bc:	6006      	str	r6, [r0, #0]
 80083be:	60c6      	str	r6, [r0, #12]
 80083c0:	b13c      	cbz	r4, 80083d2 <_Bfree+0x3a>
 80083c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083c4:	6862      	ldr	r2, [r4, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083cc:	6021      	str	r1, [r4, #0]
 80083ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	08009b51 	.word	0x08009b51
 80083d8:	08009bd4 	.word	0x08009bd4

080083dc <__multadd>:
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	690d      	ldr	r5, [r1, #16]
 80083e2:	4607      	mov	r7, r0
 80083e4:	460c      	mov	r4, r1
 80083e6:	461e      	mov	r6, r3
 80083e8:	f101 0c14 	add.w	ip, r1, #20
 80083ec:	2000      	movs	r0, #0
 80083ee:	f8dc 3000 	ldr.w	r3, [ip]
 80083f2:	b299      	uxth	r1, r3
 80083f4:	fb02 6101 	mla	r1, r2, r1, r6
 80083f8:	0c1e      	lsrs	r6, r3, #16
 80083fa:	0c0b      	lsrs	r3, r1, #16
 80083fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008400:	b289      	uxth	r1, r1
 8008402:	3001      	adds	r0, #1
 8008404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008408:	4285      	cmp	r5, r0
 800840a:	f84c 1b04 	str.w	r1, [ip], #4
 800840e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008412:	dcec      	bgt.n	80083ee <__multadd+0x12>
 8008414:	b30e      	cbz	r6, 800845a <__multadd+0x7e>
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	42ab      	cmp	r3, r5
 800841a:	dc19      	bgt.n	8008450 <__multadd+0x74>
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	4638      	mov	r0, r7
 8008420:	3101      	adds	r1, #1
 8008422:	f7ff ff79 	bl	8008318 <_Balloc>
 8008426:	4680      	mov	r8, r0
 8008428:	b928      	cbnz	r0, 8008436 <__multadd+0x5a>
 800842a:	4602      	mov	r2, r0
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <__multadd+0x84>)
 800842e:	480d      	ldr	r0, [pc, #52]	; (8008464 <__multadd+0x88>)
 8008430:	21b5      	movs	r1, #181	; 0xb5
 8008432:	f000 fd57 	bl	8008ee4 <__assert_func>
 8008436:	6922      	ldr	r2, [r4, #16]
 8008438:	3202      	adds	r2, #2
 800843a:	f104 010c 	add.w	r1, r4, #12
 800843e:	0092      	lsls	r2, r2, #2
 8008440:	300c      	adds	r0, #12
 8008442:	f7ff ff5b 	bl	80082fc <memcpy>
 8008446:	4621      	mov	r1, r4
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ffa5 	bl	8008398 <_Bfree>
 800844e:	4644      	mov	r4, r8
 8008450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008454:	3501      	adds	r5, #1
 8008456:	615e      	str	r6, [r3, #20]
 8008458:	6125      	str	r5, [r4, #16]
 800845a:	4620      	mov	r0, r4
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	08009bc3 	.word	0x08009bc3
 8008464:	08009bd4 	.word	0x08009bd4

08008468 <__hi0bits>:
 8008468:	0c03      	lsrs	r3, r0, #16
 800846a:	041b      	lsls	r3, r3, #16
 800846c:	b9d3      	cbnz	r3, 80084a4 <__hi0bits+0x3c>
 800846e:	0400      	lsls	r0, r0, #16
 8008470:	2310      	movs	r3, #16
 8008472:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008476:	bf04      	itt	eq
 8008478:	0200      	lsleq	r0, r0, #8
 800847a:	3308      	addeq	r3, #8
 800847c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008480:	bf04      	itt	eq
 8008482:	0100      	lsleq	r0, r0, #4
 8008484:	3304      	addeq	r3, #4
 8008486:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800848a:	bf04      	itt	eq
 800848c:	0080      	lsleq	r0, r0, #2
 800848e:	3302      	addeq	r3, #2
 8008490:	2800      	cmp	r0, #0
 8008492:	db05      	blt.n	80084a0 <__hi0bits+0x38>
 8008494:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008498:	f103 0301 	add.w	r3, r3, #1
 800849c:	bf08      	it	eq
 800849e:	2320      	moveq	r3, #32
 80084a0:	4618      	mov	r0, r3
 80084a2:	4770      	bx	lr
 80084a4:	2300      	movs	r3, #0
 80084a6:	e7e4      	b.n	8008472 <__hi0bits+0xa>

080084a8 <__lo0bits>:
 80084a8:	6803      	ldr	r3, [r0, #0]
 80084aa:	f013 0207 	ands.w	r2, r3, #7
 80084ae:	4601      	mov	r1, r0
 80084b0:	d00b      	beq.n	80084ca <__lo0bits+0x22>
 80084b2:	07da      	lsls	r2, r3, #31
 80084b4:	d423      	bmi.n	80084fe <__lo0bits+0x56>
 80084b6:	0798      	lsls	r0, r3, #30
 80084b8:	bf49      	itett	mi
 80084ba:	085b      	lsrmi	r3, r3, #1
 80084bc:	089b      	lsrpl	r3, r3, #2
 80084be:	2001      	movmi	r0, #1
 80084c0:	600b      	strmi	r3, [r1, #0]
 80084c2:	bf5c      	itt	pl
 80084c4:	600b      	strpl	r3, [r1, #0]
 80084c6:	2002      	movpl	r0, #2
 80084c8:	4770      	bx	lr
 80084ca:	b298      	uxth	r0, r3
 80084cc:	b9a8      	cbnz	r0, 80084fa <__lo0bits+0x52>
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	2010      	movs	r0, #16
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	b90a      	cbnz	r2, 80084da <__lo0bits+0x32>
 80084d6:	3008      	adds	r0, #8
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	071a      	lsls	r2, r3, #28
 80084dc:	bf04      	itt	eq
 80084de:	091b      	lsreq	r3, r3, #4
 80084e0:	3004      	addeq	r0, #4
 80084e2:	079a      	lsls	r2, r3, #30
 80084e4:	bf04      	itt	eq
 80084e6:	089b      	lsreq	r3, r3, #2
 80084e8:	3002      	addeq	r0, #2
 80084ea:	07da      	lsls	r2, r3, #31
 80084ec:	d403      	bmi.n	80084f6 <__lo0bits+0x4e>
 80084ee:	085b      	lsrs	r3, r3, #1
 80084f0:	f100 0001 	add.w	r0, r0, #1
 80084f4:	d005      	beq.n	8008502 <__lo0bits+0x5a>
 80084f6:	600b      	str	r3, [r1, #0]
 80084f8:	4770      	bx	lr
 80084fa:	4610      	mov	r0, r2
 80084fc:	e7e9      	b.n	80084d2 <__lo0bits+0x2a>
 80084fe:	2000      	movs	r0, #0
 8008500:	4770      	bx	lr
 8008502:	2020      	movs	r0, #32
 8008504:	4770      	bx	lr
	...

08008508 <__i2b>:
 8008508:	b510      	push	{r4, lr}
 800850a:	460c      	mov	r4, r1
 800850c:	2101      	movs	r1, #1
 800850e:	f7ff ff03 	bl	8008318 <_Balloc>
 8008512:	4602      	mov	r2, r0
 8008514:	b928      	cbnz	r0, 8008522 <__i2b+0x1a>
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <__i2b+0x24>)
 8008518:	4805      	ldr	r0, [pc, #20]	; (8008530 <__i2b+0x28>)
 800851a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800851e:	f000 fce1 	bl	8008ee4 <__assert_func>
 8008522:	2301      	movs	r3, #1
 8008524:	6144      	str	r4, [r0, #20]
 8008526:	6103      	str	r3, [r0, #16]
 8008528:	bd10      	pop	{r4, pc}
 800852a:	bf00      	nop
 800852c:	08009bc3 	.word	0x08009bc3
 8008530:	08009bd4 	.word	0x08009bd4

08008534 <__multiply>:
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	4691      	mov	r9, r2
 800853a:	690a      	ldr	r2, [r1, #16]
 800853c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008540:	429a      	cmp	r2, r3
 8008542:	bfb8      	it	lt
 8008544:	460b      	movlt	r3, r1
 8008546:	460c      	mov	r4, r1
 8008548:	bfbc      	itt	lt
 800854a:	464c      	movlt	r4, r9
 800854c:	4699      	movlt	r9, r3
 800854e:	6927      	ldr	r7, [r4, #16]
 8008550:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	6861      	ldr	r1, [r4, #4]
 8008558:	eb07 060a 	add.w	r6, r7, sl
 800855c:	42b3      	cmp	r3, r6
 800855e:	b085      	sub	sp, #20
 8008560:	bfb8      	it	lt
 8008562:	3101      	addlt	r1, #1
 8008564:	f7ff fed8 	bl	8008318 <_Balloc>
 8008568:	b930      	cbnz	r0, 8008578 <__multiply+0x44>
 800856a:	4602      	mov	r2, r0
 800856c:	4b44      	ldr	r3, [pc, #272]	; (8008680 <__multiply+0x14c>)
 800856e:	4845      	ldr	r0, [pc, #276]	; (8008684 <__multiply+0x150>)
 8008570:	f240 115d 	movw	r1, #349	; 0x15d
 8008574:	f000 fcb6 	bl	8008ee4 <__assert_func>
 8008578:	f100 0514 	add.w	r5, r0, #20
 800857c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008580:	462b      	mov	r3, r5
 8008582:	2200      	movs	r2, #0
 8008584:	4543      	cmp	r3, r8
 8008586:	d321      	bcc.n	80085cc <__multiply+0x98>
 8008588:	f104 0314 	add.w	r3, r4, #20
 800858c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008590:	f109 0314 	add.w	r3, r9, #20
 8008594:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008598:	9202      	str	r2, [sp, #8]
 800859a:	1b3a      	subs	r2, r7, r4
 800859c:	3a15      	subs	r2, #21
 800859e:	f022 0203 	bic.w	r2, r2, #3
 80085a2:	3204      	adds	r2, #4
 80085a4:	f104 0115 	add.w	r1, r4, #21
 80085a8:	428f      	cmp	r7, r1
 80085aa:	bf38      	it	cc
 80085ac:	2204      	movcc	r2, #4
 80085ae:	9201      	str	r2, [sp, #4]
 80085b0:	9a02      	ldr	r2, [sp, #8]
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d80c      	bhi.n	80085d2 <__multiply+0x9e>
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	dd03      	ble.n	80085c4 <__multiply+0x90>
 80085bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d05a      	beq.n	800867a <__multiply+0x146>
 80085c4:	6106      	str	r6, [r0, #16]
 80085c6:	b005      	add	sp, #20
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	f843 2b04 	str.w	r2, [r3], #4
 80085d0:	e7d8      	b.n	8008584 <__multiply+0x50>
 80085d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80085d6:	f1ba 0f00 	cmp.w	sl, #0
 80085da:	d024      	beq.n	8008626 <__multiply+0xf2>
 80085dc:	f104 0e14 	add.w	lr, r4, #20
 80085e0:	46a9      	mov	r9, r5
 80085e2:	f04f 0c00 	mov.w	ip, #0
 80085e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085ea:	f8d9 1000 	ldr.w	r1, [r9]
 80085ee:	fa1f fb82 	uxth.w	fp, r2
 80085f2:	b289      	uxth	r1, r1
 80085f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80085f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008600:	4461      	add	r1, ip
 8008602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008606:	fb0a c20b 	mla	r2, sl, fp, ip
 800860a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800860e:	b289      	uxth	r1, r1
 8008610:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008614:	4577      	cmp	r7, lr
 8008616:	f849 1b04 	str.w	r1, [r9], #4
 800861a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800861e:	d8e2      	bhi.n	80085e6 <__multiply+0xb2>
 8008620:	9a01      	ldr	r2, [sp, #4]
 8008622:	f845 c002 	str.w	ip, [r5, r2]
 8008626:	9a03      	ldr	r2, [sp, #12]
 8008628:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800862c:	3304      	adds	r3, #4
 800862e:	f1b9 0f00 	cmp.w	r9, #0
 8008632:	d020      	beq.n	8008676 <__multiply+0x142>
 8008634:	6829      	ldr	r1, [r5, #0]
 8008636:	f104 0c14 	add.w	ip, r4, #20
 800863a:	46ae      	mov	lr, r5
 800863c:	f04f 0a00 	mov.w	sl, #0
 8008640:	f8bc b000 	ldrh.w	fp, [ip]
 8008644:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008648:	fb09 220b 	mla	r2, r9, fp, r2
 800864c:	4492      	add	sl, r2
 800864e:	b289      	uxth	r1, r1
 8008650:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008654:	f84e 1b04 	str.w	r1, [lr], #4
 8008658:	f85c 2b04 	ldr.w	r2, [ip], #4
 800865c:	f8be 1000 	ldrh.w	r1, [lr]
 8008660:	0c12      	lsrs	r2, r2, #16
 8008662:	fb09 1102 	mla	r1, r9, r2, r1
 8008666:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800866a:	4567      	cmp	r7, ip
 800866c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008670:	d8e6      	bhi.n	8008640 <__multiply+0x10c>
 8008672:	9a01      	ldr	r2, [sp, #4]
 8008674:	50a9      	str	r1, [r5, r2]
 8008676:	3504      	adds	r5, #4
 8008678:	e79a      	b.n	80085b0 <__multiply+0x7c>
 800867a:	3e01      	subs	r6, #1
 800867c:	e79c      	b.n	80085b8 <__multiply+0x84>
 800867e:	bf00      	nop
 8008680:	08009bc3 	.word	0x08009bc3
 8008684:	08009bd4 	.word	0x08009bd4

08008688 <__pow5mult>:
 8008688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800868c:	4615      	mov	r5, r2
 800868e:	f012 0203 	ands.w	r2, r2, #3
 8008692:	4606      	mov	r6, r0
 8008694:	460f      	mov	r7, r1
 8008696:	d007      	beq.n	80086a8 <__pow5mult+0x20>
 8008698:	4c25      	ldr	r4, [pc, #148]	; (8008730 <__pow5mult+0xa8>)
 800869a:	3a01      	subs	r2, #1
 800869c:	2300      	movs	r3, #0
 800869e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086a2:	f7ff fe9b 	bl	80083dc <__multadd>
 80086a6:	4607      	mov	r7, r0
 80086a8:	10ad      	asrs	r5, r5, #2
 80086aa:	d03d      	beq.n	8008728 <__pow5mult+0xa0>
 80086ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086ae:	b97c      	cbnz	r4, 80086d0 <__pow5mult+0x48>
 80086b0:	2010      	movs	r0, #16
 80086b2:	f7ff fe1b 	bl	80082ec <malloc>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6270      	str	r0, [r6, #36]	; 0x24
 80086ba:	b928      	cbnz	r0, 80086c8 <__pow5mult+0x40>
 80086bc:	4b1d      	ldr	r3, [pc, #116]	; (8008734 <__pow5mult+0xac>)
 80086be:	481e      	ldr	r0, [pc, #120]	; (8008738 <__pow5mult+0xb0>)
 80086c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086c4:	f000 fc0e 	bl	8008ee4 <__assert_func>
 80086c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086cc:	6004      	str	r4, [r0, #0]
 80086ce:	60c4      	str	r4, [r0, #12]
 80086d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086d8:	b94c      	cbnz	r4, 80086ee <__pow5mult+0x66>
 80086da:	f240 2171 	movw	r1, #625	; 0x271
 80086de:	4630      	mov	r0, r6
 80086e0:	f7ff ff12 	bl	8008508 <__i2b>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80086ea:	4604      	mov	r4, r0
 80086ec:	6003      	str	r3, [r0, #0]
 80086ee:	f04f 0900 	mov.w	r9, #0
 80086f2:	07eb      	lsls	r3, r5, #31
 80086f4:	d50a      	bpl.n	800870c <__pow5mult+0x84>
 80086f6:	4639      	mov	r1, r7
 80086f8:	4622      	mov	r2, r4
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7ff ff1a 	bl	8008534 <__multiply>
 8008700:	4639      	mov	r1, r7
 8008702:	4680      	mov	r8, r0
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff fe47 	bl	8008398 <_Bfree>
 800870a:	4647      	mov	r7, r8
 800870c:	106d      	asrs	r5, r5, #1
 800870e:	d00b      	beq.n	8008728 <__pow5mult+0xa0>
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	b938      	cbnz	r0, 8008724 <__pow5mult+0x9c>
 8008714:	4622      	mov	r2, r4
 8008716:	4621      	mov	r1, r4
 8008718:	4630      	mov	r0, r6
 800871a:	f7ff ff0b 	bl	8008534 <__multiply>
 800871e:	6020      	str	r0, [r4, #0]
 8008720:	f8c0 9000 	str.w	r9, [r0]
 8008724:	4604      	mov	r4, r0
 8008726:	e7e4      	b.n	80086f2 <__pow5mult+0x6a>
 8008728:	4638      	mov	r0, r7
 800872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872e:	bf00      	nop
 8008730:	08009d20 	.word	0x08009d20
 8008734:	08009b51 	.word	0x08009b51
 8008738:	08009bd4 	.word	0x08009bd4

0800873c <__lshift>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	6849      	ldr	r1, [r1, #4]
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	4607      	mov	r7, r0
 800874e:	4691      	mov	r9, r2
 8008750:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008754:	f108 0601 	add.w	r6, r8, #1
 8008758:	42b3      	cmp	r3, r6
 800875a:	db0b      	blt.n	8008774 <__lshift+0x38>
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff fddb 	bl	8008318 <_Balloc>
 8008762:	4605      	mov	r5, r0
 8008764:	b948      	cbnz	r0, 800877a <__lshift+0x3e>
 8008766:	4602      	mov	r2, r0
 8008768:	4b2a      	ldr	r3, [pc, #168]	; (8008814 <__lshift+0xd8>)
 800876a:	482b      	ldr	r0, [pc, #172]	; (8008818 <__lshift+0xdc>)
 800876c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008770:	f000 fbb8 	bl	8008ee4 <__assert_func>
 8008774:	3101      	adds	r1, #1
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	e7ee      	b.n	8008758 <__lshift+0x1c>
 800877a:	2300      	movs	r3, #0
 800877c:	f100 0114 	add.w	r1, r0, #20
 8008780:	f100 0210 	add.w	r2, r0, #16
 8008784:	4618      	mov	r0, r3
 8008786:	4553      	cmp	r3, sl
 8008788:	db37      	blt.n	80087fa <__lshift+0xbe>
 800878a:	6920      	ldr	r0, [r4, #16]
 800878c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008790:	f104 0314 	add.w	r3, r4, #20
 8008794:	f019 091f 	ands.w	r9, r9, #31
 8008798:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800879c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80087a0:	d02f      	beq.n	8008802 <__lshift+0xc6>
 80087a2:	f1c9 0e20 	rsb	lr, r9, #32
 80087a6:	468a      	mov	sl, r1
 80087a8:	f04f 0c00 	mov.w	ip, #0
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	fa02 f209 	lsl.w	r2, r2, r9
 80087b2:	ea42 020c 	orr.w	r2, r2, ip
 80087b6:	f84a 2b04 	str.w	r2, [sl], #4
 80087ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80087be:	4298      	cmp	r0, r3
 80087c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087c4:	d8f2      	bhi.n	80087ac <__lshift+0x70>
 80087c6:	1b03      	subs	r3, r0, r4
 80087c8:	3b15      	subs	r3, #21
 80087ca:	f023 0303 	bic.w	r3, r3, #3
 80087ce:	3304      	adds	r3, #4
 80087d0:	f104 0215 	add.w	r2, r4, #21
 80087d4:	4290      	cmp	r0, r2
 80087d6:	bf38      	it	cc
 80087d8:	2304      	movcc	r3, #4
 80087da:	f841 c003 	str.w	ip, [r1, r3]
 80087de:	f1bc 0f00 	cmp.w	ip, #0
 80087e2:	d001      	beq.n	80087e8 <__lshift+0xac>
 80087e4:	f108 0602 	add.w	r6, r8, #2
 80087e8:	3e01      	subs	r6, #1
 80087ea:	4638      	mov	r0, r7
 80087ec:	612e      	str	r6, [r5, #16]
 80087ee:	4621      	mov	r1, r4
 80087f0:	f7ff fdd2 	bl	8008398 <_Bfree>
 80087f4:	4628      	mov	r0, r5
 80087f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80087fe:	3301      	adds	r3, #1
 8008800:	e7c1      	b.n	8008786 <__lshift+0x4a>
 8008802:	3904      	subs	r1, #4
 8008804:	f853 2b04 	ldr.w	r2, [r3], #4
 8008808:	f841 2f04 	str.w	r2, [r1, #4]!
 800880c:	4298      	cmp	r0, r3
 800880e:	d8f9      	bhi.n	8008804 <__lshift+0xc8>
 8008810:	e7ea      	b.n	80087e8 <__lshift+0xac>
 8008812:	bf00      	nop
 8008814:	08009bc3 	.word	0x08009bc3
 8008818:	08009bd4 	.word	0x08009bd4

0800881c <__mcmp>:
 800881c:	b530      	push	{r4, r5, lr}
 800881e:	6902      	ldr	r2, [r0, #16]
 8008820:	690c      	ldr	r4, [r1, #16]
 8008822:	1b12      	subs	r2, r2, r4
 8008824:	d10e      	bne.n	8008844 <__mcmp+0x28>
 8008826:	f100 0314 	add.w	r3, r0, #20
 800882a:	3114      	adds	r1, #20
 800882c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008834:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008838:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800883c:	42a5      	cmp	r5, r4
 800883e:	d003      	beq.n	8008848 <__mcmp+0x2c>
 8008840:	d305      	bcc.n	800884e <__mcmp+0x32>
 8008842:	2201      	movs	r2, #1
 8008844:	4610      	mov	r0, r2
 8008846:	bd30      	pop	{r4, r5, pc}
 8008848:	4283      	cmp	r3, r0
 800884a:	d3f3      	bcc.n	8008834 <__mcmp+0x18>
 800884c:	e7fa      	b.n	8008844 <__mcmp+0x28>
 800884e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008852:	e7f7      	b.n	8008844 <__mcmp+0x28>

08008854 <__mdiff>:
 8008854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	4606      	mov	r6, r0
 800885c:	4611      	mov	r1, r2
 800885e:	4620      	mov	r0, r4
 8008860:	4690      	mov	r8, r2
 8008862:	f7ff ffdb 	bl	800881c <__mcmp>
 8008866:	1e05      	subs	r5, r0, #0
 8008868:	d110      	bne.n	800888c <__mdiff+0x38>
 800886a:	4629      	mov	r1, r5
 800886c:	4630      	mov	r0, r6
 800886e:	f7ff fd53 	bl	8008318 <_Balloc>
 8008872:	b930      	cbnz	r0, 8008882 <__mdiff+0x2e>
 8008874:	4b3a      	ldr	r3, [pc, #232]	; (8008960 <__mdiff+0x10c>)
 8008876:	4602      	mov	r2, r0
 8008878:	f240 2132 	movw	r1, #562	; 0x232
 800887c:	4839      	ldr	r0, [pc, #228]	; (8008964 <__mdiff+0x110>)
 800887e:	f000 fb31 	bl	8008ee4 <__assert_func>
 8008882:	2301      	movs	r3, #1
 8008884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	bfa4      	itt	ge
 800888e:	4643      	movge	r3, r8
 8008890:	46a0      	movge	r8, r4
 8008892:	4630      	mov	r0, r6
 8008894:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008898:	bfa6      	itte	ge
 800889a:	461c      	movge	r4, r3
 800889c:	2500      	movge	r5, #0
 800889e:	2501      	movlt	r5, #1
 80088a0:	f7ff fd3a 	bl	8008318 <_Balloc>
 80088a4:	b920      	cbnz	r0, 80088b0 <__mdiff+0x5c>
 80088a6:	4b2e      	ldr	r3, [pc, #184]	; (8008960 <__mdiff+0x10c>)
 80088a8:	4602      	mov	r2, r0
 80088aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088ae:	e7e5      	b.n	800887c <__mdiff+0x28>
 80088b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088b4:	6926      	ldr	r6, [r4, #16]
 80088b6:	60c5      	str	r5, [r0, #12]
 80088b8:	f104 0914 	add.w	r9, r4, #20
 80088bc:	f108 0514 	add.w	r5, r8, #20
 80088c0:	f100 0e14 	add.w	lr, r0, #20
 80088c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088cc:	f108 0210 	add.w	r2, r8, #16
 80088d0:	46f2      	mov	sl, lr
 80088d2:	2100      	movs	r1, #0
 80088d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80088d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088dc:	fa1f f883 	uxth.w	r8, r3
 80088e0:	fa11 f18b 	uxtah	r1, r1, fp
 80088e4:	0c1b      	lsrs	r3, r3, #16
 80088e6:	eba1 0808 	sub.w	r8, r1, r8
 80088ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088f2:	fa1f f888 	uxth.w	r8, r8
 80088f6:	1419      	asrs	r1, r3, #16
 80088f8:	454e      	cmp	r6, r9
 80088fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008902:	d8e7      	bhi.n	80088d4 <__mdiff+0x80>
 8008904:	1b33      	subs	r3, r6, r4
 8008906:	3b15      	subs	r3, #21
 8008908:	f023 0303 	bic.w	r3, r3, #3
 800890c:	3304      	adds	r3, #4
 800890e:	3415      	adds	r4, #21
 8008910:	42a6      	cmp	r6, r4
 8008912:	bf38      	it	cc
 8008914:	2304      	movcc	r3, #4
 8008916:	441d      	add	r5, r3
 8008918:	4473      	add	r3, lr
 800891a:	469e      	mov	lr, r3
 800891c:	462e      	mov	r6, r5
 800891e:	4566      	cmp	r6, ip
 8008920:	d30e      	bcc.n	8008940 <__mdiff+0xec>
 8008922:	f10c 0203 	add.w	r2, ip, #3
 8008926:	1b52      	subs	r2, r2, r5
 8008928:	f022 0203 	bic.w	r2, r2, #3
 800892c:	3d03      	subs	r5, #3
 800892e:	45ac      	cmp	ip, r5
 8008930:	bf38      	it	cc
 8008932:	2200      	movcc	r2, #0
 8008934:	441a      	add	r2, r3
 8008936:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800893a:	b17b      	cbz	r3, 800895c <__mdiff+0x108>
 800893c:	6107      	str	r7, [r0, #16]
 800893e:	e7a3      	b.n	8008888 <__mdiff+0x34>
 8008940:	f856 8b04 	ldr.w	r8, [r6], #4
 8008944:	fa11 f288 	uxtah	r2, r1, r8
 8008948:	1414      	asrs	r4, r2, #16
 800894a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800894e:	b292      	uxth	r2, r2
 8008950:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008954:	f84e 2b04 	str.w	r2, [lr], #4
 8008958:	1421      	asrs	r1, r4, #16
 800895a:	e7e0      	b.n	800891e <__mdiff+0xca>
 800895c:	3f01      	subs	r7, #1
 800895e:	e7ea      	b.n	8008936 <__mdiff+0xe2>
 8008960:	08009bc3 	.word	0x08009bc3
 8008964:	08009bd4 	.word	0x08009bd4

08008968 <__d2b>:
 8008968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4689      	mov	r9, r1
 800896e:	2101      	movs	r1, #1
 8008970:	ec57 6b10 	vmov	r6, r7, d0
 8008974:	4690      	mov	r8, r2
 8008976:	f7ff fccf 	bl	8008318 <_Balloc>
 800897a:	4604      	mov	r4, r0
 800897c:	b930      	cbnz	r0, 800898c <__d2b+0x24>
 800897e:	4602      	mov	r2, r0
 8008980:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <__d2b+0xb0>)
 8008982:	4826      	ldr	r0, [pc, #152]	; (8008a1c <__d2b+0xb4>)
 8008984:	f240 310a 	movw	r1, #778	; 0x30a
 8008988:	f000 faac 	bl	8008ee4 <__assert_func>
 800898c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008994:	bb35      	cbnz	r5, 80089e4 <__d2b+0x7c>
 8008996:	2e00      	cmp	r6, #0
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	d028      	beq.n	80089ee <__d2b+0x86>
 800899c:	4668      	mov	r0, sp
 800899e:	9600      	str	r6, [sp, #0]
 80089a0:	f7ff fd82 	bl	80084a8 <__lo0bits>
 80089a4:	9900      	ldr	r1, [sp, #0]
 80089a6:	b300      	cbz	r0, 80089ea <__d2b+0x82>
 80089a8:	9a01      	ldr	r2, [sp, #4]
 80089aa:	f1c0 0320 	rsb	r3, r0, #32
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	430b      	orrs	r3, r1
 80089b4:	40c2      	lsrs	r2, r0
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	9201      	str	r2, [sp, #4]
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	61a3      	str	r3, [r4, #24]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2202      	movne	r2, #2
 80089c4:	2201      	moveq	r2, #1
 80089c6:	6122      	str	r2, [r4, #16]
 80089c8:	b1d5      	cbz	r5, 8008a00 <__d2b+0x98>
 80089ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089ce:	4405      	add	r5, r0
 80089d0:	f8c9 5000 	str.w	r5, [r9]
 80089d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089d8:	f8c8 0000 	str.w	r0, [r8]
 80089dc:	4620      	mov	r0, r4
 80089de:	b003      	add	sp, #12
 80089e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e8:	e7d5      	b.n	8008996 <__d2b+0x2e>
 80089ea:	6161      	str	r1, [r4, #20]
 80089ec:	e7e5      	b.n	80089ba <__d2b+0x52>
 80089ee:	a801      	add	r0, sp, #4
 80089f0:	f7ff fd5a 	bl	80084a8 <__lo0bits>
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	6163      	str	r3, [r4, #20]
 80089f8:	2201      	movs	r2, #1
 80089fa:	6122      	str	r2, [r4, #16]
 80089fc:	3020      	adds	r0, #32
 80089fe:	e7e3      	b.n	80089c8 <__d2b+0x60>
 8008a00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a08:	f8c9 0000 	str.w	r0, [r9]
 8008a0c:	6918      	ldr	r0, [r3, #16]
 8008a0e:	f7ff fd2b 	bl	8008468 <__hi0bits>
 8008a12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a16:	e7df      	b.n	80089d8 <__d2b+0x70>
 8008a18:	08009bc3 	.word	0x08009bc3
 8008a1c:	08009bd4 	.word	0x08009bd4

08008a20 <_calloc_r>:
 8008a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a22:	fba1 2402 	umull	r2, r4, r1, r2
 8008a26:	b94c      	cbnz	r4, 8008a3c <_calloc_r+0x1c>
 8008a28:	4611      	mov	r1, r2
 8008a2a:	9201      	str	r2, [sp, #4]
 8008a2c:	f000 f87a 	bl	8008b24 <_malloc_r>
 8008a30:	9a01      	ldr	r2, [sp, #4]
 8008a32:	4605      	mov	r5, r0
 8008a34:	b930      	cbnz	r0, 8008a44 <_calloc_r+0x24>
 8008a36:	4628      	mov	r0, r5
 8008a38:	b003      	add	sp, #12
 8008a3a:	bd30      	pop	{r4, r5, pc}
 8008a3c:	220c      	movs	r2, #12
 8008a3e:	6002      	str	r2, [r0, #0]
 8008a40:	2500      	movs	r5, #0
 8008a42:	e7f8      	b.n	8008a36 <_calloc_r+0x16>
 8008a44:	4621      	mov	r1, r4
 8008a46:	f7fe f9d1 	bl	8006dec <memset>
 8008a4a:	e7f4      	b.n	8008a36 <_calloc_r+0x16>

08008a4c <_free_r>:
 8008a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d044      	beq.n	8008adc <_free_r+0x90>
 8008a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a56:	9001      	str	r0, [sp, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a5e:	bfb8      	it	lt
 8008a60:	18e4      	addlt	r4, r4, r3
 8008a62:	f000 fa9b 	bl	8008f9c <__malloc_lock>
 8008a66:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <_free_r+0x94>)
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	6813      	ldr	r3, [r2, #0]
 8008a6c:	b933      	cbnz	r3, 8008a7c <_free_r+0x30>
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	6014      	str	r4, [r2, #0]
 8008a72:	b003      	add	sp, #12
 8008a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a78:	f000 ba96 	b.w	8008fa8 <__malloc_unlock>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d908      	bls.n	8008a92 <_free_r+0x46>
 8008a80:	6825      	ldr	r5, [r4, #0]
 8008a82:	1961      	adds	r1, r4, r5
 8008a84:	428b      	cmp	r3, r1
 8008a86:	bf01      	itttt	eq
 8008a88:	6819      	ldreq	r1, [r3, #0]
 8008a8a:	685b      	ldreq	r3, [r3, #4]
 8008a8c:	1949      	addeq	r1, r1, r5
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	e7ed      	b.n	8008a6e <_free_r+0x22>
 8008a92:	461a      	mov	r2, r3
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	b10b      	cbz	r3, 8008a9c <_free_r+0x50>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d9fa      	bls.n	8008a92 <_free_r+0x46>
 8008a9c:	6811      	ldr	r1, [r2, #0]
 8008a9e:	1855      	adds	r5, r2, r1
 8008aa0:	42a5      	cmp	r5, r4
 8008aa2:	d10b      	bne.n	8008abc <_free_r+0x70>
 8008aa4:	6824      	ldr	r4, [r4, #0]
 8008aa6:	4421      	add	r1, r4
 8008aa8:	1854      	adds	r4, r2, r1
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	d1e0      	bne.n	8008a72 <_free_r+0x26>
 8008ab0:	681c      	ldr	r4, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	6053      	str	r3, [r2, #4]
 8008ab6:	4421      	add	r1, r4
 8008ab8:	6011      	str	r1, [r2, #0]
 8008aba:	e7da      	b.n	8008a72 <_free_r+0x26>
 8008abc:	d902      	bls.n	8008ac4 <_free_r+0x78>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	e7d6      	b.n	8008a72 <_free_r+0x26>
 8008ac4:	6825      	ldr	r5, [r4, #0]
 8008ac6:	1961      	adds	r1, r4, r5
 8008ac8:	428b      	cmp	r3, r1
 8008aca:	bf04      	itt	eq
 8008acc:	6819      	ldreq	r1, [r3, #0]
 8008ace:	685b      	ldreq	r3, [r3, #4]
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	bf04      	itt	eq
 8008ad4:	1949      	addeq	r1, r1, r5
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	6054      	str	r4, [r2, #4]
 8008ada:	e7ca      	b.n	8008a72 <_free_r+0x26>
 8008adc:	b003      	add	sp, #12
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	2400036c 	.word	0x2400036c

08008ae4 <sbrk_aligned>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4e0e      	ldr	r6, [pc, #56]	; (8008b20 <sbrk_aligned+0x3c>)
 8008ae8:	460c      	mov	r4, r1
 8008aea:	6831      	ldr	r1, [r6, #0]
 8008aec:	4605      	mov	r5, r0
 8008aee:	b911      	cbnz	r1, 8008af6 <sbrk_aligned+0x12>
 8008af0:	f000 f9e8 	bl	8008ec4 <_sbrk_r>
 8008af4:	6030      	str	r0, [r6, #0]
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 f9e3 	bl	8008ec4 <_sbrk_r>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	d00a      	beq.n	8008b18 <sbrk_aligned+0x34>
 8008b02:	1cc4      	adds	r4, r0, #3
 8008b04:	f024 0403 	bic.w	r4, r4, #3
 8008b08:	42a0      	cmp	r0, r4
 8008b0a:	d007      	beq.n	8008b1c <sbrk_aligned+0x38>
 8008b0c:	1a21      	subs	r1, r4, r0
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 f9d8 	bl	8008ec4 <_sbrk_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d101      	bne.n	8008b1c <sbrk_aligned+0x38>
 8008b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	24000370 	.word	0x24000370

08008b24 <_malloc_r>:
 8008b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b28:	1ccd      	adds	r5, r1, #3
 8008b2a:	f025 0503 	bic.w	r5, r5, #3
 8008b2e:	3508      	adds	r5, #8
 8008b30:	2d0c      	cmp	r5, #12
 8008b32:	bf38      	it	cc
 8008b34:	250c      	movcc	r5, #12
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	4607      	mov	r7, r0
 8008b3a:	db01      	blt.n	8008b40 <_malloc_r+0x1c>
 8008b3c:	42a9      	cmp	r1, r5
 8008b3e:	d905      	bls.n	8008b4c <_malloc_r+0x28>
 8008b40:	230c      	movs	r3, #12
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	2600      	movs	r6, #0
 8008b46:	4630      	mov	r0, r6
 8008b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b4c:	4e2e      	ldr	r6, [pc, #184]	; (8008c08 <_malloc_r+0xe4>)
 8008b4e:	f000 fa25 	bl	8008f9c <__malloc_lock>
 8008b52:	6833      	ldr	r3, [r6, #0]
 8008b54:	461c      	mov	r4, r3
 8008b56:	bb34      	cbnz	r4, 8008ba6 <_malloc_r+0x82>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f7ff ffc2 	bl	8008ae4 <sbrk_aligned>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	4604      	mov	r4, r0
 8008b64:	d14d      	bne.n	8008c02 <_malloc_r+0xde>
 8008b66:	6834      	ldr	r4, [r6, #0]
 8008b68:	4626      	mov	r6, r4
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d140      	bne.n	8008bf0 <_malloc_r+0xcc>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	4631      	mov	r1, r6
 8008b72:	4638      	mov	r0, r7
 8008b74:	eb04 0803 	add.w	r8, r4, r3
 8008b78:	f000 f9a4 	bl	8008ec4 <_sbrk_r>
 8008b7c:	4580      	cmp	r8, r0
 8008b7e:	d13a      	bne.n	8008bf6 <_malloc_r+0xd2>
 8008b80:	6821      	ldr	r1, [r4, #0]
 8008b82:	3503      	adds	r5, #3
 8008b84:	1a6d      	subs	r5, r5, r1
 8008b86:	f025 0503 	bic.w	r5, r5, #3
 8008b8a:	3508      	adds	r5, #8
 8008b8c:	2d0c      	cmp	r5, #12
 8008b8e:	bf38      	it	cc
 8008b90:	250c      	movcc	r5, #12
 8008b92:	4629      	mov	r1, r5
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff ffa5 	bl	8008ae4 <sbrk_aligned>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d02b      	beq.n	8008bf6 <_malloc_r+0xd2>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	442b      	add	r3, r5
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	e00e      	b.n	8008bc4 <_malloc_r+0xa0>
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	1b52      	subs	r2, r2, r5
 8008baa:	d41e      	bmi.n	8008bea <_malloc_r+0xc6>
 8008bac:	2a0b      	cmp	r2, #11
 8008bae:	d916      	bls.n	8008bde <_malloc_r+0xba>
 8008bb0:	1961      	adds	r1, r4, r5
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	6025      	str	r5, [r4, #0]
 8008bb6:	bf18      	it	ne
 8008bb8:	6059      	strne	r1, [r3, #4]
 8008bba:	6863      	ldr	r3, [r4, #4]
 8008bbc:	bf08      	it	eq
 8008bbe:	6031      	streq	r1, [r6, #0]
 8008bc0:	5162      	str	r2, [r4, r5]
 8008bc2:	604b      	str	r3, [r1, #4]
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	f104 060b 	add.w	r6, r4, #11
 8008bca:	f000 f9ed 	bl	8008fa8 <__malloc_unlock>
 8008bce:	f026 0607 	bic.w	r6, r6, #7
 8008bd2:	1d23      	adds	r3, r4, #4
 8008bd4:	1af2      	subs	r2, r6, r3
 8008bd6:	d0b6      	beq.n	8008b46 <_malloc_r+0x22>
 8008bd8:	1b9b      	subs	r3, r3, r6
 8008bda:	50a3      	str	r3, [r4, r2]
 8008bdc:	e7b3      	b.n	8008b46 <_malloc_r+0x22>
 8008bde:	6862      	ldr	r2, [r4, #4]
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	bf0c      	ite	eq
 8008be4:	6032      	streq	r2, [r6, #0]
 8008be6:	605a      	strne	r2, [r3, #4]
 8008be8:	e7ec      	b.n	8008bc4 <_malloc_r+0xa0>
 8008bea:	4623      	mov	r3, r4
 8008bec:	6864      	ldr	r4, [r4, #4]
 8008bee:	e7b2      	b.n	8008b56 <_malloc_r+0x32>
 8008bf0:	4634      	mov	r4, r6
 8008bf2:	6876      	ldr	r6, [r6, #4]
 8008bf4:	e7b9      	b.n	8008b6a <_malloc_r+0x46>
 8008bf6:	230c      	movs	r3, #12
 8008bf8:	603b      	str	r3, [r7, #0]
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	f000 f9d4 	bl	8008fa8 <__malloc_unlock>
 8008c00:	e7a1      	b.n	8008b46 <_malloc_r+0x22>
 8008c02:	6025      	str	r5, [r4, #0]
 8008c04:	e7de      	b.n	8008bc4 <_malloc_r+0xa0>
 8008c06:	bf00      	nop
 8008c08:	2400036c 	.word	0x2400036c

08008c0c <__ssputs_r>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	688e      	ldr	r6, [r1, #8]
 8008c12:	429e      	cmp	r6, r3
 8008c14:	4682      	mov	sl, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	4690      	mov	r8, r2
 8008c1a:	461f      	mov	r7, r3
 8008c1c:	d838      	bhi.n	8008c90 <__ssputs_r+0x84>
 8008c1e:	898a      	ldrh	r2, [r1, #12]
 8008c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c24:	d032      	beq.n	8008c8c <__ssputs_r+0x80>
 8008c26:	6825      	ldr	r5, [r4, #0]
 8008c28:	6909      	ldr	r1, [r1, #16]
 8008c2a:	eba5 0901 	sub.w	r9, r5, r1
 8008c2e:	6965      	ldr	r5, [r4, #20]
 8008c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c38:	3301      	adds	r3, #1
 8008c3a:	444b      	add	r3, r9
 8008c3c:	106d      	asrs	r5, r5, #1
 8008c3e:	429d      	cmp	r5, r3
 8008c40:	bf38      	it	cc
 8008c42:	461d      	movcc	r5, r3
 8008c44:	0553      	lsls	r3, r2, #21
 8008c46:	d531      	bpl.n	8008cac <__ssputs_r+0xa0>
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7ff ff6b 	bl	8008b24 <_malloc_r>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	b950      	cbnz	r0, 8008c68 <__ssputs_r+0x5c>
 8008c52:	230c      	movs	r3, #12
 8008c54:	f8ca 3000 	str.w	r3, [sl]
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	6921      	ldr	r1, [r4, #16]
 8008c6a:	464a      	mov	r2, r9
 8008c6c:	f7ff fb46 	bl	80082fc <memcpy>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	6126      	str	r6, [r4, #16]
 8008c7e:	6165      	str	r5, [r4, #20]
 8008c80:	444e      	add	r6, r9
 8008c82:	eba5 0509 	sub.w	r5, r5, r9
 8008c86:	6026      	str	r6, [r4, #0]
 8008c88:	60a5      	str	r5, [r4, #8]
 8008c8a:	463e      	mov	r6, r7
 8008c8c:	42be      	cmp	r6, r7
 8008c8e:	d900      	bls.n	8008c92 <__ssputs_r+0x86>
 8008c90:	463e      	mov	r6, r7
 8008c92:	6820      	ldr	r0, [r4, #0]
 8008c94:	4632      	mov	r2, r6
 8008c96:	4641      	mov	r1, r8
 8008c98:	f000 f966 	bl	8008f68 <memmove>
 8008c9c:	68a3      	ldr	r3, [r4, #8]
 8008c9e:	1b9b      	subs	r3, r3, r6
 8008ca0:	60a3      	str	r3, [r4, #8]
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	4433      	add	r3, r6
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e7db      	b.n	8008c64 <__ssputs_r+0x58>
 8008cac:	462a      	mov	r2, r5
 8008cae:	f000 f981 	bl	8008fb4 <_realloc_r>
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d1e1      	bne.n	8008c7c <__ssputs_r+0x70>
 8008cb8:	6921      	ldr	r1, [r4, #16]
 8008cba:	4650      	mov	r0, sl
 8008cbc:	f7ff fec6 	bl	8008a4c <_free_r>
 8008cc0:	e7c7      	b.n	8008c52 <__ssputs_r+0x46>
	...

08008cc4 <_svfiprintf_r>:
 8008cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	4698      	mov	r8, r3
 8008cca:	898b      	ldrh	r3, [r1, #12]
 8008ccc:	061b      	lsls	r3, r3, #24
 8008cce:	b09d      	sub	sp, #116	; 0x74
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	d50e      	bpl.n	8008cf6 <_svfiprintf_r+0x32>
 8008cd8:	690b      	ldr	r3, [r1, #16]
 8008cda:	b963      	cbnz	r3, 8008cf6 <_svfiprintf_r+0x32>
 8008cdc:	2140      	movs	r1, #64	; 0x40
 8008cde:	f7ff ff21 	bl	8008b24 <_malloc_r>
 8008ce2:	6028      	str	r0, [r5, #0]
 8008ce4:	6128      	str	r0, [r5, #16]
 8008ce6:	b920      	cbnz	r0, 8008cf2 <_svfiprintf_r+0x2e>
 8008ce8:	230c      	movs	r3, #12
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf0:	e0d1      	b.n	8008e96 <_svfiprintf_r+0x1d2>
 8008cf2:	2340      	movs	r3, #64	; 0x40
 8008cf4:	616b      	str	r3, [r5, #20]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d04:	2330      	movs	r3, #48	; 0x30
 8008d06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008eb0 <_svfiprintf_r+0x1ec>
 8008d0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d0e:	f04f 0901 	mov.w	r9, #1
 8008d12:	4623      	mov	r3, r4
 8008d14:	469a      	mov	sl, r3
 8008d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1a:	b10a      	cbz	r2, 8008d20 <_svfiprintf_r+0x5c>
 8008d1c:	2a25      	cmp	r2, #37	; 0x25
 8008d1e:	d1f9      	bne.n	8008d14 <_svfiprintf_r+0x50>
 8008d20:	ebba 0b04 	subs.w	fp, sl, r4
 8008d24:	d00b      	beq.n	8008d3e <_svfiprintf_r+0x7a>
 8008d26:	465b      	mov	r3, fp
 8008d28:	4622      	mov	r2, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f7ff ff6d 	bl	8008c0c <__ssputs_r>
 8008d32:	3001      	adds	r0, #1
 8008d34:	f000 80aa 	beq.w	8008e8c <_svfiprintf_r+0x1c8>
 8008d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d3a:	445a      	add	r2, fp
 8008d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 80a2 	beq.w	8008e8c <_svfiprintf_r+0x1c8>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d52:	f10a 0a01 	add.w	sl, sl, #1
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	9307      	str	r3, [sp, #28]
 8008d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d60:	4654      	mov	r4, sl
 8008d62:	2205      	movs	r2, #5
 8008d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d68:	4851      	ldr	r0, [pc, #324]	; (8008eb0 <_svfiprintf_r+0x1ec>)
 8008d6a:	f7f7 fac9 	bl	8000300 <memchr>
 8008d6e:	9a04      	ldr	r2, [sp, #16]
 8008d70:	b9d8      	cbnz	r0, 8008daa <_svfiprintf_r+0xe6>
 8008d72:	06d0      	lsls	r0, r2, #27
 8008d74:	bf44      	itt	mi
 8008d76:	2320      	movmi	r3, #32
 8008d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d7c:	0711      	lsls	r1, r2, #28
 8008d7e:	bf44      	itt	mi
 8008d80:	232b      	movmi	r3, #43	; 0x2b
 8008d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d86:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d8c:	d015      	beq.n	8008dba <_svfiprintf_r+0xf6>
 8008d8e:	9a07      	ldr	r2, [sp, #28]
 8008d90:	4654      	mov	r4, sl
 8008d92:	2000      	movs	r0, #0
 8008d94:	f04f 0c0a 	mov.w	ip, #10
 8008d98:	4621      	mov	r1, r4
 8008d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d9e:	3b30      	subs	r3, #48	; 0x30
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	d94e      	bls.n	8008e42 <_svfiprintf_r+0x17e>
 8008da4:	b1b0      	cbz	r0, 8008dd4 <_svfiprintf_r+0x110>
 8008da6:	9207      	str	r2, [sp, #28]
 8008da8:	e014      	b.n	8008dd4 <_svfiprintf_r+0x110>
 8008daa:	eba0 0308 	sub.w	r3, r0, r8
 8008dae:	fa09 f303 	lsl.w	r3, r9, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	9304      	str	r3, [sp, #16]
 8008db6:	46a2      	mov	sl, r4
 8008db8:	e7d2      	b.n	8008d60 <_svfiprintf_r+0x9c>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	1d19      	adds	r1, r3, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9103      	str	r1, [sp, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfbb      	ittet	lt
 8008dc6:	425b      	neglt	r3, r3
 8008dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dcc:	9307      	strge	r3, [sp, #28]
 8008dce:	9307      	strlt	r3, [sp, #28]
 8008dd0:	bfb8      	it	lt
 8008dd2:	9204      	strlt	r2, [sp, #16]
 8008dd4:	7823      	ldrb	r3, [r4, #0]
 8008dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8008dd8:	d10c      	bne.n	8008df4 <_svfiprintf_r+0x130>
 8008dda:	7863      	ldrb	r3, [r4, #1]
 8008ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dde:	d135      	bne.n	8008e4c <_svfiprintf_r+0x188>
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	9203      	str	r2, [sp, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	bfb8      	it	lt
 8008dec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008df0:	3402      	adds	r4, #2
 8008df2:	9305      	str	r3, [sp, #20]
 8008df4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ec0 <_svfiprintf_r+0x1fc>
 8008df8:	7821      	ldrb	r1, [r4, #0]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	4650      	mov	r0, sl
 8008dfe:	f7f7 fa7f 	bl	8000300 <memchr>
 8008e02:	b140      	cbz	r0, 8008e16 <_svfiprintf_r+0x152>
 8008e04:	2340      	movs	r3, #64	; 0x40
 8008e06:	eba0 000a 	sub.w	r0, r0, sl
 8008e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e0e:	9b04      	ldr	r3, [sp, #16]
 8008e10:	4303      	orrs	r3, r0
 8008e12:	3401      	adds	r4, #1
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1a:	4826      	ldr	r0, [pc, #152]	; (8008eb4 <_svfiprintf_r+0x1f0>)
 8008e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e20:	2206      	movs	r2, #6
 8008e22:	f7f7 fa6d 	bl	8000300 <memchr>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d038      	beq.n	8008e9c <_svfiprintf_r+0x1d8>
 8008e2a:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <_svfiprintf_r+0x1f4>)
 8008e2c:	bb1b      	cbnz	r3, 8008e76 <_svfiprintf_r+0x1b2>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	3307      	adds	r3, #7
 8008e32:	f023 0307 	bic.w	r3, r3, #7
 8008e36:	3308      	adds	r3, #8
 8008e38:	9303      	str	r3, [sp, #12]
 8008e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3c:	4433      	add	r3, r6
 8008e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e40:	e767      	b.n	8008d12 <_svfiprintf_r+0x4e>
 8008e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e46:	460c      	mov	r4, r1
 8008e48:	2001      	movs	r0, #1
 8008e4a:	e7a5      	b.n	8008d98 <_svfiprintf_r+0xd4>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	3401      	adds	r4, #1
 8008e50:	9305      	str	r3, [sp, #20]
 8008e52:	4619      	mov	r1, r3
 8008e54:	f04f 0c0a 	mov.w	ip, #10
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e5e:	3a30      	subs	r2, #48	; 0x30
 8008e60:	2a09      	cmp	r2, #9
 8008e62:	d903      	bls.n	8008e6c <_svfiprintf_r+0x1a8>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0c5      	beq.n	8008df4 <_svfiprintf_r+0x130>
 8008e68:	9105      	str	r1, [sp, #20]
 8008e6a:	e7c3      	b.n	8008df4 <_svfiprintf_r+0x130>
 8008e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e70:	4604      	mov	r4, r0
 8008e72:	2301      	movs	r3, #1
 8008e74:	e7f0      	b.n	8008e58 <_svfiprintf_r+0x194>
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <_svfiprintf_r+0x1f8>)
 8008e7e:	a904      	add	r1, sp, #16
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7fe f84d 	bl	8006f20 <_printf_float>
 8008e86:	1c42      	adds	r2, r0, #1
 8008e88:	4606      	mov	r6, r0
 8008e8a:	d1d6      	bne.n	8008e3a <_svfiprintf_r+0x176>
 8008e8c:	89ab      	ldrh	r3, [r5, #12]
 8008e8e:	065b      	lsls	r3, r3, #25
 8008e90:	f53f af2c 	bmi.w	8008cec <_svfiprintf_r+0x28>
 8008e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e96:	b01d      	add	sp, #116	; 0x74
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	ab03      	add	r3, sp, #12
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <_svfiprintf_r+0x1f8>)
 8008ea4:	a904      	add	r1, sp, #16
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7fe fac6 	bl	8007438 <_printf_i>
 8008eac:	e7eb      	b.n	8008e86 <_svfiprintf_r+0x1c2>
 8008eae:	bf00      	nop
 8008eb0:	08009d2c 	.word	0x08009d2c
 8008eb4:	08009d36 	.word	0x08009d36
 8008eb8:	08006f21 	.word	0x08006f21
 8008ebc:	08008c0d 	.word	0x08008c0d
 8008ec0:	08009d32 	.word	0x08009d32

08008ec4 <_sbrk_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d06      	ldr	r5, [pc, #24]	; (8008ee0 <_sbrk_r+0x1c>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	602b      	str	r3, [r5, #0]
 8008ed0:	f7f8 f81a 	bl	8000f08 <_sbrk>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_sbrk_r+0x1a>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_sbrk_r+0x1a>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	24000374 	.word	0x24000374

08008ee4 <__assert_func>:
 8008ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	461a      	mov	r2, r3
 8008eea:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <__assert_func+0x2c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4605      	mov	r5, r0
 8008ef0:	68d8      	ldr	r0, [r3, #12]
 8008ef2:	b14c      	cbz	r4, 8008f08 <__assert_func+0x24>
 8008ef4:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <__assert_func+0x30>)
 8008ef6:	9100      	str	r1, [sp, #0]
 8008ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008efc:	4906      	ldr	r1, [pc, #24]	; (8008f18 <__assert_func+0x34>)
 8008efe:	462b      	mov	r3, r5
 8008f00:	f000 f80e 	bl	8008f20 <fiprintf>
 8008f04:	f000 faac 	bl	8009460 <abort>
 8008f08:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <__assert_func+0x38>)
 8008f0a:	461c      	mov	r4, r3
 8008f0c:	e7f3      	b.n	8008ef6 <__assert_func+0x12>
 8008f0e:	bf00      	nop
 8008f10:	24000010 	.word	0x24000010
 8008f14:	08009d3d 	.word	0x08009d3d
 8008f18:	08009d4a 	.word	0x08009d4a
 8008f1c:	08009d78 	.word	0x08009d78

08008f20 <fiprintf>:
 8008f20:	b40e      	push	{r1, r2, r3}
 8008f22:	b503      	push	{r0, r1, lr}
 8008f24:	4601      	mov	r1, r0
 8008f26:	ab03      	add	r3, sp, #12
 8008f28:	4805      	ldr	r0, [pc, #20]	; (8008f40 <fiprintf+0x20>)
 8008f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f2e:	6800      	ldr	r0, [r0, #0]
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	f000 f897 	bl	8009064 <_vfiprintf_r>
 8008f36:	b002      	add	sp, #8
 8008f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f3c:	b003      	add	sp, #12
 8008f3e:	4770      	bx	lr
 8008f40:	24000010 	.word	0x24000010

08008f44 <__ascii_mbtowc>:
 8008f44:	b082      	sub	sp, #8
 8008f46:	b901      	cbnz	r1, 8008f4a <__ascii_mbtowc+0x6>
 8008f48:	a901      	add	r1, sp, #4
 8008f4a:	b142      	cbz	r2, 8008f5e <__ascii_mbtowc+0x1a>
 8008f4c:	b14b      	cbz	r3, 8008f62 <__ascii_mbtowc+0x1e>
 8008f4e:	7813      	ldrb	r3, [r2, #0]
 8008f50:	600b      	str	r3, [r1, #0]
 8008f52:	7812      	ldrb	r2, [r2, #0]
 8008f54:	1e10      	subs	r0, r2, #0
 8008f56:	bf18      	it	ne
 8008f58:	2001      	movne	r0, #1
 8008f5a:	b002      	add	sp, #8
 8008f5c:	4770      	bx	lr
 8008f5e:	4610      	mov	r0, r2
 8008f60:	e7fb      	b.n	8008f5a <__ascii_mbtowc+0x16>
 8008f62:	f06f 0001 	mvn.w	r0, #1
 8008f66:	e7f8      	b.n	8008f5a <__ascii_mbtowc+0x16>

08008f68 <memmove>:
 8008f68:	4288      	cmp	r0, r1
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	eb01 0402 	add.w	r4, r1, r2
 8008f70:	d902      	bls.n	8008f78 <memmove+0x10>
 8008f72:	4284      	cmp	r4, r0
 8008f74:	4623      	mov	r3, r4
 8008f76:	d807      	bhi.n	8008f88 <memmove+0x20>
 8008f78:	1e43      	subs	r3, r0, #1
 8008f7a:	42a1      	cmp	r1, r4
 8008f7c:	d008      	beq.n	8008f90 <memmove+0x28>
 8008f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f86:	e7f8      	b.n	8008f7a <memmove+0x12>
 8008f88:	4402      	add	r2, r0
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	428a      	cmp	r2, r1
 8008f8e:	d100      	bne.n	8008f92 <memmove+0x2a>
 8008f90:	bd10      	pop	{r4, pc}
 8008f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f9a:	e7f7      	b.n	8008f8c <memmove+0x24>

08008f9c <__malloc_lock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	; (8008fa4 <__malloc_lock+0x8>)
 8008f9e:	f000 bc1f 	b.w	80097e0 <__retarget_lock_acquire_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	24000378 	.word	0x24000378

08008fa8 <__malloc_unlock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_unlock+0x8>)
 8008faa:	f000 bc1a 	b.w	80097e2 <__retarget_lock_release_recursive>
 8008fae:	bf00      	nop
 8008fb0:	24000378 	.word	0x24000378

08008fb4 <_realloc_r>:
 8008fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb8:	4680      	mov	r8, r0
 8008fba:	4614      	mov	r4, r2
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	b921      	cbnz	r1, 8008fca <_realloc_r+0x16>
 8008fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	f7ff bdad 	b.w	8008b24 <_malloc_r>
 8008fca:	b92a      	cbnz	r2, 8008fd8 <_realloc_r+0x24>
 8008fcc:	f7ff fd3e 	bl	8008a4c <_free_r>
 8008fd0:	4625      	mov	r5, r4
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	f000 fc6a 	bl	80098b0 <_malloc_usable_size_r>
 8008fdc:	4284      	cmp	r4, r0
 8008fde:	4607      	mov	r7, r0
 8008fe0:	d802      	bhi.n	8008fe8 <_realloc_r+0x34>
 8008fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fe6:	d812      	bhi.n	800900e <_realloc_r+0x5a>
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4640      	mov	r0, r8
 8008fec:	f7ff fd9a 	bl	8008b24 <_malloc_r>
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d0ed      	beq.n	8008fd2 <_realloc_r+0x1e>
 8008ff6:	42bc      	cmp	r4, r7
 8008ff8:	4622      	mov	r2, r4
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	bf28      	it	cs
 8008ffe:	463a      	movcs	r2, r7
 8009000:	f7ff f97c 	bl	80082fc <memcpy>
 8009004:	4631      	mov	r1, r6
 8009006:	4640      	mov	r0, r8
 8009008:	f7ff fd20 	bl	8008a4c <_free_r>
 800900c:	e7e1      	b.n	8008fd2 <_realloc_r+0x1e>
 800900e:	4635      	mov	r5, r6
 8009010:	e7df      	b.n	8008fd2 <_realloc_r+0x1e>

08009012 <__sfputc_r>:
 8009012:	6893      	ldr	r3, [r2, #8]
 8009014:	3b01      	subs	r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	b410      	push	{r4}
 800901a:	6093      	str	r3, [r2, #8]
 800901c:	da08      	bge.n	8009030 <__sfputc_r+0x1e>
 800901e:	6994      	ldr	r4, [r2, #24]
 8009020:	42a3      	cmp	r3, r4
 8009022:	db01      	blt.n	8009028 <__sfputc_r+0x16>
 8009024:	290a      	cmp	r1, #10
 8009026:	d103      	bne.n	8009030 <__sfputc_r+0x1e>
 8009028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800902c:	f000 b94a 	b.w	80092c4 <__swbuf_r>
 8009030:	6813      	ldr	r3, [r2, #0]
 8009032:	1c58      	adds	r0, r3, #1
 8009034:	6010      	str	r0, [r2, #0]
 8009036:	7019      	strb	r1, [r3, #0]
 8009038:	4608      	mov	r0, r1
 800903a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903e:	4770      	bx	lr

08009040 <__sfputs_r>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	4606      	mov	r6, r0
 8009044:	460f      	mov	r7, r1
 8009046:	4614      	mov	r4, r2
 8009048:	18d5      	adds	r5, r2, r3
 800904a:	42ac      	cmp	r4, r5
 800904c:	d101      	bne.n	8009052 <__sfputs_r+0x12>
 800904e:	2000      	movs	r0, #0
 8009050:	e007      	b.n	8009062 <__sfputs_r+0x22>
 8009052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009056:	463a      	mov	r2, r7
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff ffda 	bl	8009012 <__sfputc_r>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	d1f3      	bne.n	800904a <__sfputs_r+0xa>
 8009062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009064 <_vfiprintf_r>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	460d      	mov	r5, r1
 800906a:	b09d      	sub	sp, #116	; 0x74
 800906c:	4614      	mov	r4, r2
 800906e:	4698      	mov	r8, r3
 8009070:	4606      	mov	r6, r0
 8009072:	b118      	cbz	r0, 800907c <_vfiprintf_r+0x18>
 8009074:	6983      	ldr	r3, [r0, #24]
 8009076:	b90b      	cbnz	r3, 800907c <_vfiprintf_r+0x18>
 8009078:	f000 fb14 	bl	80096a4 <__sinit>
 800907c:	4b89      	ldr	r3, [pc, #548]	; (80092a4 <_vfiprintf_r+0x240>)
 800907e:	429d      	cmp	r5, r3
 8009080:	d11b      	bne.n	80090ba <_vfiprintf_r+0x56>
 8009082:	6875      	ldr	r5, [r6, #4]
 8009084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009086:	07d9      	lsls	r1, r3, #31
 8009088:	d405      	bmi.n	8009096 <_vfiprintf_r+0x32>
 800908a:	89ab      	ldrh	r3, [r5, #12]
 800908c:	059a      	lsls	r2, r3, #22
 800908e:	d402      	bmi.n	8009096 <_vfiprintf_r+0x32>
 8009090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009092:	f000 fba5 	bl	80097e0 <__retarget_lock_acquire_recursive>
 8009096:	89ab      	ldrh	r3, [r5, #12]
 8009098:	071b      	lsls	r3, r3, #28
 800909a:	d501      	bpl.n	80090a0 <_vfiprintf_r+0x3c>
 800909c:	692b      	ldr	r3, [r5, #16]
 800909e:	b9eb      	cbnz	r3, 80090dc <_vfiprintf_r+0x78>
 80090a0:	4629      	mov	r1, r5
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 f96e 	bl	8009384 <__swsetup_r>
 80090a8:	b1c0      	cbz	r0, 80090dc <_vfiprintf_r+0x78>
 80090aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ac:	07dc      	lsls	r4, r3, #31
 80090ae:	d50e      	bpl.n	80090ce <_vfiprintf_r+0x6a>
 80090b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090b4:	b01d      	add	sp, #116	; 0x74
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	4b7b      	ldr	r3, [pc, #492]	; (80092a8 <_vfiprintf_r+0x244>)
 80090bc:	429d      	cmp	r5, r3
 80090be:	d101      	bne.n	80090c4 <_vfiprintf_r+0x60>
 80090c0:	68b5      	ldr	r5, [r6, #8]
 80090c2:	e7df      	b.n	8009084 <_vfiprintf_r+0x20>
 80090c4:	4b79      	ldr	r3, [pc, #484]	; (80092ac <_vfiprintf_r+0x248>)
 80090c6:	429d      	cmp	r5, r3
 80090c8:	bf08      	it	eq
 80090ca:	68f5      	ldreq	r5, [r6, #12]
 80090cc:	e7da      	b.n	8009084 <_vfiprintf_r+0x20>
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	0598      	lsls	r0, r3, #22
 80090d2:	d4ed      	bmi.n	80090b0 <_vfiprintf_r+0x4c>
 80090d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d6:	f000 fb84 	bl	80097e2 <__retarget_lock_release_recursive>
 80090da:	e7e9      	b.n	80090b0 <_vfiprintf_r+0x4c>
 80090dc:	2300      	movs	r3, #0
 80090de:	9309      	str	r3, [sp, #36]	; 0x24
 80090e0:	2320      	movs	r3, #32
 80090e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ea:	2330      	movs	r3, #48	; 0x30
 80090ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092b0 <_vfiprintf_r+0x24c>
 80090f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090f4:	f04f 0901 	mov.w	r9, #1
 80090f8:	4623      	mov	r3, r4
 80090fa:	469a      	mov	sl, r3
 80090fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009100:	b10a      	cbz	r2, 8009106 <_vfiprintf_r+0xa2>
 8009102:	2a25      	cmp	r2, #37	; 0x25
 8009104:	d1f9      	bne.n	80090fa <_vfiprintf_r+0x96>
 8009106:	ebba 0b04 	subs.w	fp, sl, r4
 800910a:	d00b      	beq.n	8009124 <_vfiprintf_r+0xc0>
 800910c:	465b      	mov	r3, fp
 800910e:	4622      	mov	r2, r4
 8009110:	4629      	mov	r1, r5
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ff94 	bl	8009040 <__sfputs_r>
 8009118:	3001      	adds	r0, #1
 800911a:	f000 80aa 	beq.w	8009272 <_vfiprintf_r+0x20e>
 800911e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009120:	445a      	add	r2, fp
 8009122:	9209      	str	r2, [sp, #36]	; 0x24
 8009124:	f89a 3000 	ldrb.w	r3, [sl]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 80a2 	beq.w	8009272 <_vfiprintf_r+0x20e>
 800912e:	2300      	movs	r3, #0
 8009130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009138:	f10a 0a01 	add.w	sl, sl, #1
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	9307      	str	r3, [sp, #28]
 8009140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009144:	931a      	str	r3, [sp, #104]	; 0x68
 8009146:	4654      	mov	r4, sl
 8009148:	2205      	movs	r2, #5
 800914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914e:	4858      	ldr	r0, [pc, #352]	; (80092b0 <_vfiprintf_r+0x24c>)
 8009150:	f7f7 f8d6 	bl	8000300 <memchr>
 8009154:	9a04      	ldr	r2, [sp, #16]
 8009156:	b9d8      	cbnz	r0, 8009190 <_vfiprintf_r+0x12c>
 8009158:	06d1      	lsls	r1, r2, #27
 800915a:	bf44      	itt	mi
 800915c:	2320      	movmi	r3, #32
 800915e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009162:	0713      	lsls	r3, r2, #28
 8009164:	bf44      	itt	mi
 8009166:	232b      	movmi	r3, #43	; 0x2b
 8009168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916c:	f89a 3000 	ldrb.w	r3, [sl]
 8009170:	2b2a      	cmp	r3, #42	; 0x2a
 8009172:	d015      	beq.n	80091a0 <_vfiprintf_r+0x13c>
 8009174:	9a07      	ldr	r2, [sp, #28]
 8009176:	4654      	mov	r4, sl
 8009178:	2000      	movs	r0, #0
 800917a:	f04f 0c0a 	mov.w	ip, #10
 800917e:	4621      	mov	r1, r4
 8009180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009184:	3b30      	subs	r3, #48	; 0x30
 8009186:	2b09      	cmp	r3, #9
 8009188:	d94e      	bls.n	8009228 <_vfiprintf_r+0x1c4>
 800918a:	b1b0      	cbz	r0, 80091ba <_vfiprintf_r+0x156>
 800918c:	9207      	str	r2, [sp, #28]
 800918e:	e014      	b.n	80091ba <_vfiprintf_r+0x156>
 8009190:	eba0 0308 	sub.w	r3, r0, r8
 8009194:	fa09 f303 	lsl.w	r3, r9, r3
 8009198:	4313      	orrs	r3, r2
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	46a2      	mov	sl, r4
 800919e:	e7d2      	b.n	8009146 <_vfiprintf_r+0xe2>
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	1d19      	adds	r1, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	9103      	str	r1, [sp, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfbb      	ittet	lt
 80091ac:	425b      	neglt	r3, r3
 80091ae:	f042 0202 	orrlt.w	r2, r2, #2
 80091b2:	9307      	strge	r3, [sp, #28]
 80091b4:	9307      	strlt	r3, [sp, #28]
 80091b6:	bfb8      	it	lt
 80091b8:	9204      	strlt	r2, [sp, #16]
 80091ba:	7823      	ldrb	r3, [r4, #0]
 80091bc:	2b2e      	cmp	r3, #46	; 0x2e
 80091be:	d10c      	bne.n	80091da <_vfiprintf_r+0x176>
 80091c0:	7863      	ldrb	r3, [r4, #1]
 80091c2:	2b2a      	cmp	r3, #42	; 0x2a
 80091c4:	d135      	bne.n	8009232 <_vfiprintf_r+0x1ce>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	1d1a      	adds	r2, r3, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	9203      	str	r2, [sp, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfb8      	it	lt
 80091d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091d6:	3402      	adds	r4, #2
 80091d8:	9305      	str	r3, [sp, #20]
 80091da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092c0 <_vfiprintf_r+0x25c>
 80091de:	7821      	ldrb	r1, [r4, #0]
 80091e0:	2203      	movs	r2, #3
 80091e2:	4650      	mov	r0, sl
 80091e4:	f7f7 f88c 	bl	8000300 <memchr>
 80091e8:	b140      	cbz	r0, 80091fc <_vfiprintf_r+0x198>
 80091ea:	2340      	movs	r3, #64	; 0x40
 80091ec:	eba0 000a 	sub.w	r0, r0, sl
 80091f0:	fa03 f000 	lsl.w	r0, r3, r0
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	4303      	orrs	r3, r0
 80091f8:	3401      	adds	r4, #1
 80091fa:	9304      	str	r3, [sp, #16]
 80091fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009200:	482c      	ldr	r0, [pc, #176]	; (80092b4 <_vfiprintf_r+0x250>)
 8009202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009206:	2206      	movs	r2, #6
 8009208:	f7f7 f87a 	bl	8000300 <memchr>
 800920c:	2800      	cmp	r0, #0
 800920e:	d03f      	beq.n	8009290 <_vfiprintf_r+0x22c>
 8009210:	4b29      	ldr	r3, [pc, #164]	; (80092b8 <_vfiprintf_r+0x254>)
 8009212:	bb1b      	cbnz	r3, 800925c <_vfiprintf_r+0x1f8>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	3307      	adds	r3, #7
 8009218:	f023 0307 	bic.w	r3, r3, #7
 800921c:	3308      	adds	r3, #8
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009222:	443b      	add	r3, r7
 8009224:	9309      	str	r3, [sp, #36]	; 0x24
 8009226:	e767      	b.n	80090f8 <_vfiprintf_r+0x94>
 8009228:	fb0c 3202 	mla	r2, ip, r2, r3
 800922c:	460c      	mov	r4, r1
 800922e:	2001      	movs	r0, #1
 8009230:	e7a5      	b.n	800917e <_vfiprintf_r+0x11a>
 8009232:	2300      	movs	r3, #0
 8009234:	3401      	adds	r4, #1
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	4619      	mov	r1, r3
 800923a:	f04f 0c0a 	mov.w	ip, #10
 800923e:	4620      	mov	r0, r4
 8009240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009244:	3a30      	subs	r2, #48	; 0x30
 8009246:	2a09      	cmp	r2, #9
 8009248:	d903      	bls.n	8009252 <_vfiprintf_r+0x1ee>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0c5      	beq.n	80091da <_vfiprintf_r+0x176>
 800924e:	9105      	str	r1, [sp, #20]
 8009250:	e7c3      	b.n	80091da <_vfiprintf_r+0x176>
 8009252:	fb0c 2101 	mla	r1, ip, r1, r2
 8009256:	4604      	mov	r4, r0
 8009258:	2301      	movs	r3, #1
 800925a:	e7f0      	b.n	800923e <_vfiprintf_r+0x1da>
 800925c:	ab03      	add	r3, sp, #12
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	462a      	mov	r2, r5
 8009262:	4b16      	ldr	r3, [pc, #88]	; (80092bc <_vfiprintf_r+0x258>)
 8009264:	a904      	add	r1, sp, #16
 8009266:	4630      	mov	r0, r6
 8009268:	f7fd fe5a 	bl	8006f20 <_printf_float>
 800926c:	4607      	mov	r7, r0
 800926e:	1c78      	adds	r0, r7, #1
 8009270:	d1d6      	bne.n	8009220 <_vfiprintf_r+0x1bc>
 8009272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009274:	07d9      	lsls	r1, r3, #31
 8009276:	d405      	bmi.n	8009284 <_vfiprintf_r+0x220>
 8009278:	89ab      	ldrh	r3, [r5, #12]
 800927a:	059a      	lsls	r2, r3, #22
 800927c:	d402      	bmi.n	8009284 <_vfiprintf_r+0x220>
 800927e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009280:	f000 faaf 	bl	80097e2 <__retarget_lock_release_recursive>
 8009284:	89ab      	ldrh	r3, [r5, #12]
 8009286:	065b      	lsls	r3, r3, #25
 8009288:	f53f af12 	bmi.w	80090b0 <_vfiprintf_r+0x4c>
 800928c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800928e:	e711      	b.n	80090b4 <_vfiprintf_r+0x50>
 8009290:	ab03      	add	r3, sp, #12
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	462a      	mov	r2, r5
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <_vfiprintf_r+0x258>)
 8009298:	a904      	add	r1, sp, #16
 800929a:	4630      	mov	r0, r6
 800929c:	f7fe f8cc 	bl	8007438 <_printf_i>
 80092a0:	e7e4      	b.n	800926c <_vfiprintf_r+0x208>
 80092a2:	bf00      	nop
 80092a4:	08009ea4 	.word	0x08009ea4
 80092a8:	08009ec4 	.word	0x08009ec4
 80092ac:	08009e84 	.word	0x08009e84
 80092b0:	08009d2c 	.word	0x08009d2c
 80092b4:	08009d36 	.word	0x08009d36
 80092b8:	08006f21 	.word	0x08006f21
 80092bc:	08009041 	.word	0x08009041
 80092c0:	08009d32 	.word	0x08009d32

080092c4 <__swbuf_r>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	460e      	mov	r6, r1
 80092c8:	4614      	mov	r4, r2
 80092ca:	4605      	mov	r5, r0
 80092cc:	b118      	cbz	r0, 80092d6 <__swbuf_r+0x12>
 80092ce:	6983      	ldr	r3, [r0, #24]
 80092d0:	b90b      	cbnz	r3, 80092d6 <__swbuf_r+0x12>
 80092d2:	f000 f9e7 	bl	80096a4 <__sinit>
 80092d6:	4b21      	ldr	r3, [pc, #132]	; (800935c <__swbuf_r+0x98>)
 80092d8:	429c      	cmp	r4, r3
 80092da:	d12b      	bne.n	8009334 <__swbuf_r+0x70>
 80092dc:	686c      	ldr	r4, [r5, #4]
 80092de:	69a3      	ldr	r3, [r4, #24]
 80092e0:	60a3      	str	r3, [r4, #8]
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	071a      	lsls	r2, r3, #28
 80092e6:	d52f      	bpl.n	8009348 <__swbuf_r+0x84>
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	b36b      	cbz	r3, 8009348 <__swbuf_r+0x84>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	6820      	ldr	r0, [r4, #0]
 80092f0:	1ac0      	subs	r0, r0, r3
 80092f2:	6963      	ldr	r3, [r4, #20]
 80092f4:	b2f6      	uxtb	r6, r6
 80092f6:	4283      	cmp	r3, r0
 80092f8:	4637      	mov	r7, r6
 80092fa:	dc04      	bgt.n	8009306 <__swbuf_r+0x42>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f93c 	bl	800957c <_fflush_r>
 8009304:	bb30      	cbnz	r0, 8009354 <__swbuf_r+0x90>
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	3b01      	subs	r3, #1
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	6022      	str	r2, [r4, #0]
 8009312:	701e      	strb	r6, [r3, #0]
 8009314:	6963      	ldr	r3, [r4, #20]
 8009316:	3001      	adds	r0, #1
 8009318:	4283      	cmp	r3, r0
 800931a:	d004      	beq.n	8009326 <__swbuf_r+0x62>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	07db      	lsls	r3, r3, #31
 8009320:	d506      	bpl.n	8009330 <__swbuf_r+0x6c>
 8009322:	2e0a      	cmp	r6, #10
 8009324:	d104      	bne.n	8009330 <__swbuf_r+0x6c>
 8009326:	4621      	mov	r1, r4
 8009328:	4628      	mov	r0, r5
 800932a:	f000 f927 	bl	800957c <_fflush_r>
 800932e:	b988      	cbnz	r0, 8009354 <__swbuf_r+0x90>
 8009330:	4638      	mov	r0, r7
 8009332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <__swbuf_r+0x9c>)
 8009336:	429c      	cmp	r4, r3
 8009338:	d101      	bne.n	800933e <__swbuf_r+0x7a>
 800933a:	68ac      	ldr	r4, [r5, #8]
 800933c:	e7cf      	b.n	80092de <__swbuf_r+0x1a>
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <__swbuf_r+0xa0>)
 8009340:	429c      	cmp	r4, r3
 8009342:	bf08      	it	eq
 8009344:	68ec      	ldreq	r4, [r5, #12]
 8009346:	e7ca      	b.n	80092de <__swbuf_r+0x1a>
 8009348:	4621      	mov	r1, r4
 800934a:	4628      	mov	r0, r5
 800934c:	f000 f81a 	bl	8009384 <__swsetup_r>
 8009350:	2800      	cmp	r0, #0
 8009352:	d0cb      	beq.n	80092ec <__swbuf_r+0x28>
 8009354:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009358:	e7ea      	b.n	8009330 <__swbuf_r+0x6c>
 800935a:	bf00      	nop
 800935c:	08009ea4 	.word	0x08009ea4
 8009360:	08009ec4 	.word	0x08009ec4
 8009364:	08009e84 	.word	0x08009e84

08009368 <__ascii_wctomb>:
 8009368:	b149      	cbz	r1, 800937e <__ascii_wctomb+0x16>
 800936a:	2aff      	cmp	r2, #255	; 0xff
 800936c:	bf85      	ittet	hi
 800936e:	238a      	movhi	r3, #138	; 0x8a
 8009370:	6003      	strhi	r3, [r0, #0]
 8009372:	700a      	strbls	r2, [r1, #0]
 8009374:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009378:	bf98      	it	ls
 800937a:	2001      	movls	r0, #1
 800937c:	4770      	bx	lr
 800937e:	4608      	mov	r0, r1
 8009380:	4770      	bx	lr
	...

08009384 <__swsetup_r>:
 8009384:	4b32      	ldr	r3, [pc, #200]	; (8009450 <__swsetup_r+0xcc>)
 8009386:	b570      	push	{r4, r5, r6, lr}
 8009388:	681d      	ldr	r5, [r3, #0]
 800938a:	4606      	mov	r6, r0
 800938c:	460c      	mov	r4, r1
 800938e:	b125      	cbz	r5, 800939a <__swsetup_r+0x16>
 8009390:	69ab      	ldr	r3, [r5, #24]
 8009392:	b913      	cbnz	r3, 800939a <__swsetup_r+0x16>
 8009394:	4628      	mov	r0, r5
 8009396:	f000 f985 	bl	80096a4 <__sinit>
 800939a:	4b2e      	ldr	r3, [pc, #184]	; (8009454 <__swsetup_r+0xd0>)
 800939c:	429c      	cmp	r4, r3
 800939e:	d10f      	bne.n	80093c0 <__swsetup_r+0x3c>
 80093a0:	686c      	ldr	r4, [r5, #4]
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093a8:	0719      	lsls	r1, r3, #28
 80093aa:	d42c      	bmi.n	8009406 <__swsetup_r+0x82>
 80093ac:	06dd      	lsls	r5, r3, #27
 80093ae:	d411      	bmi.n	80093d4 <__swsetup_r+0x50>
 80093b0:	2309      	movs	r3, #9
 80093b2:	6033      	str	r3, [r6, #0]
 80093b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093be:	e03e      	b.n	800943e <__swsetup_r+0xba>
 80093c0:	4b25      	ldr	r3, [pc, #148]	; (8009458 <__swsetup_r+0xd4>)
 80093c2:	429c      	cmp	r4, r3
 80093c4:	d101      	bne.n	80093ca <__swsetup_r+0x46>
 80093c6:	68ac      	ldr	r4, [r5, #8]
 80093c8:	e7eb      	b.n	80093a2 <__swsetup_r+0x1e>
 80093ca:	4b24      	ldr	r3, [pc, #144]	; (800945c <__swsetup_r+0xd8>)
 80093cc:	429c      	cmp	r4, r3
 80093ce:	bf08      	it	eq
 80093d0:	68ec      	ldreq	r4, [r5, #12]
 80093d2:	e7e6      	b.n	80093a2 <__swsetup_r+0x1e>
 80093d4:	0758      	lsls	r0, r3, #29
 80093d6:	d512      	bpl.n	80093fe <__swsetup_r+0x7a>
 80093d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093da:	b141      	cbz	r1, 80093ee <__swsetup_r+0x6a>
 80093dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093e0:	4299      	cmp	r1, r3
 80093e2:	d002      	beq.n	80093ea <__swsetup_r+0x66>
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff fb31 	bl	8008a4c <_free_r>
 80093ea:	2300      	movs	r3, #0
 80093ec:	6363      	str	r3, [r4, #52]	; 0x34
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	2300      	movs	r3, #0
 80093f8:	6063      	str	r3, [r4, #4]
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	f043 0308 	orr.w	r3, r3, #8
 8009404:	81a3      	strh	r3, [r4, #12]
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	b94b      	cbnz	r3, 800941e <__swsetup_r+0x9a>
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009414:	d003      	beq.n	800941e <__swsetup_r+0x9a>
 8009416:	4621      	mov	r1, r4
 8009418:	4630      	mov	r0, r6
 800941a:	f000 fa09 	bl	8009830 <__smakebuf_r>
 800941e:	89a0      	ldrh	r0, [r4, #12]
 8009420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009424:	f010 0301 	ands.w	r3, r0, #1
 8009428:	d00a      	beq.n	8009440 <__swsetup_r+0xbc>
 800942a:	2300      	movs	r3, #0
 800942c:	60a3      	str	r3, [r4, #8]
 800942e:	6963      	ldr	r3, [r4, #20]
 8009430:	425b      	negs	r3, r3
 8009432:	61a3      	str	r3, [r4, #24]
 8009434:	6923      	ldr	r3, [r4, #16]
 8009436:	b943      	cbnz	r3, 800944a <__swsetup_r+0xc6>
 8009438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800943c:	d1ba      	bne.n	80093b4 <__swsetup_r+0x30>
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	0781      	lsls	r1, r0, #30
 8009442:	bf58      	it	pl
 8009444:	6963      	ldrpl	r3, [r4, #20]
 8009446:	60a3      	str	r3, [r4, #8]
 8009448:	e7f4      	b.n	8009434 <__swsetup_r+0xb0>
 800944a:	2000      	movs	r0, #0
 800944c:	e7f7      	b.n	800943e <__swsetup_r+0xba>
 800944e:	bf00      	nop
 8009450:	24000010 	.word	0x24000010
 8009454:	08009ea4 	.word	0x08009ea4
 8009458:	08009ec4 	.word	0x08009ec4
 800945c:	08009e84 	.word	0x08009e84

08009460 <abort>:
 8009460:	b508      	push	{r3, lr}
 8009462:	2006      	movs	r0, #6
 8009464:	f000 fa54 	bl	8009910 <raise>
 8009468:	2001      	movs	r0, #1
 800946a:	f7f7 fcd5 	bl	8000e18 <_exit>
	...

08009470 <__sflush_r>:
 8009470:	898a      	ldrh	r2, [r1, #12]
 8009472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009476:	4605      	mov	r5, r0
 8009478:	0710      	lsls	r0, r2, #28
 800947a:	460c      	mov	r4, r1
 800947c:	d458      	bmi.n	8009530 <__sflush_r+0xc0>
 800947e:	684b      	ldr	r3, [r1, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	dc05      	bgt.n	8009490 <__sflush_r+0x20>
 8009484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	dc02      	bgt.n	8009490 <__sflush_r+0x20>
 800948a:	2000      	movs	r0, #0
 800948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009492:	2e00      	cmp	r6, #0
 8009494:	d0f9      	beq.n	800948a <__sflush_r+0x1a>
 8009496:	2300      	movs	r3, #0
 8009498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800949c:	682f      	ldr	r7, [r5, #0]
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	d032      	beq.n	8009508 <__sflush_r+0x98>
 80094a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	075a      	lsls	r2, r3, #29
 80094a8:	d505      	bpl.n	80094b6 <__sflush_r+0x46>
 80094aa:	6863      	ldr	r3, [r4, #4]
 80094ac:	1ac0      	subs	r0, r0, r3
 80094ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094b0:	b10b      	cbz	r3, 80094b6 <__sflush_r+0x46>
 80094b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094b4:	1ac0      	subs	r0, r0, r3
 80094b6:	2300      	movs	r3, #0
 80094b8:	4602      	mov	r2, r0
 80094ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094bc:	6a21      	ldr	r1, [r4, #32]
 80094be:	4628      	mov	r0, r5
 80094c0:	47b0      	blx	r6
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	d106      	bne.n	80094d6 <__sflush_r+0x66>
 80094c8:	6829      	ldr	r1, [r5, #0]
 80094ca:	291d      	cmp	r1, #29
 80094cc:	d82c      	bhi.n	8009528 <__sflush_r+0xb8>
 80094ce:	4a2a      	ldr	r2, [pc, #168]	; (8009578 <__sflush_r+0x108>)
 80094d0:	40ca      	lsrs	r2, r1
 80094d2:	07d6      	lsls	r6, r2, #31
 80094d4:	d528      	bpl.n	8009528 <__sflush_r+0xb8>
 80094d6:	2200      	movs	r2, #0
 80094d8:	6062      	str	r2, [r4, #4]
 80094da:	04d9      	lsls	r1, r3, #19
 80094dc:	6922      	ldr	r2, [r4, #16]
 80094de:	6022      	str	r2, [r4, #0]
 80094e0:	d504      	bpl.n	80094ec <__sflush_r+0x7c>
 80094e2:	1c42      	adds	r2, r0, #1
 80094e4:	d101      	bne.n	80094ea <__sflush_r+0x7a>
 80094e6:	682b      	ldr	r3, [r5, #0]
 80094e8:	b903      	cbnz	r3, 80094ec <__sflush_r+0x7c>
 80094ea:	6560      	str	r0, [r4, #84]	; 0x54
 80094ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ee:	602f      	str	r7, [r5, #0]
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d0ca      	beq.n	800948a <__sflush_r+0x1a>
 80094f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094f8:	4299      	cmp	r1, r3
 80094fa:	d002      	beq.n	8009502 <__sflush_r+0x92>
 80094fc:	4628      	mov	r0, r5
 80094fe:	f7ff faa5 	bl	8008a4c <_free_r>
 8009502:	2000      	movs	r0, #0
 8009504:	6360      	str	r0, [r4, #52]	; 0x34
 8009506:	e7c1      	b.n	800948c <__sflush_r+0x1c>
 8009508:	6a21      	ldr	r1, [r4, #32]
 800950a:	2301      	movs	r3, #1
 800950c:	4628      	mov	r0, r5
 800950e:	47b0      	blx	r6
 8009510:	1c41      	adds	r1, r0, #1
 8009512:	d1c7      	bne.n	80094a4 <__sflush_r+0x34>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0c4      	beq.n	80094a4 <__sflush_r+0x34>
 800951a:	2b1d      	cmp	r3, #29
 800951c:	d001      	beq.n	8009522 <__sflush_r+0xb2>
 800951e:	2b16      	cmp	r3, #22
 8009520:	d101      	bne.n	8009526 <__sflush_r+0xb6>
 8009522:	602f      	str	r7, [r5, #0]
 8009524:	e7b1      	b.n	800948a <__sflush_r+0x1a>
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	e7ad      	b.n	800948c <__sflush_r+0x1c>
 8009530:	690f      	ldr	r7, [r1, #16]
 8009532:	2f00      	cmp	r7, #0
 8009534:	d0a9      	beq.n	800948a <__sflush_r+0x1a>
 8009536:	0793      	lsls	r3, r2, #30
 8009538:	680e      	ldr	r6, [r1, #0]
 800953a:	bf08      	it	eq
 800953c:	694b      	ldreq	r3, [r1, #20]
 800953e:	600f      	str	r7, [r1, #0]
 8009540:	bf18      	it	ne
 8009542:	2300      	movne	r3, #0
 8009544:	eba6 0807 	sub.w	r8, r6, r7
 8009548:	608b      	str	r3, [r1, #8]
 800954a:	f1b8 0f00 	cmp.w	r8, #0
 800954e:	dd9c      	ble.n	800948a <__sflush_r+0x1a>
 8009550:	6a21      	ldr	r1, [r4, #32]
 8009552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009554:	4643      	mov	r3, r8
 8009556:	463a      	mov	r2, r7
 8009558:	4628      	mov	r0, r5
 800955a:	47b0      	blx	r6
 800955c:	2800      	cmp	r0, #0
 800955e:	dc06      	bgt.n	800956e <__sflush_r+0xfe>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800956c:	e78e      	b.n	800948c <__sflush_r+0x1c>
 800956e:	4407      	add	r7, r0
 8009570:	eba8 0800 	sub.w	r8, r8, r0
 8009574:	e7e9      	b.n	800954a <__sflush_r+0xda>
 8009576:	bf00      	nop
 8009578:	20400001 	.word	0x20400001

0800957c <_fflush_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	690b      	ldr	r3, [r1, #16]
 8009580:	4605      	mov	r5, r0
 8009582:	460c      	mov	r4, r1
 8009584:	b913      	cbnz	r3, 800958c <_fflush_r+0x10>
 8009586:	2500      	movs	r5, #0
 8009588:	4628      	mov	r0, r5
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	b118      	cbz	r0, 8009596 <_fflush_r+0x1a>
 800958e:	6983      	ldr	r3, [r0, #24]
 8009590:	b90b      	cbnz	r3, 8009596 <_fflush_r+0x1a>
 8009592:	f000 f887 	bl	80096a4 <__sinit>
 8009596:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <_fflush_r+0x6c>)
 8009598:	429c      	cmp	r4, r3
 800959a:	d11b      	bne.n	80095d4 <_fflush_r+0x58>
 800959c:	686c      	ldr	r4, [r5, #4]
 800959e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0ef      	beq.n	8009586 <_fflush_r+0xa>
 80095a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095a8:	07d0      	lsls	r0, r2, #31
 80095aa:	d404      	bmi.n	80095b6 <_fflush_r+0x3a>
 80095ac:	0599      	lsls	r1, r3, #22
 80095ae:	d402      	bmi.n	80095b6 <_fflush_r+0x3a>
 80095b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b2:	f000 f915 	bl	80097e0 <__retarget_lock_acquire_recursive>
 80095b6:	4628      	mov	r0, r5
 80095b8:	4621      	mov	r1, r4
 80095ba:	f7ff ff59 	bl	8009470 <__sflush_r>
 80095be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095c0:	07da      	lsls	r2, r3, #31
 80095c2:	4605      	mov	r5, r0
 80095c4:	d4e0      	bmi.n	8009588 <_fflush_r+0xc>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	059b      	lsls	r3, r3, #22
 80095ca:	d4dd      	bmi.n	8009588 <_fflush_r+0xc>
 80095cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ce:	f000 f908 	bl	80097e2 <__retarget_lock_release_recursive>
 80095d2:	e7d9      	b.n	8009588 <_fflush_r+0xc>
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <_fflush_r+0x70>)
 80095d6:	429c      	cmp	r4, r3
 80095d8:	d101      	bne.n	80095de <_fflush_r+0x62>
 80095da:	68ac      	ldr	r4, [r5, #8]
 80095dc:	e7df      	b.n	800959e <_fflush_r+0x22>
 80095de:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <_fflush_r+0x74>)
 80095e0:	429c      	cmp	r4, r3
 80095e2:	bf08      	it	eq
 80095e4:	68ec      	ldreq	r4, [r5, #12]
 80095e6:	e7da      	b.n	800959e <_fflush_r+0x22>
 80095e8:	08009ea4 	.word	0x08009ea4
 80095ec:	08009ec4 	.word	0x08009ec4
 80095f0:	08009e84 	.word	0x08009e84

080095f4 <std>:
 80095f4:	2300      	movs	r3, #0
 80095f6:	b510      	push	{r4, lr}
 80095f8:	4604      	mov	r4, r0
 80095fa:	e9c0 3300 	strd	r3, r3, [r0]
 80095fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009602:	6083      	str	r3, [r0, #8]
 8009604:	8181      	strh	r1, [r0, #12]
 8009606:	6643      	str	r3, [r0, #100]	; 0x64
 8009608:	81c2      	strh	r2, [r0, #14]
 800960a:	6183      	str	r3, [r0, #24]
 800960c:	4619      	mov	r1, r3
 800960e:	2208      	movs	r2, #8
 8009610:	305c      	adds	r0, #92	; 0x5c
 8009612:	f7fd fbeb 	bl	8006dec <memset>
 8009616:	4b05      	ldr	r3, [pc, #20]	; (800962c <std+0x38>)
 8009618:	6263      	str	r3, [r4, #36]	; 0x24
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <std+0x3c>)
 800961c:	62a3      	str	r3, [r4, #40]	; 0x28
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <std+0x40>)
 8009620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <std+0x44>)
 8009624:	6224      	str	r4, [r4, #32]
 8009626:	6323      	str	r3, [r4, #48]	; 0x30
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	08009949 	.word	0x08009949
 8009630:	0800996b 	.word	0x0800996b
 8009634:	080099a3 	.word	0x080099a3
 8009638:	080099c7 	.word	0x080099c7

0800963c <_cleanup_r>:
 800963c:	4901      	ldr	r1, [pc, #4]	; (8009644 <_cleanup_r+0x8>)
 800963e:	f000 b8af 	b.w	80097a0 <_fwalk_reent>
 8009642:	bf00      	nop
 8009644:	0800957d 	.word	0x0800957d

08009648 <__sfmoreglue>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	2268      	movs	r2, #104	; 0x68
 800964c:	1e4d      	subs	r5, r1, #1
 800964e:	4355      	muls	r5, r2
 8009650:	460e      	mov	r6, r1
 8009652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009656:	f7ff fa65 	bl	8008b24 <_malloc_r>
 800965a:	4604      	mov	r4, r0
 800965c:	b140      	cbz	r0, 8009670 <__sfmoreglue+0x28>
 800965e:	2100      	movs	r1, #0
 8009660:	e9c0 1600 	strd	r1, r6, [r0]
 8009664:	300c      	adds	r0, #12
 8009666:	60a0      	str	r0, [r4, #8]
 8009668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800966c:	f7fd fbbe 	bl	8006dec <memset>
 8009670:	4620      	mov	r0, r4
 8009672:	bd70      	pop	{r4, r5, r6, pc}

08009674 <__sfp_lock_acquire>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__sfp_lock_acquire+0x8>)
 8009676:	f000 b8b3 	b.w	80097e0 <__retarget_lock_acquire_recursive>
 800967a:	bf00      	nop
 800967c:	24000379 	.word	0x24000379

08009680 <__sfp_lock_release>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__sfp_lock_release+0x8>)
 8009682:	f000 b8ae 	b.w	80097e2 <__retarget_lock_release_recursive>
 8009686:	bf00      	nop
 8009688:	24000379 	.word	0x24000379

0800968c <__sinit_lock_acquire>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__sinit_lock_acquire+0x8>)
 800968e:	f000 b8a7 	b.w	80097e0 <__retarget_lock_acquire_recursive>
 8009692:	bf00      	nop
 8009694:	2400037a 	.word	0x2400037a

08009698 <__sinit_lock_release>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sinit_lock_release+0x8>)
 800969a:	f000 b8a2 	b.w	80097e2 <__retarget_lock_release_recursive>
 800969e:	bf00      	nop
 80096a0:	2400037a 	.word	0x2400037a

080096a4 <__sinit>:
 80096a4:	b510      	push	{r4, lr}
 80096a6:	4604      	mov	r4, r0
 80096a8:	f7ff fff0 	bl	800968c <__sinit_lock_acquire>
 80096ac:	69a3      	ldr	r3, [r4, #24]
 80096ae:	b11b      	cbz	r3, 80096b8 <__sinit+0x14>
 80096b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b4:	f7ff bff0 	b.w	8009698 <__sinit_lock_release>
 80096b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096bc:	6523      	str	r3, [r4, #80]	; 0x50
 80096be:	4b13      	ldr	r3, [pc, #76]	; (800970c <__sinit+0x68>)
 80096c0:	4a13      	ldr	r2, [pc, #76]	; (8009710 <__sinit+0x6c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80096c6:	42a3      	cmp	r3, r4
 80096c8:	bf04      	itt	eq
 80096ca:	2301      	moveq	r3, #1
 80096cc:	61a3      	streq	r3, [r4, #24]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f820 	bl	8009714 <__sfp>
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 f81c 	bl	8009714 <__sfp>
 80096dc:	60a0      	str	r0, [r4, #8]
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 f818 	bl	8009714 <__sfp>
 80096e4:	2200      	movs	r2, #0
 80096e6:	60e0      	str	r0, [r4, #12]
 80096e8:	2104      	movs	r1, #4
 80096ea:	6860      	ldr	r0, [r4, #4]
 80096ec:	f7ff ff82 	bl	80095f4 <std>
 80096f0:	68a0      	ldr	r0, [r4, #8]
 80096f2:	2201      	movs	r2, #1
 80096f4:	2109      	movs	r1, #9
 80096f6:	f7ff ff7d 	bl	80095f4 <std>
 80096fa:	68e0      	ldr	r0, [r4, #12]
 80096fc:	2202      	movs	r2, #2
 80096fe:	2112      	movs	r1, #18
 8009700:	f7ff ff78 	bl	80095f4 <std>
 8009704:	2301      	movs	r3, #1
 8009706:	61a3      	str	r3, [r4, #24]
 8009708:	e7d2      	b.n	80096b0 <__sinit+0xc>
 800970a:	bf00      	nop
 800970c:	08009b0c 	.word	0x08009b0c
 8009710:	0800963d 	.word	0x0800963d

08009714 <__sfp>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	4607      	mov	r7, r0
 8009718:	f7ff ffac 	bl	8009674 <__sfp_lock_acquire>
 800971c:	4b1e      	ldr	r3, [pc, #120]	; (8009798 <__sfp+0x84>)
 800971e:	681e      	ldr	r6, [r3, #0]
 8009720:	69b3      	ldr	r3, [r6, #24]
 8009722:	b913      	cbnz	r3, 800972a <__sfp+0x16>
 8009724:	4630      	mov	r0, r6
 8009726:	f7ff ffbd 	bl	80096a4 <__sinit>
 800972a:	3648      	adds	r6, #72	; 0x48
 800972c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009730:	3b01      	subs	r3, #1
 8009732:	d503      	bpl.n	800973c <__sfp+0x28>
 8009734:	6833      	ldr	r3, [r6, #0]
 8009736:	b30b      	cbz	r3, 800977c <__sfp+0x68>
 8009738:	6836      	ldr	r6, [r6, #0]
 800973a:	e7f7      	b.n	800972c <__sfp+0x18>
 800973c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009740:	b9d5      	cbnz	r5, 8009778 <__sfp+0x64>
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <__sfp+0x88>)
 8009744:	60e3      	str	r3, [r4, #12]
 8009746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800974a:	6665      	str	r5, [r4, #100]	; 0x64
 800974c:	f000 f847 	bl	80097de <__retarget_lock_init_recursive>
 8009750:	f7ff ff96 	bl	8009680 <__sfp_lock_release>
 8009754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800975c:	6025      	str	r5, [r4, #0]
 800975e:	61a5      	str	r5, [r4, #24]
 8009760:	2208      	movs	r2, #8
 8009762:	4629      	mov	r1, r5
 8009764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009768:	f7fd fb40 	bl	8006dec <memset>
 800976c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009774:	4620      	mov	r0, r4
 8009776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009778:	3468      	adds	r4, #104	; 0x68
 800977a:	e7d9      	b.n	8009730 <__sfp+0x1c>
 800977c:	2104      	movs	r1, #4
 800977e:	4638      	mov	r0, r7
 8009780:	f7ff ff62 	bl	8009648 <__sfmoreglue>
 8009784:	4604      	mov	r4, r0
 8009786:	6030      	str	r0, [r6, #0]
 8009788:	2800      	cmp	r0, #0
 800978a:	d1d5      	bne.n	8009738 <__sfp+0x24>
 800978c:	f7ff ff78 	bl	8009680 <__sfp_lock_release>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	e7ee      	b.n	8009774 <__sfp+0x60>
 8009796:	bf00      	nop
 8009798:	08009b0c 	.word	0x08009b0c
 800979c:	ffff0001 	.word	0xffff0001

080097a0 <_fwalk_reent>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4606      	mov	r6, r0
 80097a6:	4688      	mov	r8, r1
 80097a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097ac:	2700      	movs	r7, #0
 80097ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097b2:	f1b9 0901 	subs.w	r9, r9, #1
 80097b6:	d505      	bpl.n	80097c4 <_fwalk_reent+0x24>
 80097b8:	6824      	ldr	r4, [r4, #0]
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	d1f7      	bne.n	80097ae <_fwalk_reent+0xe>
 80097be:	4638      	mov	r0, r7
 80097c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c4:	89ab      	ldrh	r3, [r5, #12]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d907      	bls.n	80097da <_fwalk_reent+0x3a>
 80097ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097ce:	3301      	adds	r3, #1
 80097d0:	d003      	beq.n	80097da <_fwalk_reent+0x3a>
 80097d2:	4629      	mov	r1, r5
 80097d4:	4630      	mov	r0, r6
 80097d6:	47c0      	blx	r8
 80097d8:	4307      	orrs	r7, r0
 80097da:	3568      	adds	r5, #104	; 0x68
 80097dc:	e7e9      	b.n	80097b2 <_fwalk_reent+0x12>

080097de <__retarget_lock_init_recursive>:
 80097de:	4770      	bx	lr

080097e0 <__retarget_lock_acquire_recursive>:
 80097e0:	4770      	bx	lr

080097e2 <__retarget_lock_release_recursive>:
 80097e2:	4770      	bx	lr

080097e4 <__swhatbuf_r>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	460e      	mov	r6, r1
 80097e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	b096      	sub	sp, #88	; 0x58
 80097f0:	4614      	mov	r4, r2
 80097f2:	461d      	mov	r5, r3
 80097f4:	da08      	bge.n	8009808 <__swhatbuf_r+0x24>
 80097f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	602a      	str	r2, [r5, #0]
 80097fe:	061a      	lsls	r2, r3, #24
 8009800:	d410      	bmi.n	8009824 <__swhatbuf_r+0x40>
 8009802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009806:	e00e      	b.n	8009826 <__swhatbuf_r+0x42>
 8009808:	466a      	mov	r2, sp
 800980a:	f000 f903 	bl	8009a14 <_fstat_r>
 800980e:	2800      	cmp	r0, #0
 8009810:	dbf1      	blt.n	80097f6 <__swhatbuf_r+0x12>
 8009812:	9a01      	ldr	r2, [sp, #4]
 8009814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800981c:	425a      	negs	r2, r3
 800981e:	415a      	adcs	r2, r3
 8009820:	602a      	str	r2, [r5, #0]
 8009822:	e7ee      	b.n	8009802 <__swhatbuf_r+0x1e>
 8009824:	2340      	movs	r3, #64	; 0x40
 8009826:	2000      	movs	r0, #0
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	b016      	add	sp, #88	; 0x58
 800982c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009830 <__smakebuf_r>:
 8009830:	898b      	ldrh	r3, [r1, #12]
 8009832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009834:	079d      	lsls	r5, r3, #30
 8009836:	4606      	mov	r6, r0
 8009838:	460c      	mov	r4, r1
 800983a:	d507      	bpl.n	800984c <__smakebuf_r+0x1c>
 800983c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	2301      	movs	r3, #1
 8009846:	6163      	str	r3, [r4, #20]
 8009848:	b002      	add	sp, #8
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	ab01      	add	r3, sp, #4
 800984e:	466a      	mov	r2, sp
 8009850:	f7ff ffc8 	bl	80097e4 <__swhatbuf_r>
 8009854:	9900      	ldr	r1, [sp, #0]
 8009856:	4605      	mov	r5, r0
 8009858:	4630      	mov	r0, r6
 800985a:	f7ff f963 	bl	8008b24 <_malloc_r>
 800985e:	b948      	cbnz	r0, 8009874 <__smakebuf_r+0x44>
 8009860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009864:	059a      	lsls	r2, r3, #22
 8009866:	d4ef      	bmi.n	8009848 <__smakebuf_r+0x18>
 8009868:	f023 0303 	bic.w	r3, r3, #3
 800986c:	f043 0302 	orr.w	r3, r3, #2
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	e7e3      	b.n	800983c <__smakebuf_r+0xc>
 8009874:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <__smakebuf_r+0x7c>)
 8009876:	62b3      	str	r3, [r6, #40]	; 0x28
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	6020      	str	r0, [r4, #0]
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	9b00      	ldr	r3, [sp, #0]
 8009884:	6163      	str	r3, [r4, #20]
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	6120      	str	r0, [r4, #16]
 800988a:	b15b      	cbz	r3, 80098a4 <__smakebuf_r+0x74>
 800988c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009890:	4630      	mov	r0, r6
 8009892:	f000 f8d1 	bl	8009a38 <_isatty_r>
 8009896:	b128      	cbz	r0, 80098a4 <__smakebuf_r+0x74>
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	f023 0303 	bic.w	r3, r3, #3
 800989e:	f043 0301 	orr.w	r3, r3, #1
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	89a0      	ldrh	r0, [r4, #12]
 80098a6:	4305      	orrs	r5, r0
 80098a8:	81a5      	strh	r5, [r4, #12]
 80098aa:	e7cd      	b.n	8009848 <__smakebuf_r+0x18>
 80098ac:	0800963d 	.word	0x0800963d

080098b0 <_malloc_usable_size_r>:
 80098b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b4:	1f18      	subs	r0, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bfbc      	itt	lt
 80098ba:	580b      	ldrlt	r3, [r1, r0]
 80098bc:	18c0      	addlt	r0, r0, r3
 80098be:	4770      	bx	lr

080098c0 <_raise_r>:
 80098c0:	291f      	cmp	r1, #31
 80098c2:	b538      	push	{r3, r4, r5, lr}
 80098c4:	4604      	mov	r4, r0
 80098c6:	460d      	mov	r5, r1
 80098c8:	d904      	bls.n	80098d4 <_raise_r+0x14>
 80098ca:	2316      	movs	r3, #22
 80098cc:	6003      	str	r3, [r0, #0]
 80098ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098d6:	b112      	cbz	r2, 80098de <_raise_r+0x1e>
 80098d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098dc:	b94b      	cbnz	r3, 80098f2 <_raise_r+0x32>
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 f830 	bl	8009944 <_getpid_r>
 80098e4:	462a      	mov	r2, r5
 80098e6:	4601      	mov	r1, r0
 80098e8:	4620      	mov	r0, r4
 80098ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ee:	f000 b817 	b.w	8009920 <_kill_r>
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d00a      	beq.n	800990c <_raise_r+0x4c>
 80098f6:	1c59      	adds	r1, r3, #1
 80098f8:	d103      	bne.n	8009902 <_raise_r+0x42>
 80098fa:	2316      	movs	r3, #22
 80098fc:	6003      	str	r3, [r0, #0]
 80098fe:	2001      	movs	r0, #1
 8009900:	e7e7      	b.n	80098d2 <_raise_r+0x12>
 8009902:	2400      	movs	r4, #0
 8009904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009908:	4628      	mov	r0, r5
 800990a:	4798      	blx	r3
 800990c:	2000      	movs	r0, #0
 800990e:	e7e0      	b.n	80098d2 <_raise_r+0x12>

08009910 <raise>:
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <raise+0xc>)
 8009912:	4601      	mov	r1, r0
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	f7ff bfd3 	b.w	80098c0 <_raise_r>
 800991a:	bf00      	nop
 800991c:	24000010 	.word	0x24000010

08009920 <_kill_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4d07      	ldr	r5, [pc, #28]	; (8009940 <_kill_r+0x20>)
 8009924:	2300      	movs	r3, #0
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	4611      	mov	r1, r2
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	f7f7 fa63 	bl	8000df8 <_kill>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	d102      	bne.n	800993c <_kill_r+0x1c>
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	b103      	cbz	r3, 800993c <_kill_r+0x1c>
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	bd38      	pop	{r3, r4, r5, pc}
 800993e:	bf00      	nop
 8009940:	24000374 	.word	0x24000374

08009944 <_getpid_r>:
 8009944:	f7f7 ba50 	b.w	8000de8 <_getpid>

08009948 <__sread>:
 8009948:	b510      	push	{r4, lr}
 800994a:	460c      	mov	r4, r1
 800994c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009950:	f000 f894 	bl	8009a7c <_read_r>
 8009954:	2800      	cmp	r0, #0
 8009956:	bfab      	itete	ge
 8009958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800995a:	89a3      	ldrhlt	r3, [r4, #12]
 800995c:	181b      	addge	r3, r3, r0
 800995e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009962:	bfac      	ite	ge
 8009964:	6563      	strge	r3, [r4, #84]	; 0x54
 8009966:	81a3      	strhlt	r3, [r4, #12]
 8009968:	bd10      	pop	{r4, pc}

0800996a <__swrite>:
 800996a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996e:	461f      	mov	r7, r3
 8009970:	898b      	ldrh	r3, [r1, #12]
 8009972:	05db      	lsls	r3, r3, #23
 8009974:	4605      	mov	r5, r0
 8009976:	460c      	mov	r4, r1
 8009978:	4616      	mov	r6, r2
 800997a:	d505      	bpl.n	8009988 <__swrite+0x1e>
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	2302      	movs	r3, #2
 8009982:	2200      	movs	r2, #0
 8009984:	f000 f868 	bl	8009a58 <_lseek_r>
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800998e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	4632      	mov	r2, r6
 8009996:	463b      	mov	r3, r7
 8009998:	4628      	mov	r0, r5
 800999a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800999e:	f000 b817 	b.w	80099d0 <_write_r>

080099a2 <__sseek>:
 80099a2:	b510      	push	{r4, lr}
 80099a4:	460c      	mov	r4, r1
 80099a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099aa:	f000 f855 	bl	8009a58 <_lseek_r>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	bf15      	itete	ne
 80099b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80099b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099be:	81a3      	strheq	r3, [r4, #12]
 80099c0:	bf18      	it	ne
 80099c2:	81a3      	strhne	r3, [r4, #12]
 80099c4:	bd10      	pop	{r4, pc}

080099c6 <__sclose>:
 80099c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ca:	f000 b813 	b.w	80099f4 <_close_r>
	...

080099d0 <_write_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d07      	ldr	r5, [pc, #28]	; (80099f0 <_write_r+0x20>)
 80099d4:	4604      	mov	r4, r0
 80099d6:	4608      	mov	r0, r1
 80099d8:	4611      	mov	r1, r2
 80099da:	2200      	movs	r2, #0
 80099dc:	602a      	str	r2, [r5, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	f7f7 fa41 	bl	8000e66 <_write>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d102      	bne.n	80099ee <_write_r+0x1e>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	b103      	cbz	r3, 80099ee <_write_r+0x1e>
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	24000374 	.word	0x24000374

080099f4 <_close_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d06      	ldr	r5, [pc, #24]	; (8009a10 <_close_r+0x1c>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	f7f7 fa4d 	bl	8000e9e <_close>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_close_r+0x1a>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_close_r+0x1a>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	24000374 	.word	0x24000374

08009a14 <_fstat_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	; (8009a34 <_fstat_r+0x20>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	f7f7 fa48 	bl	8000eb6 <_fstat>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d102      	bne.n	8009a30 <_fstat_r+0x1c>
 8009a2a:	682b      	ldr	r3, [r5, #0]
 8009a2c:	b103      	cbz	r3, 8009a30 <_fstat_r+0x1c>
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	bd38      	pop	{r3, r4, r5, pc}
 8009a32:	bf00      	nop
 8009a34:	24000374 	.word	0x24000374

08009a38 <_isatty_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	; (8009a54 <_isatty_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7f7 fa47 	bl	8000ed6 <_isatty>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_isatty_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_isatty_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	24000374 	.word	0x24000374

08009a58 <_lseek_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_lseek_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7f7 fa40 	bl	8000eec <_lseek>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_lseek_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_lseek_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	24000374 	.word	0x24000374

08009a7c <_read_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_read_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f7 f9ce 	bl	8000e2c <_read>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_read_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_read_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	24000374 	.word	0x24000374

08009aa0 <_init>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	bf00      	nop
 8009aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa6:	bc08      	pop	{r3}
 8009aa8:	469e      	mov	lr, r3
 8009aaa:	4770      	bx	lr

08009aac <_fini>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	bf00      	nop
 8009ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab2:	bc08      	pop	{r3}
 8009ab4:	469e      	mov	lr, r3
 8009ab6:	4770      	bx	lr
